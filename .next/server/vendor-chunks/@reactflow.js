"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@reactflow";
exports.ids = ["vendor-chunks/@reactflow"];
exports.modules = {

/***/ "(ssr)/./node_modules/@reactflow/core/dist/esm/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@reactflow/core/dist/esm/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseEdge: () => (/* binding */ BaseEdge),\n/* harmony export */   BezierEdge: () => (/* binding */ BezierEdge),\n/* harmony export */   ConnectionLineType: () => (/* binding */ ConnectionLineType),\n/* harmony export */   ConnectionMode: () => (/* binding */ ConnectionMode),\n/* harmony export */   EdgeLabelRenderer: () => (/* binding */ EdgeLabelRenderer),\n/* harmony export */   EdgeText: () => (/* binding */ EdgeText$1),\n/* harmony export */   Handle: () => (/* binding */ Handle$1),\n/* harmony export */   MarkerType: () => (/* binding */ MarkerType),\n/* harmony export */   PanOnScrollMode: () => (/* binding */ PanOnScrollMode),\n/* harmony export */   Panel: () => (/* binding */ Panel),\n/* harmony export */   Position: () => (/* binding */ Position),\n/* harmony export */   ReactFlow: () => (/* binding */ ReactFlow),\n/* harmony export */   ReactFlowProvider: () => (/* binding */ ReactFlowProvider),\n/* harmony export */   SelectionMode: () => (/* binding */ SelectionMode),\n/* harmony export */   SimpleBezierEdge: () => (/* binding */ SimpleBezierEdge),\n/* harmony export */   SmoothStepEdge: () => (/* binding */ SmoothStepEdge),\n/* harmony export */   StepEdge: () => (/* binding */ StepEdge),\n/* harmony export */   StraightEdge: () => (/* binding */ StraightEdge),\n/* harmony export */   addEdge: () => (/* binding */ addEdge),\n/* harmony export */   applyEdgeChanges: () => (/* binding */ applyEdgeChanges),\n/* harmony export */   applyNodeChanges: () => (/* binding */ applyNodeChanges),\n/* harmony export */   boxToRect: () => (/* binding */ boxToRect),\n/* harmony export */   clamp: () => (/* binding */ clamp),\n/* harmony export */   getBezierPath: () => (/* binding */ getBezierPath),\n/* harmony export */   getBoundsOfRects: () => (/* binding */ getBoundsOfRects),\n/* harmony export */   getConnectedEdges: () => (/* binding */ getConnectedEdges),\n/* harmony export */   getIncomers: () => (/* binding */ getIncomers),\n/* harmony export */   getMarkerEnd: () => (/* binding */ getMarkerEnd),\n/* harmony export */   getNodePositionWithOrigin: () => (/* binding */ getNodePositionWithOrigin),\n/* harmony export */   getNodesBounds: () => (/* binding */ getNodesBounds),\n/* harmony export */   getOutgoers: () => (/* binding */ getOutgoers),\n/* harmony export */   getRectOfNodes: () => (/* binding */ getRectOfNodes),\n/* harmony export */   getSimpleBezierPath: () => (/* binding */ getSimpleBezierPath),\n/* harmony export */   getSmoothStepPath: () => (/* binding */ getSmoothStepPath),\n/* harmony export */   getStraightPath: () => (/* binding */ getStraightPath),\n/* harmony export */   getTransformForBounds: () => (/* binding */ getTransformForBounds),\n/* harmony export */   getViewportForBounds: () => (/* binding */ getViewportForBounds),\n/* harmony export */   handleParentExpand: () => (/* binding */ handleParentExpand),\n/* harmony export */   internalsSymbol: () => (/* binding */ internalsSymbol),\n/* harmony export */   isEdge: () => (/* binding */ isEdge),\n/* harmony export */   isNode: () => (/* binding */ isNode),\n/* harmony export */   rectToBox: () => (/* binding */ rectToBox),\n/* harmony export */   updateEdge: () => (/* binding */ updateEdge),\n/* harmony export */   useEdges: () => (/* binding */ useEdges),\n/* harmony export */   useEdgesState: () => (/* binding */ useEdgesState),\n/* harmony export */   useGetPointerPosition: () => (/* binding */ useGetPointerPosition),\n/* harmony export */   useKeyPress: () => (/* binding */ useKeyPress),\n/* harmony export */   useNodeId: () => (/* binding */ useNodeId),\n/* harmony export */   useNodes: () => (/* binding */ useNodes),\n/* harmony export */   useNodesInitialized: () => (/* binding */ useNodesInitialized),\n/* harmony export */   useNodesState: () => (/* binding */ useNodesState),\n/* harmony export */   useOnSelectionChange: () => (/* binding */ useOnSelectionChange),\n/* harmony export */   useOnViewportChange: () => (/* binding */ useOnViewportChange),\n/* harmony export */   useReactFlow: () => (/* binding */ useReactFlow),\n/* harmony export */   useStore: () => (/* binding */ useStore),\n/* harmony export */   useStoreApi: () => (/* binding */ useStoreApi),\n/* harmony export */   useUpdateNodeInternals: () => (/* binding */ useUpdateNodeInternals),\n/* harmony export */   useViewport: () => (/* binding */ useViewport)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var classcat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! classcat */ \"(ssr)/./node_modules/classcat/index.js\");\n/* harmony import */ var zustand_traditional__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zustand/traditional */ \"(ssr)/./node_modules/zustand/esm/traditional.mjs\");\n/* harmony import */ var zustand_shallow__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! zustand/shallow */ \"(ssr)/./node_modules/zustand/esm/shallow.mjs\");\n/* harmony import */ var d3_zoom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-zoom */ \"(ssr)/./node_modules/d3-zoom/src/index.js\");\n/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! d3-selection */ \"(ssr)/./node_modules/d3-selection/src/select.js\");\n/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! d3-selection */ \"(ssr)/./node_modules/d3-selection/src/pointer.js\");\n/* harmony import */ var d3_drag__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! d3-drag */ \"(ssr)/./node_modules/d3-drag/src/drag.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n\n\n\n\n\n\n\n\nconst StoreContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nconst Provider$1 = StoreContext.Provider;\nconst errorMessages = {\n    error001: ()=>\"[React Flow]: Seems like you have not used zustand provider as an ancestor. Help: https://reactflow.dev/error#001\",\n    error002: ()=>\"It looks like you've created a new nodeTypes or edgeTypes object. If this wasn't on purpose please define the nodeTypes/edgeTypes outside of the component or memoize them.\",\n    error003: (nodeType)=>`Node type \"${nodeType}\" not found. Using fallback type \"default\".`,\n    error004: ()=>\"The React Flow parent container needs a width and a height to render the graph.\",\n    error005: ()=>\"Only child nodes can use a parent extent.\",\n    error006: ()=>\"Can't create edge. An edge needs a source and a target.\",\n    error007: (id)=>`The old edge with id=${id} does not exist.`,\n    error009: (type)=>`Marker type \"${type}\" doesn't exist.`,\n    error008: (sourceHandle, edge)=>`Couldn't create edge for ${!sourceHandle ? \"source\" : \"target\"} handle id: \"${!sourceHandle ? edge.sourceHandle : edge.targetHandle}\", edge id: ${edge.id}.`,\n    error010: ()=>\"Handle: No node id found. Make sure to only use a Handle inside a custom Node.\",\n    error011: (edgeType)=>`Edge type \"${edgeType}\" not found. Using fallback type \"default\".`,\n    error012: (id)=>`Node with id \"${id}\" does not exist, it may have been removed. This can happen when a node is deleted before the \"onNodeClick\" handler is called.`\n};\nconst zustandErrorMessage = errorMessages[\"error001\"]();\nfunction useStore(selector, equalityFn) {\n    const store = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(StoreContext);\n    if (store === null) {\n        throw new Error(zustandErrorMessage);\n    }\n    return (0,zustand_traditional__WEBPACK_IMPORTED_MODULE_4__.useStoreWithEqualityFn)(store, selector, equalityFn);\n}\nconst useStoreApi = ()=>{\n    const store = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(StoreContext);\n    if (store === null) {\n        throw new Error(zustandErrorMessage);\n    }\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            getState: store.getState,\n            setState: store.setState,\n            subscribe: store.subscribe,\n            destroy: store.destroy\n        }), [\n        store\n    ]);\n};\nconst selector$g = (s)=>s.userSelectionActive ? \"none\" : \"all\";\nfunction Panel({ position, children, className, style, ...rest }) {\n    const pointerEvents = useStore(selector$g);\n    const positionClasses = `${position}`.split(\"-\");\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: (0,classcat__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n            \"react-flow__panel\",\n            className,\n            ...positionClasses\n        ]),\n        style: {\n            ...style,\n            pointerEvents\n        },\n        ...rest\n    }, children);\n}\nfunction Attribution({ proOptions, position = \"bottom-right\" }) {\n    if (proOptions?.hideAttribution) {\n        return null;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Panel, {\n        position: position,\n        className: \"react-flow__attribution\",\n        \"data-message\": \"Please only hide this attribution when you are subscribed to React Flow Pro: https://reactflow.dev/pro\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        href: \"https://reactflow.dev\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        \"aria-label\": \"React Flow attribution\"\n    }, \"React Flow\"));\n}\nconst EdgeText = ({ x, y, label, labelStyle = {}, labelShowBg = true, labelBgStyle = {}, labelBgPadding = [\n    2,\n    4\n], labelBgBorderRadius = 2, children, className, ...rest })=>{\n    const edgeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const [edgeTextBbox, setEdgeTextBbox] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n    });\n    const edgeTextClasses = (0,classcat__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        \"react-flow__edge-textwrapper\",\n        className\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (edgeRef.current) {\n            const textBbox = edgeRef.current.getBBox();\n            setEdgeTextBbox({\n                x: textBbox.x,\n                y: textBbox.y,\n                width: textBbox.width,\n                height: textBbox.height\n            });\n        }\n    }, [\n        label\n    ]);\n    if (typeof label === \"undefined\" || !label) {\n        return null;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", {\n        transform: `translate(${x - edgeTextBbox.width / 2} ${y - edgeTextBbox.height / 2})`,\n        className: edgeTextClasses,\n        visibility: edgeTextBbox.width ? \"visible\" : \"hidden\",\n        ...rest\n    }, labelShowBg && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"rect\", {\n        width: edgeTextBbox.width + 2 * labelBgPadding[0],\n        x: -labelBgPadding[0],\n        y: -labelBgPadding[1],\n        height: edgeTextBbox.height + 2 * labelBgPadding[1],\n        className: \"react-flow__edge-textbg\",\n        style: labelBgStyle,\n        rx: labelBgBorderRadius,\n        ry: labelBgBorderRadius\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"text\", {\n        className: \"react-flow__edge-text\",\n        y: edgeTextBbox.height / 2,\n        dy: \"0.3em\",\n        ref: edgeRef,\n        style: labelStyle\n    }, label), children);\n};\nvar EdgeText$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(EdgeText);\nconst getDimensions = (node)=>({\n        width: node.offsetWidth,\n        height: node.offsetHeight\n    });\nconst clamp = (val, min = 0, max = 1)=>Math.min(Math.max(val, min), max);\nconst clampPosition = (position = {\n    x: 0,\n    y: 0\n}, extent)=>({\n        x: clamp(position.x, extent[0][0], extent[1][0]),\n        y: clamp(position.y, extent[0][1], extent[1][1])\n    });\n// returns a number between 0 and 1 that represents the velocity of the movement\n// when the mouse is close to the edge of the canvas\nconst calcAutoPanVelocity = (value, min, max)=>{\n    if (value < min) {\n        return clamp(Math.abs(value - min), 1, 50) / 50;\n    } else if (value > max) {\n        return -clamp(Math.abs(value - max), 1, 50) / 50;\n    }\n    return 0;\n};\nconst calcAutoPan = (pos, bounds)=>{\n    const xMovement = calcAutoPanVelocity(pos.x, 35, bounds.width - 35) * 20;\n    const yMovement = calcAutoPanVelocity(pos.y, 35, bounds.height - 35) * 20;\n    return [\n        xMovement,\n        yMovement\n    ];\n};\nconst getHostForElement = (element)=>element.getRootNode?.() || window?.document;\nconst getBoundsOfBoxes = (box1, box2)=>({\n        x: Math.min(box1.x, box2.x),\n        y: Math.min(box1.y, box2.y),\n        x2: Math.max(box1.x2, box2.x2),\n        y2: Math.max(box1.y2, box2.y2)\n    });\nconst rectToBox = ({ x, y, width, height })=>({\n        x,\n        y,\n        x2: x + width,\n        y2: y + height\n    });\nconst boxToRect = ({ x, y, x2, y2 })=>({\n        x,\n        y,\n        width: x2 - x,\n        height: y2 - y\n    });\nconst nodeToRect = (node)=>({\n        ...node.positionAbsolute || {\n            x: 0,\n            y: 0\n        },\n        width: node.width || 0,\n        height: node.height || 0\n    });\nconst getBoundsOfRects = (rect1, rect2)=>boxToRect(getBoundsOfBoxes(rectToBox(rect1), rectToBox(rect2)));\nconst getOverlappingArea = (rectA, rectB)=>{\n    const xOverlap = Math.max(0, Math.min(rectA.x + rectA.width, rectB.x + rectB.width) - Math.max(rectA.x, rectB.x));\n    const yOverlap = Math.max(0, Math.min(rectA.y + rectA.height, rectB.y + rectB.height) - Math.max(rectA.y, rectB.y));\n    return Math.ceil(xOverlap * yOverlap);\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isRectObject = (obj)=>isNumeric(obj.width) && isNumeric(obj.height) && isNumeric(obj.x) && isNumeric(obj.y);\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */ const isNumeric = (n)=>!isNaN(n) && isFinite(n);\nconst internalsSymbol = Symbol.for(\"internals\");\n// used for a11y key board controls for nodes and edges\nconst elementSelectionKeys = [\n    \"Enter\",\n    \" \",\n    \"Escape\"\n];\nconst devWarn = (id, message)=>{\n    if (true) {\n        console.warn(`[React Flow]: ${message} Help: https://reactflow.dev/error#${id}`);\n    }\n};\nconst isReactKeyboardEvent = (event)=>\"nativeEvent\" in event;\nfunction isInputDOMNode(event) {\n    const kbEvent = isReactKeyboardEvent(event) ? event.nativeEvent : event;\n    // using composed path for handling shadow dom\n    const target = kbEvent.composedPath?.()?.[0] || event.target;\n    const isInput = [\n        \"INPUT\",\n        \"SELECT\",\n        \"TEXTAREA\"\n    ].includes(target?.nodeName) || target?.hasAttribute(\"contenteditable\");\n    // when an input field is focused we don't want to trigger deletion or movement of nodes\n    return isInput || !!target?.closest(\".nokey\");\n}\nconst isMouseEvent = (event)=>\"clientX\" in event;\nconst getEventPosition = (event, bounds)=>{\n    const isMouseTriggered = isMouseEvent(event);\n    const evtX = isMouseTriggered ? event.clientX : event.touches?.[0].clientX;\n    const evtY = isMouseTriggered ? event.clientY : event.touches?.[0].clientY;\n    return {\n        x: evtX - (bounds?.left ?? 0),\n        y: evtY - (bounds?.top ?? 0)\n    };\n};\nconst isMacOs = ()=>typeof navigator !== \"undefined\" && navigator?.userAgent?.indexOf(\"Mac\") >= 0;\nconst BaseEdge = ({ id, path, labelX, labelY, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style, markerEnd, markerStart, interactionWidth = 20 })=>{\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        id: id,\n        style: style,\n        d: path,\n        fill: \"none\",\n        className: \"react-flow__edge-path\",\n        markerEnd: markerEnd,\n        markerStart: markerStart\n    }), interactionWidth && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: path,\n        fill: \"none\",\n        strokeOpacity: 0,\n        strokeWidth: interactionWidth,\n        className: \"react-flow__edge-interaction\"\n    }), label && isNumeric(labelX) && isNumeric(labelY) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(EdgeText$1, {\n        x: labelX,\n        y: labelY,\n        label: label,\n        labelStyle: labelStyle,\n        labelShowBg: labelShowBg,\n        labelBgStyle: labelBgStyle,\n        labelBgPadding: labelBgPadding,\n        labelBgBorderRadius: labelBgBorderRadius\n    }) : null);\n};\nBaseEdge.displayName = \"BaseEdge\";\nconst getMarkerEnd = (markerType, markerEndId)=>{\n    if (typeof markerEndId !== \"undefined\" && markerEndId) {\n        return `url(#${markerEndId})`;\n    }\n    return typeof markerType !== \"undefined\" ? `url(#react-flow__${markerType})` : \"none\";\n};\nfunction getMouseHandler$1(id, getState, handler) {\n    return handler === undefined ? handler : (event)=>{\n        const edge = getState().edges.find((e)=>e.id === id);\n        if (edge) {\n            handler(event, {\n                ...edge\n            });\n        }\n    };\n}\n// this is used for straight edges and simple smoothstep edges (LTR, RTL, BTT, TTB)\nfunction getEdgeCenter({ sourceX, sourceY, targetX, targetY }) {\n    const xOffset = Math.abs(targetX - sourceX) / 2;\n    const centerX = targetX < sourceX ? targetX + xOffset : targetX - xOffset;\n    const yOffset = Math.abs(targetY - sourceY) / 2;\n    const centerY = targetY < sourceY ? targetY + yOffset : targetY - yOffset;\n    return [\n        centerX,\n        centerY,\n        xOffset,\n        yOffset\n    ];\n}\nfunction getBezierEdgeCenter({ sourceX, sourceY, targetX, targetY, sourceControlX, sourceControlY, targetControlX, targetControlY }) {\n    // cubic bezier t=0.5 mid point, not the actual mid point, but easy to calculate\n    // https://stackoverflow.com/questions/67516101/how-to-find-distance-mid-point-of-bezier-curve\n    const centerX = sourceX * 0.125 + sourceControlX * 0.375 + targetControlX * 0.375 + targetX * 0.125;\n    const centerY = sourceY * 0.125 + sourceControlY * 0.375 + targetControlY * 0.375 + targetY * 0.125;\n    const offsetX = Math.abs(centerX - sourceX);\n    const offsetY = Math.abs(centerY - sourceY);\n    return [\n        centerX,\n        centerY,\n        offsetX,\n        offsetY\n    ];\n}\nvar ConnectionMode;\n(function(ConnectionMode) {\n    ConnectionMode[\"Strict\"] = \"strict\";\n    ConnectionMode[\"Loose\"] = \"loose\";\n})(ConnectionMode || (ConnectionMode = {}));\nvar PanOnScrollMode;\n(function(PanOnScrollMode) {\n    PanOnScrollMode[\"Free\"] = \"free\";\n    PanOnScrollMode[\"Vertical\"] = \"vertical\";\n    PanOnScrollMode[\"Horizontal\"] = \"horizontal\";\n})(PanOnScrollMode || (PanOnScrollMode = {}));\nvar SelectionMode;\n(function(SelectionMode) {\n    SelectionMode[\"Partial\"] = \"partial\";\n    SelectionMode[\"Full\"] = \"full\";\n})(SelectionMode || (SelectionMode = {}));\nvar ConnectionLineType;\n(function(ConnectionLineType) {\n    ConnectionLineType[\"Bezier\"] = \"default\";\n    ConnectionLineType[\"Straight\"] = \"straight\";\n    ConnectionLineType[\"Step\"] = \"step\";\n    ConnectionLineType[\"SmoothStep\"] = \"smoothstep\";\n    ConnectionLineType[\"SimpleBezier\"] = \"simplebezier\";\n})(ConnectionLineType || (ConnectionLineType = {}));\nvar MarkerType;\n(function(MarkerType) {\n    MarkerType[\"Arrow\"] = \"arrow\";\n    MarkerType[\"ArrowClosed\"] = \"arrowclosed\";\n})(MarkerType || (MarkerType = {}));\nvar Position;\n(function(Position) {\n    Position[\"Left\"] = \"left\";\n    Position[\"Top\"] = \"top\";\n    Position[\"Right\"] = \"right\";\n    Position[\"Bottom\"] = \"bottom\";\n})(Position || (Position = {}));\nfunction getControl({ pos, x1, y1, x2, y2 }) {\n    if (pos === Position.Left || pos === Position.Right) {\n        return [\n            0.5 * (x1 + x2),\n            y1\n        ];\n    }\n    return [\n        x1,\n        0.5 * (y1 + y2)\n    ];\n}\nfunction getSimpleBezierPath({ sourceX, sourceY, sourcePosition = Position.Bottom, targetX, targetY, targetPosition = Position.Top }) {\n    const [sourceControlX, sourceControlY] = getControl({\n        pos: sourcePosition,\n        x1: sourceX,\n        y1: sourceY,\n        x2: targetX,\n        y2: targetY\n    });\n    const [targetControlX, targetControlY] = getControl({\n        pos: targetPosition,\n        x1: targetX,\n        y1: targetY,\n        x2: sourceX,\n        y2: sourceY\n    });\n    const [labelX, labelY, offsetX, offsetY] = getBezierEdgeCenter({\n        sourceX,\n        sourceY,\n        targetX,\n        targetY,\n        sourceControlX,\n        sourceControlY,\n        targetControlX,\n        targetControlY\n    });\n    return [\n        `M${sourceX},${sourceY} C${sourceControlX},${sourceControlY} ${targetControlX},${targetControlY} ${targetX},${targetY}`,\n        labelX,\n        labelY,\n        offsetX,\n        offsetY\n    ];\n}\nconst SimpleBezierEdge = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(({ sourceX, sourceY, targetX, targetY, sourcePosition = Position.Bottom, targetPosition = Position.Top, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style, markerEnd, markerStart, interactionWidth })=>{\n    const [path, labelX, labelY] = getSimpleBezierPath({\n        sourceX,\n        sourceY,\n        sourcePosition,\n        targetX,\n        targetY,\n        targetPosition\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(BaseEdge, {\n        path: path,\n        labelX: labelX,\n        labelY: labelY,\n        label: label,\n        labelStyle: labelStyle,\n        labelShowBg: labelShowBg,\n        labelBgStyle: labelBgStyle,\n        labelBgPadding: labelBgPadding,\n        labelBgBorderRadius: labelBgBorderRadius,\n        style: style,\n        markerEnd: markerEnd,\n        markerStart: markerStart,\n        interactionWidth: interactionWidth\n    });\n});\nSimpleBezierEdge.displayName = \"SimpleBezierEdge\";\nconst handleDirections = {\n    [Position.Left]: {\n        x: -1,\n        y: 0\n    },\n    [Position.Right]: {\n        x: 1,\n        y: 0\n    },\n    [Position.Top]: {\n        x: 0,\n        y: -1\n    },\n    [Position.Bottom]: {\n        x: 0,\n        y: 1\n    }\n};\nconst getDirection = ({ source, sourcePosition = Position.Bottom, target })=>{\n    if (sourcePosition === Position.Left || sourcePosition === Position.Right) {\n        return source.x < target.x ? {\n            x: 1,\n            y: 0\n        } : {\n            x: -1,\n            y: 0\n        };\n    }\n    return source.y < target.y ? {\n        x: 0,\n        y: 1\n    } : {\n        x: 0,\n        y: -1\n    };\n};\nconst distance = (a, b)=>Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\n// ith this function we try to mimic a orthogonal edge routing behaviour\n// It's not as good as a real orthogonal edge routing but it's faster and good enough as a default for step and smooth step edges\nfunction getPoints({ source, sourcePosition = Position.Bottom, target, targetPosition = Position.Top, center, offset }) {\n    const sourceDir = handleDirections[sourcePosition];\n    const targetDir = handleDirections[targetPosition];\n    const sourceGapped = {\n        x: source.x + sourceDir.x * offset,\n        y: source.y + sourceDir.y * offset\n    };\n    const targetGapped = {\n        x: target.x + targetDir.x * offset,\n        y: target.y + targetDir.y * offset\n    };\n    const dir = getDirection({\n        source: sourceGapped,\n        sourcePosition,\n        target: targetGapped\n    });\n    const dirAccessor = dir.x !== 0 ? \"x\" : \"y\";\n    const currDir = dir[dirAccessor];\n    let points = [];\n    let centerX, centerY;\n    const sourceGapOffset = {\n        x: 0,\n        y: 0\n    };\n    const targetGapOffset = {\n        x: 0,\n        y: 0\n    };\n    const [defaultCenterX, defaultCenterY, defaultOffsetX, defaultOffsetY] = getEdgeCenter({\n        sourceX: source.x,\n        sourceY: source.y,\n        targetX: target.x,\n        targetY: target.y\n    });\n    // opposite handle positions, default case\n    if (sourceDir[dirAccessor] * targetDir[dirAccessor] === -1) {\n        centerX = center.x || defaultCenterX;\n        centerY = center.y || defaultCenterY;\n        //    --->\n        //    |\n        // >---\n        const verticalSplit = [\n            {\n                x: centerX,\n                y: sourceGapped.y\n            },\n            {\n                x: centerX,\n                y: targetGapped.y\n            }\n        ];\n        //    |\n        //  ---\n        //  |\n        const horizontalSplit = [\n            {\n                x: sourceGapped.x,\n                y: centerY\n            },\n            {\n                x: targetGapped.x,\n                y: centerY\n            }\n        ];\n        if (sourceDir[dirAccessor] === currDir) {\n            points = dirAccessor === \"x\" ? verticalSplit : horizontalSplit;\n        } else {\n            points = dirAccessor === \"x\" ? horizontalSplit : verticalSplit;\n        }\n    } else {\n        // sourceTarget means we take x from source and y from target, targetSource is the opposite\n        const sourceTarget = [\n            {\n                x: sourceGapped.x,\n                y: targetGapped.y\n            }\n        ];\n        const targetSource = [\n            {\n                x: targetGapped.x,\n                y: sourceGapped.y\n            }\n        ];\n        // this handles edges with same handle positions\n        if (dirAccessor === \"x\") {\n            points = sourceDir.x === currDir ? targetSource : sourceTarget;\n        } else {\n            points = sourceDir.y === currDir ? sourceTarget : targetSource;\n        }\n        if (sourcePosition === targetPosition) {\n            const diff = Math.abs(source[dirAccessor] - target[dirAccessor]);\n            // if an edge goes from right to right for example (sourcePosition === targetPosition) and the distance between source.x and target.x is less than the offset, the added point and the gapped source/target will overlap. This leads to a weird edge path. To avoid this we add a gapOffset to the source/target\n            if (diff <= offset) {\n                const gapOffset = Math.min(offset - 1, offset - diff);\n                if (sourceDir[dirAccessor] === currDir) {\n                    sourceGapOffset[dirAccessor] = (sourceGapped[dirAccessor] > source[dirAccessor] ? -1 : 1) * gapOffset;\n                } else {\n                    targetGapOffset[dirAccessor] = (targetGapped[dirAccessor] > target[dirAccessor] ? -1 : 1) * gapOffset;\n                }\n            }\n        }\n        // these are conditions for handling mixed handle positions like Right -> Bottom for example\n        if (sourcePosition !== targetPosition) {\n            const dirAccessorOpposite = dirAccessor === \"x\" ? \"y\" : \"x\";\n            const isSameDir = sourceDir[dirAccessor] === targetDir[dirAccessorOpposite];\n            const sourceGtTargetOppo = sourceGapped[dirAccessorOpposite] > targetGapped[dirAccessorOpposite];\n            const sourceLtTargetOppo = sourceGapped[dirAccessorOpposite] < targetGapped[dirAccessorOpposite];\n            const flipSourceTarget = sourceDir[dirAccessor] === 1 && (!isSameDir && sourceGtTargetOppo || isSameDir && sourceLtTargetOppo) || sourceDir[dirAccessor] !== 1 && (!isSameDir && sourceLtTargetOppo || isSameDir && sourceGtTargetOppo);\n            if (flipSourceTarget) {\n                points = dirAccessor === \"x\" ? sourceTarget : targetSource;\n            }\n        }\n        const sourceGapPoint = {\n            x: sourceGapped.x + sourceGapOffset.x,\n            y: sourceGapped.y + sourceGapOffset.y\n        };\n        const targetGapPoint = {\n            x: targetGapped.x + targetGapOffset.x,\n            y: targetGapped.y + targetGapOffset.y\n        };\n        const maxXDistance = Math.max(Math.abs(sourceGapPoint.x - points[0].x), Math.abs(targetGapPoint.x - points[0].x));\n        const maxYDistance = Math.max(Math.abs(sourceGapPoint.y - points[0].y), Math.abs(targetGapPoint.y - points[0].y));\n        // we want to place the label on the longest segment of the edge\n        if (maxXDistance >= maxYDistance) {\n            centerX = (sourceGapPoint.x + targetGapPoint.x) / 2;\n            centerY = points[0].y;\n        } else {\n            centerX = points[0].x;\n            centerY = (sourceGapPoint.y + targetGapPoint.y) / 2;\n        }\n    }\n    const pathPoints = [\n        source,\n        {\n            x: sourceGapped.x + sourceGapOffset.x,\n            y: sourceGapped.y + sourceGapOffset.y\n        },\n        ...points,\n        {\n            x: targetGapped.x + targetGapOffset.x,\n            y: targetGapped.y + targetGapOffset.y\n        },\n        target\n    ];\n    return [\n        pathPoints,\n        centerX,\n        centerY,\n        defaultOffsetX,\n        defaultOffsetY\n    ];\n}\nfunction getBend(a, b, c, size) {\n    const bendSize = Math.min(distance(a, b) / 2, distance(b, c) / 2, size);\n    const { x, y } = b;\n    // no bend\n    if (a.x === x && x === c.x || a.y === y && y === c.y) {\n        return `L${x} ${y}`;\n    }\n    // first segment is horizontal\n    if (a.y === y) {\n        const xDir = a.x < c.x ? -1 : 1;\n        const yDir = a.y < c.y ? 1 : -1;\n        return `L ${x + bendSize * xDir},${y}Q ${x},${y} ${x},${y + bendSize * yDir}`;\n    }\n    const xDir = a.x < c.x ? 1 : -1;\n    const yDir = a.y < c.y ? -1 : 1;\n    return `L ${x},${y + bendSize * yDir}Q ${x},${y} ${x + bendSize * xDir},${y}`;\n}\nfunction getSmoothStepPath({ sourceX, sourceY, sourcePosition = Position.Bottom, targetX, targetY, targetPosition = Position.Top, borderRadius = 5, centerX, centerY, offset = 20 }) {\n    const [points, labelX, labelY, offsetX, offsetY] = getPoints({\n        source: {\n            x: sourceX,\n            y: sourceY\n        },\n        sourcePosition,\n        target: {\n            x: targetX,\n            y: targetY\n        },\n        targetPosition,\n        center: {\n            x: centerX,\n            y: centerY\n        },\n        offset\n    });\n    const path = points.reduce((res, p, i)=>{\n        let segment = \"\";\n        if (i > 0 && i < points.length - 1) {\n            segment = getBend(points[i - 1], p, points[i + 1], borderRadius);\n        } else {\n            segment = `${i === 0 ? \"M\" : \"L\"}${p.x} ${p.y}`;\n        }\n        res += segment;\n        return res;\n    }, \"\");\n    return [\n        path,\n        labelX,\n        labelY,\n        offsetX,\n        offsetY\n    ];\n}\nconst SmoothStepEdge = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(({ sourceX, sourceY, targetX, targetY, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style, sourcePosition = Position.Bottom, targetPosition = Position.Top, markerEnd, markerStart, pathOptions, interactionWidth })=>{\n    const [path, labelX, labelY] = getSmoothStepPath({\n        sourceX,\n        sourceY,\n        sourcePosition,\n        targetX,\n        targetY,\n        targetPosition,\n        borderRadius: pathOptions?.borderRadius,\n        offset: pathOptions?.offset\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(BaseEdge, {\n        path: path,\n        labelX: labelX,\n        labelY: labelY,\n        label: label,\n        labelStyle: labelStyle,\n        labelShowBg: labelShowBg,\n        labelBgStyle: labelBgStyle,\n        labelBgPadding: labelBgPadding,\n        labelBgBorderRadius: labelBgBorderRadius,\n        style: style,\n        markerEnd: markerEnd,\n        markerStart: markerStart,\n        interactionWidth: interactionWidth\n    });\n});\nSmoothStepEdge.displayName = \"SmoothStepEdge\";\nconst StepEdge = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)((props)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SmoothStepEdge, {\n        ...props,\n        pathOptions: (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n                borderRadius: 0,\n                offset: props.pathOptions?.offset\n            }), [\n            props.pathOptions?.offset\n        ])\n    }));\nStepEdge.displayName = \"StepEdge\";\nfunction getStraightPath({ sourceX, sourceY, targetX, targetY }) {\n    const [labelX, labelY, offsetX, offsetY] = getEdgeCenter({\n        sourceX,\n        sourceY,\n        targetX,\n        targetY\n    });\n    return [\n        `M ${sourceX},${sourceY}L ${targetX},${targetY}`,\n        labelX,\n        labelY,\n        offsetX,\n        offsetY\n    ];\n}\nconst StraightEdge = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(({ sourceX, sourceY, targetX, targetY, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style, markerEnd, markerStart, interactionWidth })=>{\n    const [path, labelX, labelY] = getStraightPath({\n        sourceX,\n        sourceY,\n        targetX,\n        targetY\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(BaseEdge, {\n        path: path,\n        labelX: labelX,\n        labelY: labelY,\n        label: label,\n        labelStyle: labelStyle,\n        labelShowBg: labelShowBg,\n        labelBgStyle: labelBgStyle,\n        labelBgPadding: labelBgPadding,\n        labelBgBorderRadius: labelBgBorderRadius,\n        style: style,\n        markerEnd: markerEnd,\n        markerStart: markerStart,\n        interactionWidth: interactionWidth\n    });\n});\nStraightEdge.displayName = \"StraightEdge\";\nfunction calculateControlOffset(distance, curvature) {\n    if (distance >= 0) {\n        return 0.5 * distance;\n    }\n    return curvature * 25 * Math.sqrt(-distance);\n}\nfunction getControlWithCurvature({ pos, x1, y1, x2, y2, c }) {\n    switch(pos){\n        case Position.Left:\n            return [\n                x1 - calculateControlOffset(x1 - x2, c),\n                y1\n            ];\n        case Position.Right:\n            return [\n                x1 + calculateControlOffset(x2 - x1, c),\n                y1\n            ];\n        case Position.Top:\n            return [\n                x1,\n                y1 - calculateControlOffset(y1 - y2, c)\n            ];\n        case Position.Bottom:\n            return [\n                x1,\n                y1 + calculateControlOffset(y2 - y1, c)\n            ];\n    }\n}\nfunction getBezierPath({ sourceX, sourceY, sourcePosition = Position.Bottom, targetX, targetY, targetPosition = Position.Top, curvature = 0.25 }) {\n    const [sourceControlX, sourceControlY] = getControlWithCurvature({\n        pos: sourcePosition,\n        x1: sourceX,\n        y1: sourceY,\n        x2: targetX,\n        y2: targetY,\n        c: curvature\n    });\n    const [targetControlX, targetControlY] = getControlWithCurvature({\n        pos: targetPosition,\n        x1: targetX,\n        y1: targetY,\n        x2: sourceX,\n        y2: sourceY,\n        c: curvature\n    });\n    const [labelX, labelY, offsetX, offsetY] = getBezierEdgeCenter({\n        sourceX,\n        sourceY,\n        targetX,\n        targetY,\n        sourceControlX,\n        sourceControlY,\n        targetControlX,\n        targetControlY\n    });\n    return [\n        `M${sourceX},${sourceY} C${sourceControlX},${sourceControlY} ${targetControlX},${targetControlY} ${targetX},${targetY}`,\n        labelX,\n        labelY,\n        offsetX,\n        offsetY\n    ];\n}\nconst BezierEdge = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(({ sourceX, sourceY, targetX, targetY, sourcePosition = Position.Bottom, targetPosition = Position.Top, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style, markerEnd, markerStart, pathOptions, interactionWidth })=>{\n    const [path, labelX, labelY] = getBezierPath({\n        sourceX,\n        sourceY,\n        sourcePosition,\n        targetX,\n        targetY,\n        targetPosition,\n        curvature: pathOptions?.curvature\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(BaseEdge, {\n        path: path,\n        labelX: labelX,\n        labelY: labelY,\n        label: label,\n        labelStyle: labelStyle,\n        labelShowBg: labelShowBg,\n        labelBgStyle: labelBgStyle,\n        labelBgPadding: labelBgPadding,\n        labelBgBorderRadius: labelBgBorderRadius,\n        style: style,\n        markerEnd: markerEnd,\n        markerStart: markerStart,\n        interactionWidth: interactionWidth\n    });\n});\nBezierEdge.displayName = \"BezierEdge\";\nconst NodeIdContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nconst Provider = NodeIdContext.Provider;\nNodeIdContext.Consumer;\nconst useNodeId = ()=>{\n    const nodeId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(NodeIdContext);\n    return nodeId;\n};\nconst isEdge = (element)=>\"id\" in element && \"source\" in element && \"target\" in element;\nconst isNode = (element)=>\"id\" in element && !(\"source\" in element) && !(\"target\" in element);\nconst getOutgoers = (node, nodes, edges)=>{\n    if (!isNode(node)) {\n        return [];\n    }\n    const outgoerIds = edges.filter((e)=>e.source === node.id).map((e)=>e.target);\n    return nodes.filter((n)=>outgoerIds.includes(n.id));\n};\nconst getIncomers = (node, nodes, edges)=>{\n    if (!isNode(node)) {\n        return [];\n    }\n    const incomersIds = edges.filter((e)=>e.target === node.id).map((e)=>e.source);\n    return nodes.filter((n)=>incomersIds.includes(n.id));\n};\nconst getEdgeId = ({ source, sourceHandle, target, targetHandle })=>`reactflow__edge-${source}${sourceHandle || \"\"}-${target}${targetHandle || \"\"}`;\nconst getMarkerId = (marker, rfId)=>{\n    if (typeof marker === \"undefined\") {\n        return \"\";\n    }\n    if (typeof marker === \"string\") {\n        return marker;\n    }\n    const idPrefix = rfId ? `${rfId}__` : \"\";\n    return `${idPrefix}${Object.keys(marker).sort().map((key)=>`${key}=${marker[key]}`).join(\"&\")}`;\n};\nconst connectionExists = (edge, edges)=>{\n    return edges.some((el)=>el.source === edge.source && el.target === edge.target && (el.sourceHandle === edge.sourceHandle || !el.sourceHandle && !edge.sourceHandle) && (el.targetHandle === edge.targetHandle || !el.targetHandle && !edge.targetHandle));\n};\nconst addEdge = (edgeParams, edges)=>{\n    if (!edgeParams.source || !edgeParams.target) {\n        devWarn(\"006\", errorMessages[\"error006\"]());\n        return edges;\n    }\n    let edge;\n    if (isEdge(edgeParams)) {\n        edge = {\n            ...edgeParams\n        };\n    } else {\n        edge = {\n            ...edgeParams,\n            id: getEdgeId(edgeParams)\n        };\n    }\n    if (connectionExists(edge, edges)) {\n        return edges;\n    }\n    return edges.concat(edge);\n};\nconst updateEdge = (oldEdge, newConnection, edges, options = {\n    shouldReplaceId: true\n})=>{\n    const { id: oldEdgeId, ...rest } = oldEdge;\n    if (!newConnection.source || !newConnection.target) {\n        devWarn(\"006\", errorMessages[\"error006\"]());\n        return edges;\n    }\n    const foundEdge = edges.find((e)=>e.id === oldEdgeId);\n    if (!foundEdge) {\n        devWarn(\"007\", errorMessages[\"error007\"](oldEdgeId));\n        return edges;\n    }\n    // Remove old edge and create the new edge with parameters of old edge.\n    const edge = {\n        ...rest,\n        id: options.shouldReplaceId ? getEdgeId(newConnection) : oldEdgeId,\n        source: newConnection.source,\n        target: newConnection.target,\n        sourceHandle: newConnection.sourceHandle,\n        targetHandle: newConnection.targetHandle\n    };\n    return edges.filter((e)=>e.id !== oldEdgeId).concat(edge);\n};\nconst pointToRendererPoint = ({ x, y }, [tx, ty, tScale], snapToGrid, [snapX, snapY])=>{\n    const position = {\n        x: (x - tx) / tScale,\n        y: (y - ty) / tScale\n    };\n    if (snapToGrid) {\n        return {\n            x: snapX * Math.round(position.x / snapX),\n            y: snapY * Math.round(position.y / snapY)\n        };\n    }\n    return position;\n};\nconst rendererPointToPoint = ({ x, y }, [tx, ty, tScale])=>{\n    return {\n        x: x * tScale + tx,\n        y: y * tScale + ty\n    };\n};\nconst getNodePositionWithOrigin = (node, nodeOrigin = [\n    0,\n    0\n])=>{\n    if (!node) {\n        return {\n            x: 0,\n            y: 0,\n            positionAbsolute: {\n                x: 0,\n                y: 0\n            }\n        };\n    }\n    const offsetX = (node.width ?? 0) * nodeOrigin[0];\n    const offsetY = (node.height ?? 0) * nodeOrigin[1];\n    const position = {\n        x: node.position.x - offsetX,\n        y: node.position.y - offsetY\n    };\n    return {\n        ...position,\n        positionAbsolute: node.positionAbsolute ? {\n            x: node.positionAbsolute.x - offsetX,\n            y: node.positionAbsolute.y - offsetY\n        } : position\n    };\n};\nconst getNodesBounds = (nodes, nodeOrigin = [\n    0,\n    0\n])=>{\n    if (nodes.length === 0) {\n        return {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        };\n    }\n    const box = nodes.reduce((currBox, node)=>{\n        const { x, y } = getNodePositionWithOrigin(node, nodeOrigin).positionAbsolute;\n        return getBoundsOfBoxes(currBox, rectToBox({\n            x,\n            y,\n            width: node.width || 0,\n            height: node.height || 0\n        }));\n    }, {\n        x: Infinity,\n        y: Infinity,\n        x2: -Infinity,\n        y2: -Infinity\n    });\n    return boxToRect(box);\n};\n// @deprecated Use `getNodesBounds`.\nconst getRectOfNodes = (nodes, nodeOrigin = [\n    0,\n    0\n])=>{\n    console.warn(\"[DEPRECATED] `getRectOfNodes` is deprecated. Instead use `getNodesBounds` https://reactflow.dev/api-reference/utils/get-nodes-bounds.\");\n    return getNodesBounds(nodes, nodeOrigin);\n};\nconst getNodesInside = (nodeInternals, rect, [tx, ty, tScale] = [\n    0,\n    0,\n    1\n], partially = false, // set excludeNonSelectableNodes if you want to pay attention to the nodes \"selectable\" attribute\nexcludeNonSelectableNodes = false, nodeOrigin = [\n    0,\n    0\n])=>{\n    const paneRect = {\n        x: (rect.x - tx) / tScale,\n        y: (rect.y - ty) / tScale,\n        width: rect.width / tScale,\n        height: rect.height / tScale\n    };\n    const visibleNodes = [];\n    nodeInternals.forEach((node)=>{\n        const { width, height, selectable = true, hidden = false } = node;\n        if (excludeNonSelectableNodes && !selectable || hidden) {\n            return false;\n        }\n        const { positionAbsolute } = getNodePositionWithOrigin(node, nodeOrigin);\n        const nodeRect = {\n            x: positionAbsolute.x,\n            y: positionAbsolute.y,\n            width: width || 0,\n            height: height || 0\n        };\n        const overlappingArea = getOverlappingArea(paneRect, nodeRect);\n        const notInitialized = typeof width === \"undefined\" || typeof height === \"undefined\" || width === null || height === null;\n        const partiallyVisible = partially && overlappingArea > 0;\n        const area = (width || 0) * (height || 0);\n        const isVisible = notInitialized || partiallyVisible || overlappingArea >= area;\n        if (isVisible || node.dragging) {\n            visibleNodes.push(node);\n        }\n    });\n    return visibleNodes;\n};\nconst getConnectedEdges = (nodes, edges)=>{\n    const nodeIds = nodes.map((node)=>node.id);\n    return edges.filter((edge)=>nodeIds.includes(edge.source) || nodeIds.includes(edge.target));\n};\n// @deprecated Use `getViewportForBounds`.\nconst getTransformForBounds = (bounds, width, height, minZoom, maxZoom, padding = 0.1)=>{\n    const { x, y, zoom } = getViewportForBounds(bounds, width, height, minZoom, maxZoom, padding);\n    console.warn(\"[DEPRECATED] `getTransformForBounds` is deprecated. Instead use `getViewportForBounds`. Beware that the return value is type Viewport (`{ x: number, y: number, zoom: number }`) instead of Transform (`[number, number, number]`). https://reactflow.dev/api-reference/utils/get-viewport-for-bounds\");\n    return [\n        x,\n        y,\n        zoom\n    ];\n};\nconst getViewportForBounds = (bounds, width, height, minZoom, maxZoom, padding = 0.1)=>{\n    const xZoom = width / (bounds.width * (1 + padding));\n    const yZoom = height / (bounds.height * (1 + padding));\n    const zoom = Math.min(xZoom, yZoom);\n    const clampedZoom = clamp(zoom, minZoom, maxZoom);\n    const boundsCenterX = bounds.x + bounds.width / 2;\n    const boundsCenterY = bounds.y + bounds.height / 2;\n    const x = width / 2 - boundsCenterX * clampedZoom;\n    const y = height / 2 - boundsCenterY * clampedZoom;\n    return {\n        x,\n        y,\n        zoom: clampedZoom\n    };\n};\nconst getD3Transition = (selection, duration = 0)=>{\n    return selection.transition().duration(duration);\n};\n// this functions collects all handles and adds an absolute position\n// so that we can later find the closest handle to the mouse position\nfunction getHandles(node, handleBounds, type, currentHandle) {\n    return (handleBounds[type] || []).reduce((res, h)=>{\n        if (`${node.id}-${h.id}-${type}` !== currentHandle) {\n            res.push({\n                id: h.id || null,\n                type,\n                nodeId: node.id,\n                x: (node.positionAbsolute?.x ?? 0) + h.x + h.width / 2,\n                y: (node.positionAbsolute?.y ?? 0) + h.y + h.height / 2\n            });\n        }\n        return res;\n    }, []);\n}\nfunction getClosestHandle(event, doc, pos, connectionRadius, handles, validator) {\n    // we always want to prioritize the handle below the mouse cursor over the closest distance handle,\n    // because it could be that the center of another handle is closer to the mouse pointer than the handle below the cursor\n    const { x, y } = getEventPosition(event);\n    const domNodes = doc.elementsFromPoint(x, y);\n    const handleBelow = domNodes.find((el)=>el.classList.contains(\"react-flow__handle\"));\n    if (handleBelow) {\n        const handleNodeId = handleBelow.getAttribute(\"data-nodeid\");\n        if (handleNodeId) {\n            const handleType = getHandleType(undefined, handleBelow);\n            const handleId = handleBelow.getAttribute(\"data-handleid\");\n            const validHandleResult = validator({\n                nodeId: handleNodeId,\n                id: handleId,\n                type: handleType\n            });\n            if (validHandleResult) {\n                const handle = handles.find((h)=>h.nodeId === handleNodeId && h.type === handleType && h.id === handleId);\n                return {\n                    handle: {\n                        id: handleId,\n                        type: handleType,\n                        nodeId: handleNodeId,\n                        x: handle?.x || pos.x,\n                        y: handle?.y || pos.y\n                    },\n                    validHandleResult\n                };\n            }\n        }\n    }\n    // if we couldn't find a handle below the mouse cursor we look for the closest distance based on the connectionRadius\n    let closestHandles = [];\n    let minDistance = Infinity;\n    handles.forEach((handle)=>{\n        const distance = Math.sqrt((handle.x - pos.x) ** 2 + (handle.y - pos.y) ** 2);\n        if (distance <= connectionRadius) {\n            const validHandleResult = validator(handle);\n            if (distance <= minDistance) {\n                if (distance < minDistance) {\n                    closestHandles = [\n                        {\n                            handle,\n                            validHandleResult\n                        }\n                    ];\n                } else if (distance === minDistance) {\n                    // when multiple handles are on the same distance we collect all of them\n                    closestHandles.push({\n                        handle,\n                        validHandleResult\n                    });\n                }\n                minDistance = distance;\n            }\n        }\n    });\n    if (!closestHandles.length) {\n        return {\n            handle: null,\n            validHandleResult: defaultResult()\n        };\n    }\n    if (closestHandles.length === 1) {\n        return closestHandles[0];\n    }\n    const hasValidHandle = closestHandles.some(({ validHandleResult })=>validHandleResult.isValid);\n    const hasTargetHandle = closestHandles.some(({ handle })=>handle.type === \"target\");\n    // if multiple handles are layouted on top of each other we prefer the one with type = target and the one that is valid\n    return closestHandles.find(({ handle, validHandleResult })=>hasTargetHandle ? handle.type === \"target\" : hasValidHandle ? validHandleResult.isValid : true) || closestHandles[0];\n}\nconst nullConnection = {\n    source: null,\n    target: null,\n    sourceHandle: null,\n    targetHandle: null\n};\nconst defaultResult = ()=>({\n        handleDomNode: null,\n        isValid: false,\n        connection: nullConnection,\n        endHandle: null\n    });\n// checks if  and returns connection in fom of an object { source: 123, target: 312 }\nfunction isValidHandle(handle, connectionMode, fromNodeId, fromHandleId, fromType, isValidConnection, doc) {\n    const isTarget = fromType === \"target\";\n    const handleToCheck = doc.querySelector(`.react-flow__handle[data-id=\"${handle?.nodeId}-${handle?.id}-${handle?.type}\"]`);\n    const result = {\n        ...defaultResult(),\n        handleDomNode: handleToCheck\n    };\n    if (handleToCheck) {\n        const handleType = getHandleType(undefined, handleToCheck);\n        const handleNodeId = handleToCheck.getAttribute(\"data-nodeid\");\n        const handleId = handleToCheck.getAttribute(\"data-handleid\");\n        const connectable = handleToCheck.classList.contains(\"connectable\");\n        const connectableEnd = handleToCheck.classList.contains(\"connectableend\");\n        const connection = {\n            source: isTarget ? handleNodeId : fromNodeId,\n            sourceHandle: isTarget ? handleId : fromHandleId,\n            target: isTarget ? fromNodeId : handleNodeId,\n            targetHandle: isTarget ? fromHandleId : handleId\n        };\n        result.connection = connection;\n        const isConnectable = connectable && connectableEnd;\n        // in strict mode we don't allow target to target or source to source connections\n        const isValid = isConnectable && (connectionMode === ConnectionMode.Strict ? isTarget && handleType === \"source\" || !isTarget && handleType === \"target\" : handleNodeId !== fromNodeId || handleId !== fromHandleId);\n        if (isValid) {\n            result.endHandle = {\n                nodeId: handleNodeId,\n                handleId,\n                type: handleType\n            };\n            result.isValid = isValidConnection(connection);\n        }\n    }\n    return result;\n}\nfunction getHandleLookup({ nodes, nodeId, handleId, handleType }) {\n    return nodes.reduce((res, node)=>{\n        if (node[internalsSymbol]) {\n            const { handleBounds } = node[internalsSymbol];\n            let sourceHandles = [];\n            let targetHandles = [];\n            if (handleBounds) {\n                sourceHandles = getHandles(node, handleBounds, \"source\", `${nodeId}-${handleId}-${handleType}`);\n                targetHandles = getHandles(node, handleBounds, \"target\", `${nodeId}-${handleId}-${handleType}`);\n            }\n            res.push(...sourceHandles, ...targetHandles);\n        }\n        return res;\n    }, []);\n}\nfunction getHandleType(edgeUpdaterType, handleDomNode) {\n    if (edgeUpdaterType) {\n        return edgeUpdaterType;\n    } else if (handleDomNode?.classList.contains(\"target\")) {\n        return \"target\";\n    } else if (handleDomNode?.classList.contains(\"source\")) {\n        return \"source\";\n    }\n    return null;\n}\nfunction resetRecentHandle(handleDomNode) {\n    handleDomNode?.classList.remove(\"valid\", \"connecting\", \"react-flow__handle-valid\", \"react-flow__handle-connecting\");\n}\nfunction getConnectionStatus(isInsideConnectionRadius, isHandleValid) {\n    let connectionStatus = null;\n    if (isHandleValid) {\n        connectionStatus = \"valid\";\n    } else if (isInsideConnectionRadius && !isHandleValid) {\n        connectionStatus = \"invalid\";\n    }\n    return connectionStatus;\n}\nfunction handlePointerDown({ event, handleId, nodeId, onConnect, isTarget, getState, setState, isValidConnection, edgeUpdaterType, onEdgeUpdateEnd }) {\n    // when react-flow is used inside a shadow root we can't use document\n    const doc = getHostForElement(event.target);\n    const { connectionMode, domNode, autoPanOnConnect, connectionRadius, onConnectStart, panBy, getNodes, cancelConnection } = getState();\n    let autoPanId = 0;\n    let closestHandle;\n    const { x, y } = getEventPosition(event);\n    const clickedHandle = doc?.elementFromPoint(x, y);\n    const handleType = getHandleType(edgeUpdaterType, clickedHandle);\n    const containerBounds = domNode?.getBoundingClientRect();\n    if (!containerBounds || !handleType) {\n        return;\n    }\n    let prevActiveHandle;\n    let connectionPosition = getEventPosition(event, containerBounds);\n    let autoPanStarted = false;\n    let connection = null;\n    let isValid = false;\n    let handleDomNode = null;\n    const handleLookup = getHandleLookup({\n        nodes: getNodes(),\n        nodeId,\n        handleId,\n        handleType\n    });\n    // when the user is moving the mouse close to the edge of the canvas while connecting we move the canvas\n    const autoPan = ()=>{\n        if (!autoPanOnConnect) {\n            return;\n        }\n        const [xMovement, yMovement] = calcAutoPan(connectionPosition, containerBounds);\n        panBy({\n            x: xMovement,\n            y: yMovement\n        });\n        autoPanId = requestAnimationFrame(autoPan);\n    };\n    setState({\n        connectionPosition,\n        connectionStatus: null,\n        // connectionNodeId etc will be removed in the next major in favor of connectionStartHandle\n        connectionNodeId: nodeId,\n        connectionHandleId: handleId,\n        connectionHandleType: handleType,\n        connectionStartHandle: {\n            nodeId,\n            handleId,\n            type: handleType\n        },\n        connectionEndHandle: null\n    });\n    onConnectStart?.(event, {\n        nodeId,\n        handleId,\n        handleType\n    });\n    function onPointerMove(event) {\n        const { transform } = getState();\n        connectionPosition = getEventPosition(event, containerBounds);\n        const { handle, validHandleResult } = getClosestHandle(event, doc, pointToRendererPoint(connectionPosition, transform, false, [\n            1,\n            1\n        ]), connectionRadius, handleLookup, (handle)=>isValidHandle(handle, connectionMode, nodeId, handleId, isTarget ? \"target\" : \"source\", isValidConnection, doc));\n        closestHandle = handle;\n        if (!autoPanStarted) {\n            autoPan();\n            autoPanStarted = true;\n        }\n        handleDomNode = validHandleResult.handleDomNode;\n        connection = validHandleResult.connection;\n        isValid = validHandleResult.isValid;\n        setState({\n            connectionPosition: closestHandle && isValid ? rendererPointToPoint({\n                x: closestHandle.x,\n                y: closestHandle.y\n            }, transform) : connectionPosition,\n            connectionStatus: getConnectionStatus(!!closestHandle, isValid),\n            connectionEndHandle: validHandleResult.endHandle\n        });\n        if (!closestHandle && !isValid && !handleDomNode) {\n            return resetRecentHandle(prevActiveHandle);\n        }\n        if (connection.source !== connection.target && handleDomNode) {\n            resetRecentHandle(prevActiveHandle);\n            prevActiveHandle = handleDomNode;\n            // @todo: remove the old class names \"react-flow__handle-\" in the next major version\n            handleDomNode.classList.add(\"connecting\", \"react-flow__handle-connecting\");\n            handleDomNode.classList.toggle(\"valid\", isValid);\n            handleDomNode.classList.toggle(\"react-flow__handle-valid\", isValid);\n        }\n    }\n    function onPointerUp(event) {\n        if ((closestHandle || handleDomNode) && connection && isValid) {\n            onConnect?.(connection);\n        }\n        // it's important to get a fresh reference from the store here\n        // in order to get the latest state of onConnectEnd\n        getState().onConnectEnd?.(event);\n        if (edgeUpdaterType) {\n            onEdgeUpdateEnd?.(event);\n        }\n        resetRecentHandle(prevActiveHandle);\n        cancelConnection();\n        cancelAnimationFrame(autoPanId);\n        autoPanStarted = false;\n        isValid = false;\n        connection = null;\n        handleDomNode = null;\n        doc.removeEventListener(\"mousemove\", onPointerMove);\n        doc.removeEventListener(\"mouseup\", onPointerUp);\n        doc.removeEventListener(\"touchmove\", onPointerMove);\n        doc.removeEventListener(\"touchend\", onPointerUp);\n    }\n    doc.addEventListener(\"mousemove\", onPointerMove);\n    doc.addEventListener(\"mouseup\", onPointerUp);\n    doc.addEventListener(\"touchmove\", onPointerMove);\n    doc.addEventListener(\"touchend\", onPointerUp);\n}\nconst alwaysValid = ()=>true;\nconst selector$f = (s)=>({\n        connectionStartHandle: s.connectionStartHandle,\n        connectOnClick: s.connectOnClick,\n        noPanClassName: s.noPanClassName\n    });\nconst connectingSelector = (nodeId, handleId, type)=>(state)=>{\n        const { connectionStartHandle: startHandle, connectionEndHandle: endHandle, connectionClickStartHandle: clickHandle } = state;\n        return {\n            connecting: startHandle?.nodeId === nodeId && startHandle?.handleId === handleId && startHandle?.type === type || endHandle?.nodeId === nodeId && endHandle?.handleId === handleId && endHandle?.type === type,\n            clickConnecting: clickHandle?.nodeId === nodeId && clickHandle?.handleId === handleId && clickHandle?.type === type\n        };\n    };\nconst Handle = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ type = \"source\", position = Position.Top, isValidConnection, isConnectable = true, isConnectableStart = true, isConnectableEnd = true, id, onConnect, children, className, onMouseDown, onTouchStart, ...rest }, ref)=>{\n    const handleId = id || null;\n    const isTarget = type === \"target\";\n    const store = useStoreApi();\n    const nodeId = useNodeId();\n    const { connectOnClick, noPanClassName } = useStore(selector$f, zustand_shallow__WEBPACK_IMPORTED_MODULE_5__.shallow);\n    const { connecting, clickConnecting } = useStore(connectingSelector(nodeId, handleId, type), zustand_shallow__WEBPACK_IMPORTED_MODULE_5__.shallow);\n    if (!nodeId) {\n        store.getState().onError?.(\"010\", errorMessages[\"error010\"]());\n    }\n    const onConnectExtended = (params)=>{\n        const { defaultEdgeOptions, onConnect: onConnectAction, hasDefaultEdges } = store.getState();\n        const edgeParams = {\n            ...defaultEdgeOptions,\n            ...params\n        };\n        if (hasDefaultEdges) {\n            const { edges, setEdges } = store.getState();\n            setEdges(addEdge(edgeParams, edges));\n        }\n        onConnectAction?.(edgeParams);\n        onConnect?.(edgeParams);\n    };\n    const onPointerDown = (event)=>{\n        if (!nodeId) {\n            return;\n        }\n        const isMouseTriggered = isMouseEvent(event);\n        if (isConnectableStart && (isMouseTriggered && event.button === 0 || !isMouseTriggered)) {\n            handlePointerDown({\n                event,\n                handleId,\n                nodeId,\n                onConnect: onConnectExtended,\n                isTarget,\n                getState: store.getState,\n                setState: store.setState,\n                isValidConnection: isValidConnection || store.getState().isValidConnection || alwaysValid\n            });\n        }\n        if (isMouseTriggered) {\n            onMouseDown?.(event);\n        } else {\n            onTouchStart?.(event);\n        }\n    };\n    const onClick = (event)=>{\n        const { onClickConnectStart, onClickConnectEnd, connectionClickStartHandle, connectionMode, isValidConnection: isValidConnectionStore } = store.getState();\n        if (!nodeId || !connectionClickStartHandle && !isConnectableStart) {\n            return;\n        }\n        if (!connectionClickStartHandle) {\n            onClickConnectStart?.(event, {\n                nodeId,\n                handleId,\n                handleType: type\n            });\n            store.setState({\n                connectionClickStartHandle: {\n                    nodeId,\n                    type,\n                    handleId\n                }\n            });\n            return;\n        }\n        const doc = getHostForElement(event.target);\n        const isValidConnectionHandler = isValidConnection || isValidConnectionStore || alwaysValid;\n        const { connection, isValid } = isValidHandle({\n            nodeId,\n            id: handleId,\n            type\n        }, connectionMode, connectionClickStartHandle.nodeId, connectionClickStartHandle.handleId || null, connectionClickStartHandle.type, isValidConnectionHandler, doc);\n        if (isValid) {\n            onConnectExtended(connection);\n        }\n        onClickConnectEnd?.(event);\n        store.setState({\n            connectionClickStartHandle: null\n        });\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        \"data-handleid\": handleId,\n        \"data-nodeid\": nodeId,\n        \"data-handlepos\": position,\n        \"data-id\": `${nodeId}-${handleId}-${type}`,\n        className: (0,classcat__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n            \"react-flow__handle\",\n            `react-flow__handle-${position}`,\n            \"nodrag\",\n            noPanClassName,\n            className,\n            {\n                source: !isTarget,\n                target: isTarget,\n                connectable: isConnectable,\n                connectablestart: isConnectableStart,\n                connectableend: isConnectableEnd,\n                connecting: clickConnecting,\n                // this class is used to style the handle when the user is connecting\n                connectionindicator: isConnectable && (isConnectableStart && !connecting || isConnectableEnd && connecting)\n            }\n        ]),\n        onMouseDown: onPointerDown,\n        onTouchStart: onPointerDown,\n        onClick: connectOnClick ? onClick : undefined,\n        ref: ref,\n        ...rest\n    }, children);\n});\nHandle.displayName = \"Handle\";\nvar Handle$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(Handle);\nconst DefaultNode = ({ data, isConnectable, targetPosition = Position.Top, sourcePosition = Position.Bottom })=>{\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Handle$1, {\n        type: \"target\",\n        position: targetPosition,\n        isConnectable: isConnectable\n    }), data?.label, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Handle$1, {\n        type: \"source\",\n        position: sourcePosition,\n        isConnectable: isConnectable\n    }));\n};\nDefaultNode.displayName = \"DefaultNode\";\nvar DefaultNode$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(DefaultNode);\nconst InputNode = ({ data, isConnectable, sourcePosition = Position.Bottom })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, data?.label, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Handle$1, {\n        type: \"source\",\n        position: sourcePosition,\n        isConnectable: isConnectable\n    }));\nInputNode.displayName = \"InputNode\";\nvar InputNode$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(InputNode);\nconst OutputNode = ({ data, isConnectable, targetPosition = Position.Top })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Handle$1, {\n        type: \"target\",\n        position: targetPosition,\n        isConnectable: isConnectable\n    }), data?.label);\nOutputNode.displayName = \"OutputNode\";\nvar OutputNode$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(OutputNode);\nconst GroupNode = ()=>null;\nGroupNode.displayName = \"GroupNode\";\nconst selector$e = (s)=>({\n        selectedNodes: s.getNodes().filter((n)=>n.selected),\n        selectedEdges: s.edges.filter((e)=>e.selected)\n    });\nconst selectId = (obj)=>obj.id;\nfunction areEqual(a, b) {\n    return (0,zustand_shallow__WEBPACK_IMPORTED_MODULE_5__.shallow)(a.selectedNodes.map(selectId), b.selectedNodes.map(selectId)) && (0,zustand_shallow__WEBPACK_IMPORTED_MODULE_5__.shallow)(a.selectedEdges.map(selectId), b.selectedEdges.map(selectId));\n}\n// This is just a helper component for calling the onSelectionChange listener.\n// @TODO: Now that we have the onNodesChange and on EdgesChange listeners, do we still need this component?\nconst SelectionListener = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(({ onSelectionChange })=>{\n    const store = useStoreApi();\n    const { selectedNodes, selectedEdges } = useStore(selector$e, areEqual);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const params = {\n            nodes: selectedNodes,\n            edges: selectedEdges\n        };\n        onSelectionChange?.(params);\n        store.getState().onSelectionChange.forEach((fn)=>fn(params));\n    }, [\n        selectedNodes,\n        selectedEdges,\n        onSelectionChange\n    ]);\n    return null;\n});\nSelectionListener.displayName = \"SelectionListener\";\nconst changeSelector = (s)=>!!s.onSelectionChange;\nfunction Wrapper$1({ onSelectionChange }) {\n    const storeHasSelectionChange = useStore(changeSelector);\n    if (onSelectionChange || storeHasSelectionChange) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SelectionListener, {\n            onSelectionChange: onSelectionChange\n        });\n    }\n    return null;\n}\nconst selector$d = (s)=>({\n        setNodes: s.setNodes,\n        setEdges: s.setEdges,\n        setDefaultNodesAndEdges: s.setDefaultNodesAndEdges,\n        setMinZoom: s.setMinZoom,\n        setMaxZoom: s.setMaxZoom,\n        setTranslateExtent: s.setTranslateExtent,\n        setNodeExtent: s.setNodeExtent,\n        reset: s.reset\n    });\nfunction useStoreUpdater(value, setStoreState) {\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (typeof value !== \"undefined\") {\n            setStoreState(value);\n        }\n    }, [\n        value\n    ]);\n}\n// updates with values in store that don't have a dedicated setter function\nfunction useDirectStoreUpdater(key, value, setState) {\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (typeof value !== \"undefined\") {\n            setState({\n                [key]: value\n            });\n        }\n    }, [\n        value\n    ]);\n}\nconst StoreUpdater = ({ nodes, edges, defaultNodes, defaultEdges, onConnect, onConnectStart, onConnectEnd, onClickConnectStart, onClickConnectEnd, nodesDraggable, nodesConnectable, nodesFocusable, edgesFocusable, edgesUpdatable, elevateNodesOnSelect, minZoom, maxZoom, nodeExtent, onNodesChange, onEdgesChange, elementsSelectable, connectionMode, snapGrid, snapToGrid, translateExtent, connectOnClick, defaultEdgeOptions, fitView, fitViewOptions, onNodesDelete, onEdgesDelete, onNodeDrag, onNodeDragStart, onNodeDragStop, onSelectionDrag, onSelectionDragStart, onSelectionDragStop, noPanClassName, nodeOrigin, rfId, autoPanOnConnect, autoPanOnNodeDrag, onError, connectionRadius, isValidConnection, nodeDragThreshold })=>{\n    const { setNodes, setEdges, setDefaultNodesAndEdges, setMinZoom, setMaxZoom, setTranslateExtent, setNodeExtent, reset } = useStore(selector$d, zustand_shallow__WEBPACK_IMPORTED_MODULE_5__.shallow);\n    const store = useStoreApi();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const edgesWithDefaults = defaultEdges?.map((e)=>({\n                ...e,\n                ...defaultEdgeOptions\n            }));\n        setDefaultNodesAndEdges(defaultNodes, edgesWithDefaults);\n        return ()=>{\n            reset();\n        };\n    }, []);\n    useDirectStoreUpdater(\"defaultEdgeOptions\", defaultEdgeOptions, store.setState);\n    useDirectStoreUpdater(\"connectionMode\", connectionMode, store.setState);\n    useDirectStoreUpdater(\"onConnect\", onConnect, store.setState);\n    useDirectStoreUpdater(\"onConnectStart\", onConnectStart, store.setState);\n    useDirectStoreUpdater(\"onConnectEnd\", onConnectEnd, store.setState);\n    useDirectStoreUpdater(\"onClickConnectStart\", onClickConnectStart, store.setState);\n    useDirectStoreUpdater(\"onClickConnectEnd\", onClickConnectEnd, store.setState);\n    useDirectStoreUpdater(\"nodesDraggable\", nodesDraggable, store.setState);\n    useDirectStoreUpdater(\"nodesConnectable\", nodesConnectable, store.setState);\n    useDirectStoreUpdater(\"nodesFocusable\", nodesFocusable, store.setState);\n    useDirectStoreUpdater(\"edgesFocusable\", edgesFocusable, store.setState);\n    useDirectStoreUpdater(\"edgesUpdatable\", edgesUpdatable, store.setState);\n    useDirectStoreUpdater(\"elementsSelectable\", elementsSelectable, store.setState);\n    useDirectStoreUpdater(\"elevateNodesOnSelect\", elevateNodesOnSelect, store.setState);\n    useDirectStoreUpdater(\"snapToGrid\", snapToGrid, store.setState);\n    useDirectStoreUpdater(\"snapGrid\", snapGrid, store.setState);\n    useDirectStoreUpdater(\"onNodesChange\", onNodesChange, store.setState);\n    useDirectStoreUpdater(\"onEdgesChange\", onEdgesChange, store.setState);\n    useDirectStoreUpdater(\"connectOnClick\", connectOnClick, store.setState);\n    useDirectStoreUpdater(\"fitViewOnInit\", fitView, store.setState);\n    useDirectStoreUpdater(\"fitViewOnInitOptions\", fitViewOptions, store.setState);\n    useDirectStoreUpdater(\"onNodesDelete\", onNodesDelete, store.setState);\n    useDirectStoreUpdater(\"onEdgesDelete\", onEdgesDelete, store.setState);\n    useDirectStoreUpdater(\"onNodeDrag\", onNodeDrag, store.setState);\n    useDirectStoreUpdater(\"onNodeDragStart\", onNodeDragStart, store.setState);\n    useDirectStoreUpdater(\"onNodeDragStop\", onNodeDragStop, store.setState);\n    useDirectStoreUpdater(\"onSelectionDrag\", onSelectionDrag, store.setState);\n    useDirectStoreUpdater(\"onSelectionDragStart\", onSelectionDragStart, store.setState);\n    useDirectStoreUpdater(\"onSelectionDragStop\", onSelectionDragStop, store.setState);\n    useDirectStoreUpdater(\"noPanClassName\", noPanClassName, store.setState);\n    useDirectStoreUpdater(\"nodeOrigin\", nodeOrigin, store.setState);\n    useDirectStoreUpdater(\"rfId\", rfId, store.setState);\n    useDirectStoreUpdater(\"autoPanOnConnect\", autoPanOnConnect, store.setState);\n    useDirectStoreUpdater(\"autoPanOnNodeDrag\", autoPanOnNodeDrag, store.setState);\n    useDirectStoreUpdater(\"onError\", onError, store.setState);\n    useDirectStoreUpdater(\"connectionRadius\", connectionRadius, store.setState);\n    useDirectStoreUpdater(\"isValidConnection\", isValidConnection, store.setState);\n    useDirectStoreUpdater(\"nodeDragThreshold\", nodeDragThreshold, store.setState);\n    useStoreUpdater(nodes, setNodes);\n    useStoreUpdater(edges, setEdges);\n    useStoreUpdater(minZoom, setMinZoom);\n    useStoreUpdater(maxZoom, setMaxZoom);\n    useStoreUpdater(translateExtent, setTranslateExtent);\n    useStoreUpdater(nodeExtent, setNodeExtent);\n    return null;\n};\nconst style = {\n    display: \"none\"\n};\nconst ariaLiveStyle = {\n    position: \"absolute\",\n    width: 1,\n    height: 1,\n    margin: -1,\n    border: 0,\n    padding: 0,\n    overflow: \"hidden\",\n    clip: \"rect(0px, 0px, 0px, 0px)\",\n    clipPath: \"inset(100%)\"\n};\nconst ARIA_NODE_DESC_KEY = \"react-flow__node-desc\";\nconst ARIA_EDGE_DESC_KEY = \"react-flow__edge-desc\";\nconst ARIA_LIVE_MESSAGE = \"react-flow__aria-live\";\nconst selector$c = (s)=>s.ariaLiveMessage;\nfunction AriaLiveMessage({ rfId }) {\n    const ariaLiveMessage = useStore(selector$c);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        id: `${ARIA_LIVE_MESSAGE}-${rfId}`,\n        \"aria-live\": \"assertive\",\n        \"aria-atomic\": \"true\",\n        style: ariaLiveStyle\n    }, ariaLiveMessage);\n}\nfunction A11yDescriptions({ rfId, disableKeyboardA11y }) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        id: `${ARIA_NODE_DESC_KEY}-${rfId}`,\n        style: style\n    }, \"Press enter or space to select a node.\", !disableKeyboardA11y && \"You can then use the arrow keys to move the node around.\", \" Press delete to remove it and escape to cancel.\", \" \"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        id: `${ARIA_EDGE_DESC_KEY}-${rfId}`,\n        style: style\n    }, \"Press enter or space to select an edge. You can then press delete to remove it or escape to cancel.\"), !disableKeyboardA11y && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AriaLiveMessage, {\n        rfId: rfId\n    }));\n}\n// the keycode can be a string 'a' or an array of strings ['a', 'a+d']\n// a string means a single key 'a' or a combination when '+' is used 'a+d'\n// an array means different possibilities. Explainer: ['a', 'd+s'] here the\n// user can use the single key 'a' or the combination 'd' + 's'\nvar useKeyPress = (keyCode = null, options = {\n    actInsideInputWithModifier: true\n})=>{\n    const [keyPressed, setKeyPressed] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // we need to remember if a modifier key is pressed in order to track it\n    const modifierPressed = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    // we need to remember the pressed keys in order to support combinations\n    const pressedKeys = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(new Set([]));\n    // keyCodes = array with single keys [['a']] or key combinations [['a', 's']]\n    // keysToWatch = array with all keys flattened ['a', 'd', 'ShiftLeft']\n    // used to check if we store event.code or event.key. When the code is in the list of keysToWatch\n    // we use the code otherwise the key. Explainer: When you press the left \"command\" key, the code is \"MetaLeft\"\n    // and the key is \"Meta\". We want users to be able to pass keys and codes so we assume that the key is meant when\n    // we can't find it in the list of keysToWatch.\n    const [keyCodes, keysToWatch] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (keyCode !== null) {\n            const keyCodeArr = Array.isArray(keyCode) ? keyCode : [\n                keyCode\n            ];\n            const keys = keyCodeArr.filter((kc)=>typeof kc === \"string\").map((kc)=>kc.split(\"+\"));\n            const keysFlat = keys.reduce((res, item)=>res.concat(...item), []);\n            return [\n                keys,\n                keysFlat\n            ];\n        }\n        return [\n            [],\n            []\n        ];\n    }, [\n        keyCode\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const doc = typeof document !== \"undefined\" ? document : null;\n        const target = options?.target || doc;\n        if (keyCode !== null) {\n            const downHandler = (event)=>{\n                modifierPressed.current = event.ctrlKey || event.metaKey || event.shiftKey;\n                const preventAction = (!modifierPressed.current || modifierPressed.current && !options.actInsideInputWithModifier) && isInputDOMNode(event);\n                if (preventAction) {\n                    return false;\n                }\n                const keyOrCode = useKeyOrCode(event.code, keysToWatch);\n                pressedKeys.current.add(event[keyOrCode]);\n                if (isMatchingKey(keyCodes, pressedKeys.current, false)) {\n                    event.preventDefault();\n                    setKeyPressed(true);\n                }\n            };\n            const upHandler = (event)=>{\n                const preventAction = (!modifierPressed.current || modifierPressed.current && !options.actInsideInputWithModifier) && isInputDOMNode(event);\n                if (preventAction) {\n                    return false;\n                }\n                const keyOrCode = useKeyOrCode(event.code, keysToWatch);\n                if (isMatchingKey(keyCodes, pressedKeys.current, true)) {\n                    setKeyPressed(false);\n                    pressedKeys.current.clear();\n                } else {\n                    pressedKeys.current.delete(event[keyOrCode]);\n                }\n                // fix for Mac: when cmd key is pressed, keyup is not triggered for any other key, see: https://stackoverflow.com/questions/27380018/when-cmd-key-is-kept-pressed-keyup-is-not-triggered-for-any-other-key\n                if (event.key === \"Meta\") {\n                    pressedKeys.current.clear();\n                }\n                modifierPressed.current = false;\n            };\n            const resetHandler = ()=>{\n                pressedKeys.current.clear();\n                setKeyPressed(false);\n            };\n            target?.addEventListener(\"keydown\", downHandler);\n            target?.addEventListener(\"keyup\", upHandler);\n            window.addEventListener(\"blur\", resetHandler);\n            return ()=>{\n                target?.removeEventListener(\"keydown\", downHandler);\n                target?.removeEventListener(\"keyup\", upHandler);\n                window.removeEventListener(\"blur\", resetHandler);\n            };\n        }\n    }, [\n        keyCode,\n        setKeyPressed\n    ]);\n    return keyPressed;\n};\n// utils\nfunction isMatchingKey(keyCodes, pressedKeys, isUp) {\n    return keyCodes// we only want to compare same sizes of keyCode definitions\n    // and pressed keys. When the user specified 'Meta' as a key somewhere\n    // this would also be truthy without this filter when user presses 'Meta' + 'r'\n    .filter((keys)=>isUp || keys.length === pressedKeys.size)// since we want to support multiple possibilities only one of the\n    // combinations need to be part of the pressed keys\n    .some((keys)=>keys.every((k)=>pressedKeys.has(k)));\n}\nfunction useKeyOrCode(eventCode, keysToWatch) {\n    return keysToWatch.includes(eventCode) ? \"code\" : \"key\";\n}\nfunction calculateXYZPosition(node, nodeInternals, result, nodeOrigin) {\n    if (!node.parentNode) {\n        return result;\n    }\n    const parentNode = nodeInternals.get(node.parentNode);\n    const parentNodePosition = getNodePositionWithOrigin(parentNode, nodeOrigin);\n    return calculateXYZPosition(parentNode, nodeInternals, {\n        x: (result.x ?? 0) + parentNodePosition.x,\n        y: (result.y ?? 0) + parentNodePosition.y,\n        z: (parentNode[internalsSymbol]?.z ?? 0) > (result.z ?? 0) ? parentNode[internalsSymbol]?.z ?? 0 : result.z ?? 0\n    }, nodeOrigin);\n}\nfunction updateAbsoluteNodePositions(nodeInternals, nodeOrigin, parentNodes) {\n    nodeInternals.forEach((node)=>{\n        if (node.parentNode && !nodeInternals.has(node.parentNode)) {\n            throw new Error(`Parent node ${node.parentNode} not found`);\n        }\n        if (node.parentNode || parentNodes?.[node.id]) {\n            const { x, y, z } = calculateXYZPosition(node, nodeInternals, {\n                ...node.position,\n                z: node[internalsSymbol]?.z ?? 0\n            }, nodeOrigin);\n            node.positionAbsolute = {\n                x,\n                y\n            };\n            node[internalsSymbol].z = z;\n            if (parentNodes?.[node.id]) {\n                node[internalsSymbol].isParent = true;\n            }\n        }\n    });\n}\nfunction createNodeInternals(nodes, nodeInternals, nodeOrigin, elevateNodesOnSelect) {\n    const nextNodeInternals = new Map();\n    const parentNodes = {};\n    const selectedNodeZ = elevateNodesOnSelect ? 1000 : 0;\n    nodes.forEach((node)=>{\n        const z = (isNumeric(node.zIndex) ? node.zIndex : 0) + (node.selected ? selectedNodeZ : 0);\n        const currInternals = nodeInternals.get(node.id);\n        const internals = {\n            width: currInternals?.width,\n            height: currInternals?.height,\n            ...node,\n            positionAbsolute: {\n                x: node.position.x,\n                y: node.position.y\n            }\n        };\n        if (node.parentNode) {\n            internals.parentNode = node.parentNode;\n            parentNodes[node.parentNode] = true;\n        }\n        Object.defineProperty(internals, internalsSymbol, {\n            enumerable: false,\n            value: {\n                handleBounds: currInternals?.[internalsSymbol]?.handleBounds,\n                z\n            }\n        });\n        nextNodeInternals.set(node.id, internals);\n    });\n    updateAbsoluteNodePositions(nextNodeInternals, nodeOrigin, parentNodes);\n    return nextNodeInternals;\n}\nfunction fitView(get, options = {}) {\n    const { getNodes, width, height, minZoom, maxZoom, d3Zoom, d3Selection, fitViewOnInitDone, fitViewOnInit, nodeOrigin } = get();\n    const isInitialFitView = options.initial && !fitViewOnInitDone && fitViewOnInit;\n    const d3initialized = d3Zoom && d3Selection;\n    if (d3initialized && (isInitialFitView || !options.initial)) {\n        const nodes = getNodes().filter((n)=>{\n            const isVisible = options.includeHiddenNodes ? n.width && n.height : !n.hidden;\n            if (options.nodes?.length) {\n                return isVisible && options.nodes.some((optionNode)=>optionNode.id === n.id);\n            }\n            return isVisible;\n        });\n        const nodesInitialized = nodes.every((n)=>n.width && n.height);\n        if (nodes.length > 0 && nodesInitialized) {\n            const bounds = getNodesBounds(nodes, nodeOrigin);\n            const { x, y, zoom } = getViewportForBounds(bounds, width, height, options.minZoom ?? minZoom, options.maxZoom ?? maxZoom, options.padding ?? 0.1);\n            const nextTransform = d3_zoom__WEBPACK_IMPORTED_MODULE_2__.zoomIdentity.translate(x, y).scale(zoom);\n            if (typeof options.duration === \"number\" && options.duration > 0) {\n                d3Zoom.transform(getD3Transition(d3Selection, options.duration), nextTransform);\n            } else {\n                d3Zoom.transform(d3Selection, nextTransform);\n            }\n            return true;\n        }\n    }\n    return false;\n}\nfunction handleControlledNodeSelectionChange(nodeChanges, nodeInternals) {\n    nodeChanges.forEach((change)=>{\n        const node = nodeInternals.get(change.id);\n        if (node) {\n            nodeInternals.set(node.id, {\n                ...node,\n                [internalsSymbol]: node[internalsSymbol],\n                selected: change.selected\n            });\n        }\n    });\n    return new Map(nodeInternals);\n}\nfunction handleControlledEdgeSelectionChange(edgeChanges, edges) {\n    return edges.map((e)=>{\n        const change = edgeChanges.find((change)=>change.id === e.id);\n        if (change) {\n            e.selected = change.selected;\n        }\n        return e;\n    });\n}\nfunction updateNodesAndEdgesSelections({ changedNodes, changedEdges, get, set }) {\n    const { nodeInternals, edges, onNodesChange, onEdgesChange, hasDefaultNodes, hasDefaultEdges } = get();\n    if (changedNodes?.length) {\n        if (hasDefaultNodes) {\n            set({\n                nodeInternals: handleControlledNodeSelectionChange(changedNodes, nodeInternals)\n            });\n        }\n        onNodesChange?.(changedNodes);\n    }\n    if (changedEdges?.length) {\n        if (hasDefaultEdges) {\n            set({\n                edges: handleControlledEdgeSelectionChange(changedEdges, edges)\n            });\n        }\n        onEdgesChange?.(changedEdges);\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst noop = ()=>{};\nconst initialViewportHelper = {\n    zoomIn: noop,\n    zoomOut: noop,\n    zoomTo: noop,\n    getZoom: ()=>1,\n    setViewport: noop,\n    getViewport: ()=>({\n            x: 0,\n            y: 0,\n            zoom: 1\n        }),\n    fitView: ()=>false,\n    setCenter: noop,\n    fitBounds: noop,\n    project: (position)=>position,\n    screenToFlowPosition: (position)=>position,\n    flowToScreenPosition: (position)=>position,\n    viewportInitialized: false\n};\nconst selector$b = (s)=>({\n        d3Zoom: s.d3Zoom,\n        d3Selection: s.d3Selection\n    });\nconst useViewportHelper = ()=>{\n    const store = useStoreApi();\n    const { d3Zoom, d3Selection } = useStore(selector$b, zustand_shallow__WEBPACK_IMPORTED_MODULE_5__.shallow);\n    const viewportHelperFunctions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (d3Selection && d3Zoom) {\n            return {\n                zoomIn: (options)=>d3Zoom.scaleBy(getD3Transition(d3Selection, options?.duration), 1.2),\n                zoomOut: (options)=>d3Zoom.scaleBy(getD3Transition(d3Selection, options?.duration), 1 / 1.2),\n                zoomTo: (zoomLevel, options)=>d3Zoom.scaleTo(getD3Transition(d3Selection, options?.duration), zoomLevel),\n                getZoom: ()=>store.getState().transform[2],\n                setViewport: (transform, options)=>{\n                    const [x, y, zoom] = store.getState().transform;\n                    const nextTransform = d3_zoom__WEBPACK_IMPORTED_MODULE_2__.zoomIdentity.translate(transform.x ?? x, transform.y ?? y).scale(transform.zoom ?? zoom);\n                    d3Zoom.transform(getD3Transition(d3Selection, options?.duration), nextTransform);\n                },\n                getViewport: ()=>{\n                    const [x, y, zoom] = store.getState().transform;\n                    return {\n                        x,\n                        y,\n                        zoom\n                    };\n                },\n                fitView: (options)=>fitView(store.getState, options),\n                setCenter: (x, y, options)=>{\n                    const { width, height, maxZoom } = store.getState();\n                    const nextZoom = typeof options?.zoom !== \"undefined\" ? options.zoom : maxZoom;\n                    const centerX = width / 2 - x * nextZoom;\n                    const centerY = height / 2 - y * nextZoom;\n                    const transform = d3_zoom__WEBPACK_IMPORTED_MODULE_2__.zoomIdentity.translate(centerX, centerY).scale(nextZoom);\n                    d3Zoom.transform(getD3Transition(d3Selection, options?.duration), transform);\n                },\n                fitBounds: (bounds, options)=>{\n                    const { width, height, minZoom, maxZoom } = store.getState();\n                    const { x, y, zoom } = getViewportForBounds(bounds, width, height, minZoom, maxZoom, options?.padding ?? 0.1);\n                    const transform = d3_zoom__WEBPACK_IMPORTED_MODULE_2__.zoomIdentity.translate(x, y).scale(zoom);\n                    d3Zoom.transform(getD3Transition(d3Selection, options?.duration), transform);\n                },\n                // @deprecated Use `screenToFlowPosition`.\n                project: (position)=>{\n                    const { transform, snapToGrid, snapGrid } = store.getState();\n                    console.warn(\"[DEPRECATED] `project` is deprecated. Instead use `screenToFlowPosition`. There is no need to subtract the react flow bounds anymore! https://reactflow.dev/api-reference/types/react-flow-instance#screen-to-flow-position\");\n                    return pointToRendererPoint(position, transform, snapToGrid, snapGrid);\n                },\n                screenToFlowPosition: (position)=>{\n                    const { transform, snapToGrid, snapGrid, domNode } = store.getState();\n                    if (!domNode) {\n                        return position;\n                    }\n                    const { x: domX, y: domY } = domNode.getBoundingClientRect();\n                    const relativePosition = {\n                        x: position.x - domX,\n                        y: position.y - domY\n                    };\n                    return pointToRendererPoint(relativePosition, transform, snapToGrid, snapGrid);\n                },\n                flowToScreenPosition: (position)=>{\n                    const { transform, domNode } = store.getState();\n                    if (!domNode) {\n                        return position;\n                    }\n                    const { x: domX, y: domY } = domNode.getBoundingClientRect();\n                    const rendererPosition = rendererPointToPoint(position, transform);\n                    return {\n                        x: rendererPosition.x + domX,\n                        y: rendererPosition.y + domY\n                    };\n                },\n                viewportInitialized: true\n            };\n        }\n        return initialViewportHelper;\n    }, [\n        d3Zoom,\n        d3Selection\n    ]);\n    return viewportHelperFunctions;\n};\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */ function useReactFlow() {\n    const viewportHelper = useViewportHelper();\n    const store = useStoreApi();\n    const getNodes = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        return store.getState().getNodes().map((n)=>({\n                ...n\n            }));\n    }, []);\n    const getNode = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((id)=>{\n        return store.getState().nodeInternals.get(id);\n    }, []);\n    const getEdges = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const { edges = [] } = store.getState();\n        return edges.map((e)=>({\n                ...e\n            }));\n    }, []);\n    const getEdge = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((id)=>{\n        const { edges = [] } = store.getState();\n        return edges.find((e)=>e.id === id);\n    }, []);\n    const setNodes = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((payload)=>{\n        const { getNodes, setNodes, hasDefaultNodes, onNodesChange } = store.getState();\n        const nodes = getNodes();\n        const nextNodes = typeof payload === \"function\" ? payload(nodes) : payload;\n        if (hasDefaultNodes) {\n            setNodes(nextNodes);\n        } else if (onNodesChange) {\n            const changes = nextNodes.length === 0 ? nodes.map((node)=>({\n                    type: \"remove\",\n                    id: node.id\n                })) : nextNodes.map((node)=>({\n                    item: node,\n                    type: \"reset\"\n                }));\n            onNodesChange(changes);\n        }\n    }, []);\n    const setEdges = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((payload)=>{\n        const { edges = [], setEdges, hasDefaultEdges, onEdgesChange } = store.getState();\n        const nextEdges = typeof payload === \"function\" ? payload(edges) : payload;\n        if (hasDefaultEdges) {\n            setEdges(nextEdges);\n        } else if (onEdgesChange) {\n            const changes = nextEdges.length === 0 ? edges.map((edge)=>({\n                    type: \"remove\",\n                    id: edge.id\n                })) : nextEdges.map((edge)=>({\n                    item: edge,\n                    type: \"reset\"\n                }));\n            onEdgesChange(changes);\n        }\n    }, []);\n    const addNodes = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((payload)=>{\n        const nodes = Array.isArray(payload) ? payload : [\n            payload\n        ];\n        const { getNodes, setNodes, hasDefaultNodes, onNodesChange } = store.getState();\n        if (hasDefaultNodes) {\n            const currentNodes = getNodes();\n            const nextNodes = [\n                ...currentNodes,\n                ...nodes\n            ];\n            setNodes(nextNodes);\n        } else if (onNodesChange) {\n            const changes = nodes.map((node)=>({\n                    item: node,\n                    type: \"add\"\n                }));\n            onNodesChange(changes);\n        }\n    }, []);\n    const addEdges = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((payload)=>{\n        const nextEdges = Array.isArray(payload) ? payload : [\n            payload\n        ];\n        const { edges = [], setEdges, hasDefaultEdges, onEdgesChange } = store.getState();\n        if (hasDefaultEdges) {\n            setEdges([\n                ...edges,\n                ...nextEdges\n            ]);\n        } else if (onEdgesChange) {\n            const changes = nextEdges.map((edge)=>({\n                    item: edge,\n                    type: \"add\"\n                }));\n            onEdgesChange(changes);\n        }\n    }, []);\n    const toObject = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const { getNodes, edges = [], transform } = store.getState();\n        const [x, y, zoom] = transform;\n        return {\n            nodes: getNodes().map((n)=>({\n                    ...n\n                })),\n            edges: edges.map((e)=>({\n                    ...e\n                })),\n            viewport: {\n                x,\n                y,\n                zoom\n            }\n        };\n    }, []);\n    const deleteElements = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ nodes: nodesDeleted, edges: edgesDeleted })=>{\n        const { nodeInternals, getNodes, edges, hasDefaultNodes, hasDefaultEdges, onNodesDelete, onEdgesDelete, onNodesChange, onEdgesChange } = store.getState();\n        const nodeIds = (nodesDeleted || []).map((node)=>node.id);\n        const edgeIds = (edgesDeleted || []).map((edge)=>edge.id);\n        const nodesToRemove = getNodes().reduce((res, node)=>{\n            const parentHit = !nodeIds.includes(node.id) && node.parentNode && res.find((n)=>n.id === node.parentNode);\n            const deletable = typeof node.deletable === \"boolean\" ? node.deletable : true;\n            if (deletable && (nodeIds.includes(node.id) || parentHit)) {\n                res.push(node);\n            }\n            return res;\n        }, []);\n        const deletableEdges = edges.filter((e)=>typeof e.deletable === \"boolean\" ? e.deletable : true);\n        const initialHitEdges = deletableEdges.filter((e)=>edgeIds.includes(e.id));\n        if (nodesToRemove || initialHitEdges) {\n            const connectedEdges = getConnectedEdges(nodesToRemove, deletableEdges);\n            const edgesToRemove = [\n                ...initialHitEdges,\n                ...connectedEdges\n            ];\n            const edgeIdsToRemove = edgesToRemove.reduce((res, edge)=>{\n                if (!res.includes(edge.id)) {\n                    res.push(edge.id);\n                }\n                return res;\n            }, []);\n            if (hasDefaultEdges || hasDefaultNodes) {\n                if (hasDefaultEdges) {\n                    store.setState({\n                        edges: edges.filter((e)=>!edgeIdsToRemove.includes(e.id))\n                    });\n                }\n                if (hasDefaultNodes) {\n                    nodesToRemove.forEach((node)=>{\n                        nodeInternals.delete(node.id);\n                    });\n                    store.setState({\n                        nodeInternals: new Map(nodeInternals)\n                    });\n                }\n            }\n            if (edgeIdsToRemove.length > 0) {\n                onEdgesDelete?.(edgesToRemove);\n                if (onEdgesChange) {\n                    onEdgesChange(edgeIdsToRemove.map((id)=>({\n                            id,\n                            type: \"remove\"\n                        })));\n                }\n            }\n            if (nodesToRemove.length > 0) {\n                onNodesDelete?.(nodesToRemove);\n                if (onNodesChange) {\n                    const nodeChanges = nodesToRemove.map((n)=>({\n                            id: n.id,\n                            type: \"remove\"\n                        }));\n                    onNodesChange(nodeChanges);\n                }\n            }\n        }\n    }, []);\n    const getNodeRect = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((nodeOrRect)=>{\n        const isRect = isRectObject(nodeOrRect);\n        const node = isRect ? null : store.getState().nodeInternals.get(nodeOrRect.id);\n        if (!isRect && !node) {\n            return [\n                null,\n                null,\n                isRect\n            ];\n        }\n        const nodeRect = isRect ? nodeOrRect : nodeToRect(node);\n        return [\n            nodeRect,\n            node,\n            isRect\n        ];\n    }, []);\n    const getIntersectingNodes = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((nodeOrRect, partially = true, nodes)=>{\n        const [nodeRect, node, isRect] = getNodeRect(nodeOrRect);\n        if (!nodeRect) {\n            return [];\n        }\n        return (nodes || store.getState().getNodes()).filter((n)=>{\n            if (!isRect && (n.id === node.id || !n.positionAbsolute)) {\n                return false;\n            }\n            const currNodeRect = nodeToRect(n);\n            const overlappingArea = getOverlappingArea(currNodeRect, nodeRect);\n            const partiallyVisible = partially && overlappingArea > 0;\n            return partiallyVisible || overlappingArea >= nodeRect.width * nodeRect.height;\n        });\n    }, []);\n    const isNodeIntersecting = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((nodeOrRect, area, partially = true)=>{\n        const [nodeRect] = getNodeRect(nodeOrRect);\n        if (!nodeRect) {\n            return false;\n        }\n        const overlappingArea = getOverlappingArea(nodeRect, area);\n        const partiallyVisible = partially && overlappingArea > 0;\n        return partiallyVisible || overlappingArea >= nodeRect.width * nodeRect.height;\n    }, []);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return {\n            ...viewportHelper,\n            getNodes,\n            getNode,\n            getEdges,\n            getEdge,\n            setNodes,\n            setEdges,\n            addNodes,\n            addEdges,\n            toObject,\n            deleteElements,\n            getIntersectingNodes,\n            isNodeIntersecting\n        };\n    }, [\n        viewportHelper,\n        getNodes,\n        getNode,\n        getEdges,\n        getEdge,\n        setNodes,\n        setEdges,\n        addNodes,\n        addEdges,\n        toObject,\n        deleteElements,\n        getIntersectingNodes,\n        isNodeIntersecting\n    ]);\n}\nconst deleteKeyOptions = {\n    actInsideInputWithModifier: false\n};\nvar useGlobalKeyHandler = ({ deleteKeyCode, multiSelectionKeyCode })=>{\n    const store = useStoreApi();\n    const { deleteElements } = useReactFlow();\n    const deleteKeyPressed = useKeyPress(deleteKeyCode, deleteKeyOptions);\n    const multiSelectionKeyPressed = useKeyPress(multiSelectionKeyCode);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (deleteKeyPressed) {\n            const { edges, getNodes } = store.getState();\n            const selectedNodes = getNodes().filter((node)=>node.selected);\n            const selectedEdges = edges.filter((edge)=>edge.selected);\n            deleteElements({\n                nodes: selectedNodes,\n                edges: selectedEdges\n            });\n            store.setState({\n                nodesSelectionActive: false\n            });\n        }\n    }, [\n        deleteKeyPressed\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        store.setState({\n            multiSelectionActive: multiSelectionKeyPressed\n        });\n    }, [\n        multiSelectionKeyPressed\n    ]);\n};\nfunction useResizeHandler(rendererNode) {\n    const store = useStoreApi();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let resizeObserver;\n        const updateDimensions = ()=>{\n            if (!rendererNode.current) {\n                return;\n            }\n            const size = getDimensions(rendererNode.current);\n            if (size.height === 0 || size.width === 0) {\n                store.getState().onError?.(\"004\", errorMessages[\"error004\"]());\n            }\n            store.setState({\n                width: size.width || 500,\n                height: size.height || 500\n            });\n        };\n        updateDimensions();\n        window.addEventListener(\"resize\", updateDimensions);\n        if (rendererNode.current) {\n            resizeObserver = new ResizeObserver(()=>updateDimensions());\n            resizeObserver.observe(rendererNode.current);\n        }\n        return ()=>{\n            window.removeEventListener(\"resize\", updateDimensions);\n            if (resizeObserver && rendererNode.current) {\n                resizeObserver.unobserve(rendererNode.current);\n            }\n        };\n    }, []);\n}\nconst containerStyle = {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\",\n    top: 0,\n    left: 0\n};\n/* eslint-disable @typescript-eslint/ban-ts-comment */ const viewChanged = (prevViewport, eventTransform)=>prevViewport.x !== eventTransform.x || prevViewport.y !== eventTransform.y || prevViewport.zoom !== eventTransform.k;\nconst eventToFlowTransform = (eventTransform)=>({\n        x: eventTransform.x,\n        y: eventTransform.y,\n        zoom: eventTransform.k\n    });\nconst isWrappedWithClass = (event, className)=>event.target.closest(`.${className}`);\nconst isRightClickPan = (panOnDrag, usedButton)=>usedButton === 2 && Array.isArray(panOnDrag) && panOnDrag.includes(2);\nconst wheelDelta = (event)=>{\n    const factor = event.ctrlKey && isMacOs() ? 10 : 1;\n    return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * factor;\n};\nconst selector$a = (s)=>({\n        d3Zoom: s.d3Zoom,\n        d3Selection: s.d3Selection,\n        d3ZoomHandler: s.d3ZoomHandler,\n        userSelectionActive: s.userSelectionActive\n    });\nconst ZoomPane = ({ onMove, onMoveStart, onMoveEnd, onPaneContextMenu, zoomOnScroll = true, zoomOnPinch = true, panOnScroll = false, panOnScrollSpeed = 0.5, panOnScrollMode = PanOnScrollMode.Free, zoomOnDoubleClick = true, elementsSelectable, panOnDrag = true, defaultViewport, translateExtent, minZoom, maxZoom, zoomActivationKeyCode, preventScrolling = true, children, noWheelClassName, noPanClassName })=>{\n    const timerId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const store = useStoreApi();\n    const isZoomingOrPanning = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const zoomedWithRightMouseButton = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const zoomPane = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const prevTransform = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        x: 0,\n        y: 0,\n        zoom: 0\n    });\n    const { d3Zoom, d3Selection, d3ZoomHandler, userSelectionActive } = useStore(selector$a, zustand_shallow__WEBPACK_IMPORTED_MODULE_5__.shallow);\n    const zoomActivationKeyPressed = useKeyPress(zoomActivationKeyCode);\n    const mouseButton = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const isPanScrolling = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const panScrollTimeout = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    useResizeHandler(zoomPane);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (zoomPane.current) {\n            const bbox = zoomPane.current.getBoundingClientRect();\n            const d3ZoomInstance = (0,d3_zoom__WEBPACK_IMPORTED_MODULE_2__.zoom)().scaleExtent([\n                minZoom,\n                maxZoom\n            ]).translateExtent(translateExtent);\n            const selection = (0,d3_selection__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(zoomPane.current).call(d3ZoomInstance);\n            const updatedTransform = d3_zoom__WEBPACK_IMPORTED_MODULE_2__.zoomIdentity.translate(defaultViewport.x, defaultViewport.y).scale(clamp(defaultViewport.zoom, minZoom, maxZoom));\n            const extent = [\n                [\n                    0,\n                    0\n                ],\n                [\n                    bbox.width,\n                    bbox.height\n                ]\n            ];\n            const constrainedTransform = d3ZoomInstance.constrain()(updatedTransform, extent, translateExtent);\n            d3ZoomInstance.transform(selection, constrainedTransform);\n            d3ZoomInstance.wheelDelta(wheelDelta);\n            store.setState({\n                d3Zoom: d3ZoomInstance,\n                d3Selection: selection,\n                d3ZoomHandler: selection.on(\"wheel.zoom\"),\n                // we need to pass transform because zoom handler is not registered when we set the initial transform\n                transform: [\n                    constrainedTransform.x,\n                    constrainedTransform.y,\n                    constrainedTransform.k\n                ],\n                domNode: zoomPane.current.closest(\".react-flow\")\n            });\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (d3Selection && d3Zoom) {\n            if (panOnScroll && !zoomActivationKeyPressed && !userSelectionActive) {\n                d3Selection.on(\"wheel.zoom\", (event)=>{\n                    if (isWrappedWithClass(event, noWheelClassName)) {\n                        return false;\n                    }\n                    event.preventDefault();\n                    event.stopImmediatePropagation();\n                    const currentZoom = d3Selection.property(\"__zoom\").k || 1;\n                    const _isMacOs = isMacOs();\n                    // macos sets ctrlKey=true for pinch gesture on a trackpad\n                    if (event.ctrlKey && zoomOnPinch && _isMacOs) {\n                        const point = (0,d3_selection__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(event);\n                        const pinchDelta = wheelDelta(event);\n                        const zoom = currentZoom * Math.pow(2, pinchDelta);\n                        // @ts-ignore\n                        d3Zoom.scaleTo(d3Selection, zoom, point, event);\n                        return;\n                    }\n                    // increase scroll speed in firefox\n                    // firefox: deltaMode === 1; chrome: deltaMode === 0\n                    const deltaNormalize = event.deltaMode === 1 ? 20 : 1;\n                    let deltaX = panOnScrollMode === PanOnScrollMode.Vertical ? 0 : event.deltaX * deltaNormalize;\n                    let deltaY = panOnScrollMode === PanOnScrollMode.Horizontal ? 0 : event.deltaY * deltaNormalize;\n                    // this enables vertical scrolling with shift + scroll on windows\n                    if (!_isMacOs && event.shiftKey && panOnScrollMode !== PanOnScrollMode.Vertical) {\n                        deltaX = event.deltaY * deltaNormalize;\n                        deltaY = 0;\n                    }\n                    d3Zoom.translateBy(d3Selection, -(deltaX / currentZoom) * panOnScrollSpeed, -(deltaY / currentZoom) * panOnScrollSpeed, // @ts-ignore\n                    {\n                        internal: true\n                    });\n                    const nextViewport = eventToFlowTransform(d3Selection.property(\"__zoom\"));\n                    const { onViewportChangeStart, onViewportChange, onViewportChangeEnd } = store.getState();\n                    clearTimeout(panScrollTimeout.current);\n                    // for pan on scroll we need to handle the event calls on our own\n                    // we can't use the start, zoom and end events from d3-zoom\n                    // because start and move gets called on every scroll event and not once at the beginning\n                    if (!isPanScrolling.current) {\n                        isPanScrolling.current = true;\n                        onMoveStart?.(event, nextViewport);\n                        onViewportChangeStart?.(nextViewport);\n                    }\n                    if (isPanScrolling.current) {\n                        onMove?.(event, nextViewport);\n                        onViewportChange?.(nextViewport);\n                        panScrollTimeout.current = setTimeout(()=>{\n                            onMoveEnd?.(event, nextViewport);\n                            onViewportChangeEnd?.(nextViewport);\n                            isPanScrolling.current = false;\n                        }, 150);\n                    }\n                }, {\n                    passive: false\n                });\n            } else if (typeof d3ZoomHandler !== \"undefined\") {\n                d3Selection.on(\"wheel.zoom\", function(event, d) {\n                    if (!preventScrolling || isWrappedWithClass(event, noWheelClassName)) {\n                        return null;\n                    }\n                    event.preventDefault();\n                    d3ZoomHandler.call(this, event, d);\n                }, {\n                    passive: false\n                });\n            }\n        }\n    }, [\n        userSelectionActive,\n        panOnScroll,\n        panOnScrollMode,\n        d3Selection,\n        d3Zoom,\n        d3ZoomHandler,\n        zoomActivationKeyPressed,\n        zoomOnPinch,\n        preventScrolling,\n        noWheelClassName,\n        onMoveStart,\n        onMove,\n        onMoveEnd\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (d3Zoom) {\n            d3Zoom.on(\"start\", (event)=>{\n                if (!event.sourceEvent || event.sourceEvent.internal) {\n                    return null;\n                }\n                // we need to remember it here, because it's always 0 in the \"zoom\" event\n                mouseButton.current = event.sourceEvent?.button;\n                const { onViewportChangeStart } = store.getState();\n                const flowTransform = eventToFlowTransform(event.transform);\n                isZoomingOrPanning.current = true;\n                prevTransform.current = flowTransform;\n                if (event.sourceEvent?.type === \"mousedown\") {\n                    store.setState({\n                        paneDragging: true\n                    });\n                }\n                onViewportChangeStart?.(flowTransform);\n                onMoveStart?.(event.sourceEvent, flowTransform);\n            });\n        }\n    }, [\n        d3Zoom,\n        onMoveStart\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (d3Zoom) {\n            if (userSelectionActive && !isZoomingOrPanning.current) {\n                d3Zoom.on(\"zoom\", null);\n            } else if (!userSelectionActive) {\n                d3Zoom.on(\"zoom\", (event)=>{\n                    const { onViewportChange } = store.getState();\n                    store.setState({\n                        transform: [\n                            event.transform.x,\n                            event.transform.y,\n                            event.transform.k\n                        ]\n                    });\n                    zoomedWithRightMouseButton.current = !!(onPaneContextMenu && isRightClickPan(panOnDrag, mouseButton.current ?? 0));\n                    if ((onMove || onViewportChange) && !event.sourceEvent?.internal) {\n                        const flowTransform = eventToFlowTransform(event.transform);\n                        onViewportChange?.(flowTransform);\n                        onMove?.(event.sourceEvent, flowTransform);\n                    }\n                });\n            }\n        }\n    }, [\n        userSelectionActive,\n        d3Zoom,\n        onMove,\n        panOnDrag,\n        onPaneContextMenu\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (d3Zoom) {\n            d3Zoom.on(\"end\", (event)=>{\n                if (!event.sourceEvent || event.sourceEvent.internal) {\n                    return null;\n                }\n                const { onViewportChangeEnd } = store.getState();\n                isZoomingOrPanning.current = false;\n                store.setState({\n                    paneDragging: false\n                });\n                if (onPaneContextMenu && isRightClickPan(panOnDrag, mouseButton.current ?? 0) && !zoomedWithRightMouseButton.current) {\n                    onPaneContextMenu(event.sourceEvent);\n                }\n                zoomedWithRightMouseButton.current = false;\n                if ((onMoveEnd || onViewportChangeEnd) && viewChanged(prevTransform.current, event.transform)) {\n                    const flowTransform = eventToFlowTransform(event.transform);\n                    prevTransform.current = flowTransform;\n                    clearTimeout(timerId.current);\n                    timerId.current = setTimeout(()=>{\n                        onViewportChangeEnd?.(flowTransform);\n                        onMoveEnd?.(event.sourceEvent, flowTransform);\n                    }, panOnScroll ? 150 : 0);\n                }\n            });\n        }\n    }, [\n        d3Zoom,\n        panOnScroll,\n        panOnDrag,\n        onMoveEnd,\n        onPaneContextMenu\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (d3Zoom) {\n            d3Zoom.filter((event)=>{\n                const zoomScroll = zoomActivationKeyPressed || zoomOnScroll;\n                const pinchZoom = zoomOnPinch && event.ctrlKey;\n                if ((panOnDrag === true || Array.isArray(panOnDrag) && panOnDrag.includes(1)) && event.button === 1 && event.type === \"mousedown\" && (isWrappedWithClass(event, \"react-flow__node\") || isWrappedWithClass(event, \"react-flow__edge\"))) {\n                    return true;\n                }\n                // if all interactions are disabled, we prevent all zoom events\n                if (!panOnDrag && !zoomScroll && !panOnScroll && !zoomOnDoubleClick && !zoomOnPinch) {\n                    return false;\n                }\n                // during a selection we prevent all other interactions\n                if (userSelectionActive) {\n                    return false;\n                }\n                // if zoom on double click is disabled, we prevent the double click event\n                if (!zoomOnDoubleClick && event.type === \"dblclick\") {\n                    return false;\n                }\n                // if the target element is inside an element with the nowheel class, we prevent zooming\n                if (isWrappedWithClass(event, noWheelClassName) && event.type === \"wheel\") {\n                    return false;\n                }\n                // if the target element is inside an element with the nopan class, we prevent panning\n                if (isWrappedWithClass(event, noPanClassName) && (event.type !== \"wheel\" || panOnScroll && event.type === \"wheel\" && !zoomActivationKeyPressed)) {\n                    return false;\n                }\n                if (!zoomOnPinch && event.ctrlKey && event.type === \"wheel\") {\n                    return false;\n                }\n                // when there is no scroll handling enabled, we prevent all wheel events\n                if (!zoomScroll && !panOnScroll && !pinchZoom && event.type === \"wheel\") {\n                    return false;\n                }\n                // if the pane is not movable, we prevent dragging it with mousestart or touchstart\n                if (!panOnDrag && (event.type === \"mousedown\" || event.type === \"touchstart\")) {\n                    return false;\n                }\n                // if the pane is only movable using allowed clicks\n                if (Array.isArray(panOnDrag) && !panOnDrag.includes(event.button) && (event.type === \"mousedown\" || event.type === \"touchstart\")) {\n                    return false;\n                }\n                // We only allow right clicks if pan on drag is set to right click\n                const buttonAllowed = Array.isArray(panOnDrag) && panOnDrag.includes(event.button) || !event.button || event.button <= 1;\n                // default filter for d3-zoom\n                return (!event.ctrlKey || event.type === \"wheel\") && buttonAllowed;\n            });\n        }\n    }, [\n        userSelectionActive,\n        d3Zoom,\n        zoomOnScroll,\n        zoomOnPinch,\n        panOnScroll,\n        zoomOnDoubleClick,\n        panOnDrag,\n        elementsSelectable,\n        zoomActivationKeyPressed\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"react-flow__renderer\",\n        ref: zoomPane,\n        style: containerStyle\n    }, children);\n};\nconst selector$9 = (s)=>({\n        userSelectionActive: s.userSelectionActive,\n        userSelectionRect: s.userSelectionRect\n    });\nfunction UserSelection() {\n    const { userSelectionActive, userSelectionRect } = useStore(selector$9, zustand_shallow__WEBPACK_IMPORTED_MODULE_5__.shallow);\n    const isActive = userSelectionActive && userSelectionRect;\n    if (!isActive) {\n        return null;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"react-flow__selection react-flow__container\",\n        style: {\n            width: userSelectionRect.width,\n            height: userSelectionRect.height,\n            transform: `translate(${userSelectionRect.x}px, ${userSelectionRect.y}px)`\n        }\n    });\n}\nfunction handleParentExpand(res, updateItem) {\n    const parent = res.find((e)=>e.id === updateItem.parentNode);\n    if (parent) {\n        const extendWidth = updateItem.position.x + updateItem.width - parent.width;\n        const extendHeight = updateItem.position.y + updateItem.height - parent.height;\n        if (extendWidth > 0 || extendHeight > 0 || updateItem.position.x < 0 || updateItem.position.y < 0) {\n            parent.style = {\n                ...parent.style\n            } || {};\n            parent.style.width = parent.style.width ?? parent.width;\n            parent.style.height = parent.style.height ?? parent.height;\n            if (extendWidth > 0) {\n                parent.style.width += extendWidth;\n            }\n            if (extendHeight > 0) {\n                parent.style.height += extendHeight;\n            }\n            if (updateItem.position.x < 0) {\n                const xDiff = Math.abs(updateItem.position.x);\n                parent.position.x = parent.position.x - xDiff;\n                parent.style.width += xDiff;\n                updateItem.position.x = 0;\n            }\n            if (updateItem.position.y < 0) {\n                const yDiff = Math.abs(updateItem.position.y);\n                parent.position.y = parent.position.y - yDiff;\n                parent.style.height += yDiff;\n                updateItem.position.y = 0;\n            }\n            parent.width = parent.style.width;\n            parent.height = parent.style.height;\n        }\n    }\n}\nfunction applyChanges(changes, elements) {\n    // we need this hack to handle the setNodes and setEdges function of the useReactFlow hook for controlled flows\n    if (changes.some((c)=>c.type === \"reset\")) {\n        return changes.filter((c)=>c.type === \"reset\").map((c)=>c.item);\n    }\n    const initElements = changes.filter((c)=>c.type === \"add\").map((c)=>c.item);\n    return elements.reduce((res, item)=>{\n        const currentChanges = changes.filter((c)=>c.id === item.id);\n        if (currentChanges.length === 0) {\n            res.push(item);\n            return res;\n        }\n        const updateItem = {\n            ...item\n        };\n        for (const currentChange of currentChanges){\n            if (currentChange) {\n                switch(currentChange.type){\n                    case \"select\":\n                        {\n                            updateItem.selected = currentChange.selected;\n                            break;\n                        }\n                    case \"position\":\n                        {\n                            if (typeof currentChange.position !== \"undefined\") {\n                                updateItem.position = currentChange.position;\n                            }\n                            if (typeof currentChange.positionAbsolute !== \"undefined\") {\n                                updateItem.positionAbsolute = currentChange.positionAbsolute;\n                            }\n                            if (typeof currentChange.dragging !== \"undefined\") {\n                                updateItem.dragging = currentChange.dragging;\n                            }\n                            if (updateItem.expandParent) {\n                                handleParentExpand(res, updateItem);\n                            }\n                            break;\n                        }\n                    case \"dimensions\":\n                        {\n                            if (typeof currentChange.dimensions !== \"undefined\") {\n                                updateItem.width = currentChange.dimensions.width;\n                                updateItem.height = currentChange.dimensions.height;\n                            }\n                            if (typeof currentChange.updateStyle !== \"undefined\") {\n                                updateItem.style = {\n                                    ...updateItem.style || {},\n                                    ...currentChange.dimensions\n                                };\n                            }\n                            if (typeof currentChange.resizing === \"boolean\") {\n                                updateItem.resizing = currentChange.resizing;\n                            }\n                            if (updateItem.expandParent) {\n                                handleParentExpand(res, updateItem);\n                            }\n                            break;\n                        }\n                    case \"remove\":\n                        {\n                            return res;\n                        }\n                }\n            }\n        }\n        res.push(updateItem);\n        return res;\n    }, initElements);\n}\nfunction applyNodeChanges(changes, nodes) {\n    return applyChanges(changes, nodes);\n}\nfunction applyEdgeChanges(changes, edges) {\n    return applyChanges(changes, edges);\n}\nconst createSelectionChange = (id, selected)=>({\n        id,\n        type: \"select\",\n        selected\n    });\nfunction getSelectionChanges(items, selectedIds) {\n    return items.reduce((res, item)=>{\n        const willBeSelected = selectedIds.includes(item.id);\n        if (!item.selected && willBeSelected) {\n            item.selected = true;\n            res.push(createSelectionChange(item.id, true));\n        } else if (item.selected && !willBeSelected) {\n            item.selected = false;\n            res.push(createSelectionChange(item.id, false));\n        }\n        return res;\n    }, []);\n}\n/**\n * The user selection rectangle gets displayed when a user drags the mouse while pressing shift\n */ const wrapHandler = (handler, containerRef)=>{\n    return (event)=>{\n        if (event.target !== containerRef.current) {\n            return;\n        }\n        handler?.(event);\n    };\n};\nconst selector$8 = (s)=>({\n        userSelectionActive: s.userSelectionActive,\n        elementsSelectable: s.elementsSelectable,\n        dragging: s.paneDragging\n    });\nconst Pane = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(({ isSelecting, selectionMode = SelectionMode.Full, panOnDrag, onSelectionStart, onSelectionEnd, onPaneClick, onPaneContextMenu, onPaneScroll, onPaneMouseEnter, onPaneMouseMove, onPaneMouseLeave, children })=>{\n    const container = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const store = useStoreApi();\n    const prevSelectedNodesCount = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const prevSelectedEdgesCount = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const containerBounds = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const { userSelectionActive, elementsSelectable, dragging } = useStore(selector$8, zustand_shallow__WEBPACK_IMPORTED_MODULE_5__.shallow);\n    const resetUserSelection = ()=>{\n        store.setState({\n            userSelectionActive: false,\n            userSelectionRect: null\n        });\n        prevSelectedNodesCount.current = 0;\n        prevSelectedEdgesCount.current = 0;\n    };\n    const onClick = (event)=>{\n        onPaneClick?.(event);\n        store.getState().resetSelectedElements();\n        store.setState({\n            nodesSelectionActive: false\n        });\n    };\n    const onContextMenu = (event)=>{\n        if (Array.isArray(panOnDrag) && panOnDrag?.includes(2)) {\n            event.preventDefault();\n            return;\n        }\n        onPaneContextMenu?.(event);\n    };\n    const onWheel = onPaneScroll ? (event)=>onPaneScroll(event) : undefined;\n    const onMouseDown = (event)=>{\n        const { resetSelectedElements, domNode } = store.getState();\n        containerBounds.current = domNode?.getBoundingClientRect();\n        if (!elementsSelectable || !isSelecting || event.button !== 0 || event.target !== container.current || !containerBounds.current) {\n            return;\n        }\n        const { x, y } = getEventPosition(event, containerBounds.current);\n        resetSelectedElements();\n        store.setState({\n            userSelectionRect: {\n                width: 0,\n                height: 0,\n                startX: x,\n                startY: y,\n                x,\n                y\n            }\n        });\n        onSelectionStart?.(event);\n    };\n    const onMouseMove = (event)=>{\n        const { userSelectionRect, nodeInternals, edges, transform, onNodesChange, onEdgesChange, nodeOrigin, getNodes } = store.getState();\n        if (!isSelecting || !containerBounds.current || !userSelectionRect) {\n            return;\n        }\n        store.setState({\n            userSelectionActive: true,\n            nodesSelectionActive: false\n        });\n        const mousePos = getEventPosition(event, containerBounds.current);\n        const startX = userSelectionRect.startX ?? 0;\n        const startY = userSelectionRect.startY ?? 0;\n        const nextUserSelectRect = {\n            ...userSelectionRect,\n            x: mousePos.x < startX ? mousePos.x : startX,\n            y: mousePos.y < startY ? mousePos.y : startY,\n            width: Math.abs(mousePos.x - startX),\n            height: Math.abs(mousePos.y - startY)\n        };\n        const nodes = getNodes();\n        const selectedNodes = getNodesInside(nodeInternals, nextUserSelectRect, transform, selectionMode === SelectionMode.Partial, true, nodeOrigin);\n        const selectedEdgeIds = getConnectedEdges(selectedNodes, edges).map((e)=>e.id);\n        const selectedNodeIds = selectedNodes.map((n)=>n.id);\n        if (prevSelectedNodesCount.current !== selectedNodeIds.length) {\n            prevSelectedNodesCount.current = selectedNodeIds.length;\n            const changes = getSelectionChanges(nodes, selectedNodeIds);\n            if (changes.length) {\n                onNodesChange?.(changes);\n            }\n        }\n        if (prevSelectedEdgesCount.current !== selectedEdgeIds.length) {\n            prevSelectedEdgesCount.current = selectedEdgeIds.length;\n            const changes = getSelectionChanges(edges, selectedEdgeIds);\n            if (changes.length) {\n                onEdgesChange?.(changes);\n            }\n        }\n        store.setState({\n            userSelectionRect: nextUserSelectRect\n        });\n    };\n    const onMouseUp = (event)=>{\n        if (event.button !== 0) {\n            return;\n        }\n        const { userSelectionRect } = store.getState();\n        // We only want to trigger click functions when in selection mode if\n        // the user did not move the mouse.\n        if (!userSelectionActive && userSelectionRect && event.target === container.current) {\n            onClick?.(event);\n        }\n        store.setState({\n            nodesSelectionActive: prevSelectedNodesCount.current > 0\n        });\n        resetUserSelection();\n        onSelectionEnd?.(event);\n    };\n    const onMouseLeave = (event)=>{\n        if (userSelectionActive) {\n            store.setState({\n                nodesSelectionActive: prevSelectedNodesCount.current > 0\n            });\n            onSelectionEnd?.(event);\n        }\n        resetUserSelection();\n    };\n    const hasActiveSelection = elementsSelectable && (isSelecting || userSelectionActive);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: (0,classcat__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n            \"react-flow__pane\",\n            {\n                dragging,\n                selection: isSelecting\n            }\n        ]),\n        onClick: hasActiveSelection ? undefined : wrapHandler(onClick, container),\n        onContextMenu: wrapHandler(onContextMenu, container),\n        onWheel: wrapHandler(onWheel, container),\n        onMouseEnter: hasActiveSelection ? undefined : onPaneMouseEnter,\n        onMouseDown: hasActiveSelection ? onMouseDown : undefined,\n        onMouseMove: hasActiveSelection ? onMouseMove : onPaneMouseMove,\n        onMouseUp: hasActiveSelection ? onMouseUp : undefined,\n        onMouseLeave: hasActiveSelection ? onMouseLeave : onPaneMouseLeave,\n        ref: container,\n        style: containerStyle\n    }, children, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(UserSelection, null));\n});\nPane.displayName = \"Pane\";\nfunction isParentSelected(node, nodeInternals) {\n    if (!node.parentNode) {\n        return false;\n    }\n    const parentNode = nodeInternals.get(node.parentNode);\n    if (!parentNode) {\n        return false;\n    }\n    if (parentNode.selected) {\n        return true;\n    }\n    return isParentSelected(parentNode, nodeInternals);\n}\nfunction hasSelector(target, selector, nodeRef) {\n    let current = target;\n    do {\n        if (current?.matches(selector)) return true;\n        if (current === nodeRef.current) return false;\n        current = current.parentElement;\n    }while (current);\n    return false;\n}\n// looks for all selected nodes and created a NodeDragItem for each of them\nfunction getDragItems(nodeInternals, nodesDraggable, mousePos, nodeId) {\n    return Array.from(nodeInternals.values()).filter((n)=>(n.selected || n.id === nodeId) && (!n.parentNode || !isParentSelected(n, nodeInternals)) && (n.draggable || nodesDraggable && typeof n.draggable === \"undefined\")).map((n)=>({\n            id: n.id,\n            position: n.position || {\n                x: 0,\n                y: 0\n            },\n            positionAbsolute: n.positionAbsolute || {\n                x: 0,\n                y: 0\n            },\n            distance: {\n                x: mousePos.x - (n.positionAbsolute?.x ?? 0),\n                y: mousePos.y - (n.positionAbsolute?.y ?? 0)\n            },\n            delta: {\n                x: 0,\n                y: 0\n            },\n            extent: n.extent,\n            parentNode: n.parentNode,\n            width: n.width,\n            height: n.height,\n            expandParent: n.expandParent\n        }));\n}\nfunction clampNodeExtent(node, extent) {\n    if (!extent || extent === \"parent\") {\n        return extent;\n    }\n    return [\n        extent[0],\n        [\n            extent[1][0] - (node.width || 0),\n            extent[1][1] - (node.height || 0)\n        ]\n    ];\n}\nfunction calcNextPosition(node, nextPosition, nodeInternals, nodeExtent, nodeOrigin = [\n    0,\n    0\n], onError) {\n    const clampedNodeExtent = clampNodeExtent(node, node.extent || nodeExtent);\n    let currentExtent = clampedNodeExtent;\n    if (node.extent === \"parent\" && !node.expandParent) {\n        if (node.parentNode && node.width && node.height) {\n            const parent = nodeInternals.get(node.parentNode);\n            const { x: parentX, y: parentY } = getNodePositionWithOrigin(parent, nodeOrigin).positionAbsolute;\n            currentExtent = parent && isNumeric(parentX) && isNumeric(parentY) && isNumeric(parent.width) && isNumeric(parent.height) ? [\n                [\n                    parentX + node.width * nodeOrigin[0],\n                    parentY + node.height * nodeOrigin[1]\n                ],\n                [\n                    parentX + parent.width - node.width + node.width * nodeOrigin[0],\n                    parentY + parent.height - node.height + node.height * nodeOrigin[1]\n                ]\n            ] : currentExtent;\n        } else {\n            onError?.(\"005\", errorMessages[\"error005\"]());\n            currentExtent = clampedNodeExtent;\n        }\n    } else if (node.extent && node.parentNode && node.extent !== \"parent\") {\n        const parent = nodeInternals.get(node.parentNode);\n        const { x: parentX, y: parentY } = getNodePositionWithOrigin(parent, nodeOrigin).positionAbsolute;\n        currentExtent = [\n            [\n                node.extent[0][0] + parentX,\n                node.extent[0][1] + parentY\n            ],\n            [\n                node.extent[1][0] + parentX,\n                node.extent[1][1] + parentY\n            ]\n        ];\n    }\n    let parentPosition = {\n        x: 0,\n        y: 0\n    };\n    if (node.parentNode) {\n        const parentNode = nodeInternals.get(node.parentNode);\n        parentPosition = getNodePositionWithOrigin(parentNode, nodeOrigin).positionAbsolute;\n    }\n    const positionAbsolute = currentExtent && currentExtent !== \"parent\" ? clampPosition(nextPosition, currentExtent) : nextPosition;\n    return {\n        position: {\n            x: positionAbsolute.x - parentPosition.x,\n            y: positionAbsolute.y - parentPosition.y\n        },\n        positionAbsolute\n    };\n}\n// returns two params:\n// 1. the dragged node (or the first of the list, if we are dragging a node selection)\n// 2. array of selected nodes (for multi selections)\nfunction getEventHandlerParams({ nodeId, dragItems, nodeInternals }) {\n    const extentedDragItems = dragItems.map((n)=>{\n        const node = nodeInternals.get(n.id);\n        return {\n            ...node,\n            position: n.position,\n            positionAbsolute: n.positionAbsolute\n        };\n    });\n    return [\n        nodeId ? extentedDragItems.find((n)=>n.id === nodeId) : extentedDragItems[0],\n        extentedDragItems\n    ];\n}\nconst getHandleBounds = (selector, nodeElement, zoom, nodeOrigin)=>{\n    const handles = nodeElement.querySelectorAll(selector);\n    if (!handles || !handles.length) {\n        return null;\n    }\n    const handlesArray = Array.from(handles);\n    const nodeBounds = nodeElement.getBoundingClientRect();\n    const nodeOffset = {\n        x: nodeBounds.width * nodeOrigin[0],\n        y: nodeBounds.height * nodeOrigin[1]\n    };\n    return handlesArray.map((handle)=>{\n        const handleBounds = handle.getBoundingClientRect();\n        return {\n            id: handle.getAttribute(\"data-handleid\"),\n            position: handle.getAttribute(\"data-handlepos\"),\n            x: (handleBounds.left - nodeBounds.left - nodeOffset.x) / zoom,\n            y: (handleBounds.top - nodeBounds.top - nodeOffset.y) / zoom,\n            ...getDimensions(handle)\n        };\n    });\n};\nfunction getMouseHandler(id, getState, handler) {\n    return handler === undefined ? handler : (event)=>{\n        const node = getState().nodeInternals.get(id);\n        if (node) {\n            handler(event, {\n                ...node\n            });\n        }\n    };\n}\n// this handler is called by\n// 1. the click handler when node is not draggable or selectNodesOnDrag = false\n// or\n// 2. the on drag start handler when node is draggable and selectNodesOnDrag = true\nfunction handleNodeClick({ id, store, unselect = false, nodeRef }) {\n    const { addSelectedNodes, unselectNodesAndEdges, multiSelectionActive, nodeInternals, onError } = store.getState();\n    const node = nodeInternals.get(id);\n    if (!node) {\n        onError?.(\"012\", errorMessages[\"error012\"](id));\n        return;\n    }\n    store.setState({\n        nodesSelectionActive: false\n    });\n    if (!node.selected) {\n        addSelectedNodes([\n            id\n        ]);\n    } else if (unselect || node.selected && multiSelectionActive) {\n        unselectNodesAndEdges({\n            nodes: [\n                node\n            ],\n            edges: []\n        });\n        requestAnimationFrame(()=>nodeRef?.current?.blur());\n    }\n}\nfunction useGetPointerPosition() {\n    const store = useStoreApi();\n    // returns the pointer position projected to the RF coordinate system\n    const getPointerPosition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ sourceEvent })=>{\n        const { transform, snapGrid, snapToGrid } = store.getState();\n        const x = sourceEvent.touches ? sourceEvent.touches[0].clientX : sourceEvent.clientX;\n        const y = sourceEvent.touches ? sourceEvent.touches[0].clientY : sourceEvent.clientY;\n        const pointerPos = {\n            x: (x - transform[0]) / transform[2],\n            y: (y - transform[1]) / transform[2]\n        };\n        // we need the snapped position in order to be able to skip unnecessary drag events\n        return {\n            xSnapped: snapToGrid ? snapGrid[0] * Math.round(pointerPos.x / snapGrid[0]) : pointerPos.x,\n            ySnapped: snapToGrid ? snapGrid[1] * Math.round(pointerPos.y / snapGrid[1]) : pointerPos.y,\n            ...pointerPos\n        };\n    }, []);\n    return getPointerPosition;\n}\nfunction wrapSelectionDragFunc(selectionFunc) {\n    return (event, _, nodes)=>selectionFunc?.(event, nodes);\n}\nfunction useDrag({ nodeRef, disabled = false, noDragClassName, handleSelector, nodeId, isSelectable, selectNodesOnDrag }) {\n    const store = useStoreApi();\n    const [dragging, setDragging] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const dragItems = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n    const lastPos = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        x: null,\n        y: null\n    });\n    const autoPanId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const containerBounds = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const mousePosition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        x: 0,\n        y: 0\n    });\n    const dragEvent = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const autoPanStarted = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const dragStarted = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const getPointerPosition = useGetPointerPosition();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (nodeRef?.current) {\n            const selection = (0,d3_selection__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(nodeRef.current);\n            const updateNodes = ({ x, y })=>{\n                const { nodeInternals, onNodeDrag, onSelectionDrag, updateNodePositions, nodeExtent, snapGrid, snapToGrid, nodeOrigin, onError } = store.getState();\n                lastPos.current = {\n                    x,\n                    y\n                };\n                let hasChange = false;\n                let nodesBox = {\n                    x: 0,\n                    y: 0,\n                    x2: 0,\n                    y2: 0\n                };\n                if (dragItems.current.length > 1 && nodeExtent) {\n                    const rect = getNodesBounds(dragItems.current, nodeOrigin);\n                    nodesBox = rectToBox(rect);\n                }\n                dragItems.current = dragItems.current.map((n)=>{\n                    const nextPosition = {\n                        x: x - n.distance.x,\n                        y: y - n.distance.y\n                    };\n                    if (snapToGrid) {\n                        nextPosition.x = snapGrid[0] * Math.round(nextPosition.x / snapGrid[0]);\n                        nextPosition.y = snapGrid[1] * Math.round(nextPosition.y / snapGrid[1]);\n                    }\n                    // if there is selection with multiple nodes and a node extent is set, we need to adjust the node extent for each node\n                    // based on its position so that the node stays at it's position relative to the selection.\n                    const adjustedNodeExtent = [\n                        [\n                            nodeExtent[0][0],\n                            nodeExtent[0][1]\n                        ],\n                        [\n                            nodeExtent[1][0],\n                            nodeExtent[1][1]\n                        ]\n                    ];\n                    if (dragItems.current.length > 1 && nodeExtent && !n.extent) {\n                        adjustedNodeExtent[0][0] = n.positionAbsolute.x - nodesBox.x + nodeExtent[0][0];\n                        adjustedNodeExtent[1][0] = n.positionAbsolute.x + (n.width ?? 0) - nodesBox.x2 + nodeExtent[1][0];\n                        adjustedNodeExtent[0][1] = n.positionAbsolute.y - nodesBox.y + nodeExtent[0][1];\n                        adjustedNodeExtent[1][1] = n.positionAbsolute.y + (n.height ?? 0) - nodesBox.y2 + nodeExtent[1][1];\n                    }\n                    const updatedPos = calcNextPosition(n, nextPosition, nodeInternals, adjustedNodeExtent, nodeOrigin, onError);\n                    // we want to make sure that we only fire a change event when there is a change\n                    hasChange = hasChange || n.position.x !== updatedPos.position.x || n.position.y !== updatedPos.position.y;\n                    n.position = updatedPos.position;\n                    n.positionAbsolute = updatedPos.positionAbsolute;\n                    return n;\n                });\n                if (!hasChange) {\n                    return;\n                }\n                updateNodePositions(dragItems.current, true, true);\n                setDragging(true);\n                const onDrag = nodeId ? onNodeDrag : wrapSelectionDragFunc(onSelectionDrag);\n                if (onDrag && dragEvent.current) {\n                    const [currentNode, nodes] = getEventHandlerParams({\n                        nodeId,\n                        dragItems: dragItems.current,\n                        nodeInternals\n                    });\n                    onDrag(dragEvent.current, currentNode, nodes);\n                }\n            };\n            const autoPan = ()=>{\n                if (!containerBounds.current) {\n                    return;\n                }\n                const [xMovement, yMovement] = calcAutoPan(mousePosition.current, containerBounds.current);\n                if (xMovement !== 0 || yMovement !== 0) {\n                    const { transform, panBy } = store.getState();\n                    lastPos.current.x = (lastPos.current.x ?? 0) - xMovement / transform[2];\n                    lastPos.current.y = (lastPos.current.y ?? 0) - yMovement / transform[2];\n                    if (panBy({\n                        x: xMovement,\n                        y: yMovement\n                    })) {\n                        updateNodes(lastPos.current);\n                    }\n                }\n                autoPanId.current = requestAnimationFrame(autoPan);\n            };\n            const startDrag = (event)=>{\n                const { nodeInternals, multiSelectionActive, nodesDraggable, unselectNodesAndEdges, onNodeDragStart, onSelectionDragStart } = store.getState();\n                dragStarted.current = true;\n                const onStart = nodeId ? onNodeDragStart : wrapSelectionDragFunc(onSelectionDragStart);\n                if ((!selectNodesOnDrag || !isSelectable) && !multiSelectionActive && nodeId) {\n                    if (!nodeInternals.get(nodeId)?.selected) {\n                        // we need to reset selected nodes when selectNodesOnDrag=false\n                        unselectNodesAndEdges();\n                    }\n                }\n                if (nodeId && isSelectable && selectNodesOnDrag) {\n                    handleNodeClick({\n                        id: nodeId,\n                        store,\n                        nodeRef: nodeRef\n                    });\n                }\n                const pointerPos = getPointerPosition(event);\n                lastPos.current = pointerPos;\n                dragItems.current = getDragItems(nodeInternals, nodesDraggable, pointerPos, nodeId);\n                if (onStart && dragItems.current) {\n                    const [currentNode, nodes] = getEventHandlerParams({\n                        nodeId,\n                        dragItems: dragItems.current,\n                        nodeInternals\n                    });\n                    onStart(event.sourceEvent, currentNode, nodes);\n                }\n            };\n            if (disabled) {\n                selection.on(\".drag\", null);\n            } else {\n                const dragHandler = (0,d3_drag__WEBPACK_IMPORTED_MODULE_8__[\"default\"])().on(\"start\", (event)=>{\n                    const { domNode, nodeDragThreshold } = store.getState();\n                    if (nodeDragThreshold === 0) {\n                        startDrag(event);\n                    }\n                    const pointerPos = getPointerPosition(event);\n                    lastPos.current = pointerPos;\n                    containerBounds.current = domNode?.getBoundingClientRect() || null;\n                    mousePosition.current = getEventPosition(event.sourceEvent, containerBounds.current);\n                }).on(\"drag\", (event)=>{\n                    const pointerPos = getPointerPosition(event);\n                    const { autoPanOnNodeDrag, nodeDragThreshold } = store.getState();\n                    if (!autoPanStarted.current && dragStarted.current && autoPanOnNodeDrag) {\n                        autoPanStarted.current = true;\n                        autoPan();\n                    }\n                    if (!dragStarted.current) {\n                        const x = pointerPos.xSnapped - (lastPos?.current?.x ?? 0);\n                        const y = pointerPos.ySnapped - (lastPos?.current?.y ?? 0);\n                        const distance = Math.sqrt(x * x + y * y);\n                        if (distance > nodeDragThreshold) {\n                            startDrag(event);\n                        }\n                    }\n                    // skip events without movement\n                    if ((lastPos.current.x !== pointerPos.xSnapped || lastPos.current.y !== pointerPos.ySnapped) && dragItems.current && dragStarted.current) {\n                        dragEvent.current = event.sourceEvent;\n                        mousePosition.current = getEventPosition(event.sourceEvent, containerBounds.current);\n                        updateNodes(pointerPos);\n                    }\n                }).on(\"end\", (event)=>{\n                    if (!dragStarted.current) {\n                        return;\n                    }\n                    setDragging(false);\n                    autoPanStarted.current = false;\n                    dragStarted.current = false;\n                    cancelAnimationFrame(autoPanId.current);\n                    if (dragItems.current) {\n                        const { updateNodePositions, nodeInternals, onNodeDragStop, onSelectionDragStop } = store.getState();\n                        const onStop = nodeId ? onNodeDragStop : wrapSelectionDragFunc(onSelectionDragStop);\n                        updateNodePositions(dragItems.current, false, false);\n                        if (onStop) {\n                            const [currentNode, nodes] = getEventHandlerParams({\n                                nodeId,\n                                dragItems: dragItems.current,\n                                nodeInternals\n                            });\n                            onStop(event.sourceEvent, currentNode, nodes);\n                        }\n                    }\n                }).filter((event)=>{\n                    const target = event.target;\n                    const isDraggable = !event.button && (!noDragClassName || !hasSelector(target, `.${noDragClassName}`, nodeRef)) && (!handleSelector || hasSelector(target, handleSelector, nodeRef));\n                    return isDraggable;\n                });\n                selection.call(dragHandler);\n                return ()=>{\n                    selection.on(\".drag\", null);\n                };\n            }\n        }\n    }, [\n        nodeRef,\n        disabled,\n        noDragClassName,\n        handleSelector,\n        isSelectable,\n        store,\n        nodeId,\n        selectNodesOnDrag,\n        getPointerPosition\n    ]);\n    return dragging;\n}\nfunction useUpdateNodePositions() {\n    const store = useStoreApi();\n    const updatePositions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((params)=>{\n        const { nodeInternals, nodeExtent, updateNodePositions, getNodes, snapToGrid, snapGrid, onError, nodesDraggable } = store.getState();\n        const selectedNodes = getNodes().filter((n)=>n.selected && (n.draggable || nodesDraggable && typeof n.draggable === \"undefined\"));\n        // by default a node moves 5px on each key press, or 20px if shift is pressed\n        // if snap grid is enabled, we use that for the velocity.\n        const xVelo = snapToGrid ? snapGrid[0] : 5;\n        const yVelo = snapToGrid ? snapGrid[1] : 5;\n        const factor = params.isShiftPressed ? 4 : 1;\n        const positionDiffX = params.x * xVelo * factor;\n        const positionDiffY = params.y * yVelo * factor;\n        const nodeUpdates = selectedNodes.map((n)=>{\n            if (n.positionAbsolute) {\n                const nextPosition = {\n                    x: n.positionAbsolute.x + positionDiffX,\n                    y: n.positionAbsolute.y + positionDiffY\n                };\n                if (snapToGrid) {\n                    nextPosition.x = snapGrid[0] * Math.round(nextPosition.x / snapGrid[0]);\n                    nextPosition.y = snapGrid[1] * Math.round(nextPosition.y / snapGrid[1]);\n                }\n                const { positionAbsolute, position } = calcNextPosition(n, nextPosition, nodeInternals, nodeExtent, undefined, onError);\n                n.position = position;\n                n.positionAbsolute = positionAbsolute;\n            }\n            return n;\n        });\n        updateNodePositions(nodeUpdates, true, false);\n    }, []);\n    return updatePositions;\n}\nconst arrowKeyDiffs = {\n    ArrowUp: {\n        x: 0,\n        y: -1\n    },\n    ArrowDown: {\n        x: 0,\n        y: 1\n    },\n    ArrowLeft: {\n        x: -1,\n        y: 0\n    },\n    ArrowRight: {\n        x: 1,\n        y: 0\n    }\n};\nvar wrapNode = (NodeComponent)=>{\n    const NodeWrapper = ({ id, type, data, xPos, yPos, xPosOrigin, yPosOrigin, selected, onClick, onMouseEnter, onMouseMove, onMouseLeave, onContextMenu, onDoubleClick, style, className, isDraggable, isSelectable, isConnectable, isFocusable, selectNodesOnDrag, sourcePosition, targetPosition, hidden, resizeObserver, dragHandle, zIndex, isParent, noDragClassName, noPanClassName, initialized, disableKeyboardA11y, ariaLabel, rfId })=>{\n        const store = useStoreApi();\n        const nodeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n        const prevSourcePosition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(sourcePosition);\n        const prevTargetPosition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(targetPosition);\n        const prevType = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(type);\n        const hasPointerEvents = isSelectable || isDraggable || onClick || onMouseEnter || onMouseMove || onMouseLeave;\n        const updatePositions = useUpdateNodePositions();\n        const onMouseEnterHandler = getMouseHandler(id, store.getState, onMouseEnter);\n        const onMouseMoveHandler = getMouseHandler(id, store.getState, onMouseMove);\n        const onMouseLeaveHandler = getMouseHandler(id, store.getState, onMouseLeave);\n        const onContextMenuHandler = getMouseHandler(id, store.getState, onContextMenu);\n        const onDoubleClickHandler = getMouseHandler(id, store.getState, onDoubleClick);\n        const onSelectNodeHandler = (event)=>{\n            const { nodeDragThreshold } = store.getState();\n            if (isSelectable && (!selectNodesOnDrag || !isDraggable || nodeDragThreshold > 0)) {\n                // this handler gets called within the drag start event when selectNodesOnDrag=true\n                handleNodeClick({\n                    id,\n                    store,\n                    nodeRef\n                });\n            }\n            if (onClick) {\n                const node = store.getState().nodeInternals.get(id);\n                if (node) {\n                    onClick(event, {\n                        ...node\n                    });\n                }\n            }\n        };\n        const onKeyDown = (event)=>{\n            if (isInputDOMNode(event)) {\n                return;\n            }\n            if (elementSelectionKeys.includes(event.key) && isSelectable) {\n                const unselect = event.key === \"Escape\";\n                handleNodeClick({\n                    id,\n                    store,\n                    unselect,\n                    nodeRef\n                });\n            } else if (!disableKeyboardA11y && isDraggable && selected && Object.prototype.hasOwnProperty.call(arrowKeyDiffs, event.key)) {\n                store.setState({\n                    ariaLiveMessage: `Moved selected node ${event.key.replace(\"Arrow\", \"\").toLowerCase()}. New position, x: ${~~xPos}, y: ${~~yPos}`\n                });\n                updatePositions({\n                    x: arrowKeyDiffs[event.key].x,\n                    y: arrowKeyDiffs[event.key].y,\n                    isShiftPressed: event.shiftKey\n                });\n            }\n        };\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            if (nodeRef.current && !hidden) {\n                const currNode = nodeRef.current;\n                resizeObserver?.observe(currNode);\n                return ()=>resizeObserver?.unobserve(currNode);\n            }\n        }, [\n            hidden\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            // when the user programmatically changes the source or handle position, we re-initialize the node\n            const typeChanged = prevType.current !== type;\n            const sourcePosChanged = prevSourcePosition.current !== sourcePosition;\n            const targetPosChanged = prevTargetPosition.current !== targetPosition;\n            if (nodeRef.current && (typeChanged || sourcePosChanged || targetPosChanged)) {\n                if (typeChanged) {\n                    prevType.current = type;\n                }\n                if (sourcePosChanged) {\n                    prevSourcePosition.current = sourcePosition;\n                }\n                if (targetPosChanged) {\n                    prevTargetPosition.current = targetPosition;\n                }\n                store.getState().updateNodeDimensions([\n                    {\n                        id,\n                        nodeElement: nodeRef.current,\n                        forceUpdate: true\n                    }\n                ]);\n            }\n        }, [\n            id,\n            type,\n            sourcePosition,\n            targetPosition\n        ]);\n        const dragging = useDrag({\n            nodeRef,\n            disabled: hidden || !isDraggable,\n            noDragClassName,\n            handleSelector: dragHandle,\n            nodeId: id,\n            isSelectable,\n            selectNodesOnDrag\n        });\n        if (hidden) {\n            return null;\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: (0,classcat__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n                \"react-flow__node\",\n                `react-flow__node-${type}`,\n                {\n                    // this is overwritable by passing `nopan` as a class name\n                    [noPanClassName]: isDraggable\n                },\n                className,\n                {\n                    selected,\n                    selectable: isSelectable,\n                    parent: isParent,\n                    dragging\n                }\n            ]),\n            ref: nodeRef,\n            style: {\n                zIndex,\n                transform: `translate(${xPosOrigin}px,${yPosOrigin}px)`,\n                pointerEvents: hasPointerEvents ? \"all\" : \"none\",\n                visibility: initialized ? \"visible\" : \"hidden\",\n                ...style\n            },\n            \"data-id\": id,\n            \"data-testid\": `rf__node-${id}`,\n            onMouseEnter: onMouseEnterHandler,\n            onMouseMove: onMouseMoveHandler,\n            onMouseLeave: onMouseLeaveHandler,\n            onContextMenu: onContextMenuHandler,\n            onClick: onSelectNodeHandler,\n            onDoubleClick: onDoubleClickHandler,\n            onKeyDown: isFocusable ? onKeyDown : undefined,\n            tabIndex: isFocusable ? 0 : undefined,\n            role: isFocusable ? \"button\" : undefined,\n            \"aria-describedby\": disableKeyboardA11y ? undefined : `${ARIA_NODE_DESC_KEY}-${rfId}`,\n            \"aria-label\": ariaLabel\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Provider, {\n            value: id\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(NodeComponent, {\n            id: id,\n            data: data,\n            type: type,\n            xPos: xPos,\n            yPos: yPos,\n            selected: selected,\n            isConnectable: isConnectable,\n            sourcePosition: sourcePosition,\n            targetPosition: targetPosition,\n            dragging: dragging,\n            dragHandle: dragHandle,\n            zIndex: zIndex\n        })));\n    };\n    NodeWrapper.displayName = \"NodeWrapper\";\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(NodeWrapper);\n};\n/**\n * The nodes selection rectangle gets displayed when a user\n * made a selection with on or several nodes\n */ const selector$7 = (s)=>{\n    const selectedNodes = s.getNodes().filter((n)=>n.selected);\n    return {\n        ...getNodesBounds(selectedNodes, s.nodeOrigin),\n        transformString: `translate(${s.transform[0]}px,${s.transform[1]}px) scale(${s.transform[2]})`,\n        userSelectionActive: s.userSelectionActive\n    };\n};\nfunction NodesSelection({ onSelectionContextMenu, noPanClassName, disableKeyboardA11y }) {\n    const store = useStoreApi();\n    const { width, height, x: left, y: top, transformString, userSelectionActive } = useStore(selector$7, zustand_shallow__WEBPACK_IMPORTED_MODULE_5__.shallow);\n    const updatePositions = useUpdateNodePositions();\n    const nodeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!disableKeyboardA11y) {\n            nodeRef.current?.focus({\n                preventScroll: true\n            });\n        }\n    }, [\n        disableKeyboardA11y\n    ]);\n    useDrag({\n        nodeRef\n    });\n    if (userSelectionActive || !width || !height) {\n        return null;\n    }\n    const onContextMenu = onSelectionContextMenu ? (event)=>{\n        const selectedNodes = store.getState().getNodes().filter((n)=>n.selected);\n        onSelectionContextMenu(event, selectedNodes);\n    } : undefined;\n    const onKeyDown = (event)=>{\n        if (Object.prototype.hasOwnProperty.call(arrowKeyDiffs, event.key)) {\n            updatePositions({\n                x: arrowKeyDiffs[event.key].x,\n                y: arrowKeyDiffs[event.key].y,\n                isShiftPressed: event.shiftKey\n            });\n        }\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: (0,classcat__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n            \"react-flow__nodesselection\",\n            \"react-flow__container\",\n            noPanClassName\n        ]),\n        style: {\n            transform: transformString\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: nodeRef,\n        className: \"react-flow__nodesselection-rect\",\n        onContextMenu: onContextMenu,\n        tabIndex: disableKeyboardA11y ? undefined : -1,\n        onKeyDown: disableKeyboardA11y ? undefined : onKeyDown,\n        style: {\n            width,\n            height,\n            top,\n            left\n        }\n    }));\n}\nvar NodesSelection$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(NodesSelection);\nconst selector$6 = (s)=>s.nodesSelectionActive;\nconst FlowRenderer = ({ children, onPaneClick, onPaneMouseEnter, onPaneMouseMove, onPaneMouseLeave, onPaneContextMenu, onPaneScroll, deleteKeyCode, onMove, onMoveStart, onMoveEnd, selectionKeyCode, selectionOnDrag, selectionMode, onSelectionStart, onSelectionEnd, multiSelectionKeyCode, panActivationKeyCode, zoomActivationKeyCode, elementsSelectable, zoomOnScroll, zoomOnPinch, panOnScroll: _panOnScroll, panOnScrollSpeed, panOnScrollMode, zoomOnDoubleClick, panOnDrag: _panOnDrag, defaultViewport, translateExtent, minZoom, maxZoom, preventScrolling, onSelectionContextMenu, noWheelClassName, noPanClassName, disableKeyboardA11y })=>{\n    const nodesSelectionActive = useStore(selector$6);\n    const selectionKeyPressed = useKeyPress(selectionKeyCode);\n    const panActivationKeyPressed = useKeyPress(panActivationKeyCode);\n    const panOnDrag = panActivationKeyPressed || _panOnDrag;\n    const panOnScroll = panActivationKeyPressed || _panOnScroll;\n    const isSelecting = selectionKeyPressed || selectionOnDrag && panOnDrag !== true;\n    useGlobalKeyHandler({\n        deleteKeyCode,\n        multiSelectionKeyCode\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ZoomPane, {\n        onMove: onMove,\n        onMoveStart: onMoveStart,\n        onMoveEnd: onMoveEnd,\n        onPaneContextMenu: onPaneContextMenu,\n        elementsSelectable: elementsSelectable,\n        zoomOnScroll: zoomOnScroll,\n        zoomOnPinch: zoomOnPinch,\n        panOnScroll: panOnScroll,\n        panOnScrollSpeed: panOnScrollSpeed,\n        panOnScrollMode: panOnScrollMode,\n        zoomOnDoubleClick: zoomOnDoubleClick,\n        panOnDrag: !selectionKeyPressed && panOnDrag,\n        defaultViewport: defaultViewport,\n        translateExtent: translateExtent,\n        minZoom: minZoom,\n        maxZoom: maxZoom,\n        zoomActivationKeyCode: zoomActivationKeyCode,\n        preventScrolling: preventScrolling,\n        noWheelClassName: noWheelClassName,\n        noPanClassName: noPanClassName\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Pane, {\n        onSelectionStart: onSelectionStart,\n        onSelectionEnd: onSelectionEnd,\n        onPaneClick: onPaneClick,\n        onPaneMouseEnter: onPaneMouseEnter,\n        onPaneMouseMove: onPaneMouseMove,\n        onPaneMouseLeave: onPaneMouseLeave,\n        onPaneContextMenu: onPaneContextMenu,\n        onPaneScroll: onPaneScroll,\n        panOnDrag: panOnDrag,\n        isSelecting: !!isSelecting,\n        selectionMode: selectionMode\n    }, children, nodesSelectionActive && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(NodesSelection$1, {\n        onSelectionContextMenu: onSelectionContextMenu,\n        noPanClassName: noPanClassName,\n        disableKeyboardA11y: disableKeyboardA11y\n    })));\n};\nFlowRenderer.displayName = \"FlowRenderer\";\nvar FlowRenderer$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(FlowRenderer);\nfunction useVisibleNodes(onlyRenderVisible) {\n    const nodes = useStore((0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((s)=>onlyRenderVisible ? getNodesInside(s.nodeInternals, {\n            x: 0,\n            y: 0,\n            width: s.width,\n            height: s.height\n        }, s.transform, true) : s.getNodes(), [\n        onlyRenderVisible\n    ]));\n    return nodes;\n}\nfunction createNodeTypes(nodeTypes) {\n    const standardTypes = {\n        input: wrapNode(nodeTypes.input || InputNode$1),\n        default: wrapNode(nodeTypes.default || DefaultNode$1),\n        output: wrapNode(nodeTypes.output || OutputNode$1),\n        group: wrapNode(nodeTypes.group || GroupNode)\n    };\n    const wrappedTypes = {};\n    const specialTypes = Object.keys(nodeTypes).filter((k)=>![\n            \"input\",\n            \"default\",\n            \"output\",\n            \"group\"\n        ].includes(k)).reduce((res, key)=>{\n        res[key] = wrapNode(nodeTypes[key] || DefaultNode$1);\n        return res;\n    }, wrappedTypes);\n    return {\n        ...standardTypes,\n        ...specialTypes\n    };\n}\nconst getPositionWithOrigin = ({ x, y, width, height, origin })=>{\n    if (!width || !height) {\n        return {\n            x,\n            y\n        };\n    }\n    if (origin[0] < 0 || origin[1] < 0 || origin[0] > 1 || origin[1] > 1) {\n        return {\n            x,\n            y\n        };\n    }\n    return {\n        x: x - width * origin[0],\n        y: y - height * origin[1]\n    };\n};\nconst selector$5 = (s)=>({\n        nodesDraggable: s.nodesDraggable,\n        nodesConnectable: s.nodesConnectable,\n        nodesFocusable: s.nodesFocusable,\n        elementsSelectable: s.elementsSelectable,\n        updateNodeDimensions: s.updateNodeDimensions,\n        onError: s.onError\n    });\nconst NodeRenderer = (props)=>{\n    const { nodesDraggable, nodesConnectable, nodesFocusable, elementsSelectable, updateNodeDimensions, onError } = useStore(selector$5, zustand_shallow__WEBPACK_IMPORTED_MODULE_5__.shallow);\n    const nodes = useVisibleNodes(props.onlyRenderVisibleElements);\n    const resizeObserverRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const resizeObserver = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (typeof ResizeObserver === \"undefined\") {\n            return null;\n        }\n        const observer = new ResizeObserver((entries)=>{\n            const updates = entries.map((entry)=>({\n                    id: entry.target.getAttribute(\"data-id\"),\n                    nodeElement: entry.target,\n                    forceUpdate: true\n                }));\n            updateNodeDimensions(updates);\n        });\n        resizeObserverRef.current = observer;\n        return observer;\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        return ()=>{\n            resizeObserverRef?.current?.disconnect();\n        };\n    }, []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"react-flow__nodes\",\n        style: containerStyle\n    }, nodes.map((node)=>{\n        let nodeType = node.type || \"default\";\n        if (!props.nodeTypes[nodeType]) {\n            onError?.(\"003\", errorMessages[\"error003\"](nodeType));\n            nodeType = \"default\";\n        }\n        const NodeComponent = props.nodeTypes[nodeType] || props.nodeTypes.default;\n        const isDraggable = !!(node.draggable || nodesDraggable && typeof node.draggable === \"undefined\");\n        const isSelectable = !!(node.selectable || elementsSelectable && typeof node.selectable === \"undefined\");\n        const isConnectable = !!(node.connectable || nodesConnectable && typeof node.connectable === \"undefined\");\n        const isFocusable = !!(node.focusable || nodesFocusable && typeof node.focusable === \"undefined\");\n        const clampedPosition = props.nodeExtent ? clampPosition(node.positionAbsolute, props.nodeExtent) : node.positionAbsolute;\n        const posX = clampedPosition?.x ?? 0;\n        const posY = clampedPosition?.y ?? 0;\n        const posOrigin = getPositionWithOrigin({\n            x: posX,\n            y: posY,\n            width: node.width ?? 0,\n            height: node.height ?? 0,\n            origin: props.nodeOrigin\n        });\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(NodeComponent, {\n            key: node.id,\n            id: node.id,\n            className: node.className,\n            style: node.style,\n            type: nodeType,\n            data: node.data,\n            sourcePosition: node.sourcePosition || Position.Bottom,\n            targetPosition: node.targetPosition || Position.Top,\n            hidden: node.hidden,\n            xPos: posX,\n            yPos: posY,\n            xPosOrigin: posOrigin.x,\n            yPosOrigin: posOrigin.y,\n            selectNodesOnDrag: props.selectNodesOnDrag,\n            onClick: props.onNodeClick,\n            onMouseEnter: props.onNodeMouseEnter,\n            onMouseMove: props.onNodeMouseMove,\n            onMouseLeave: props.onNodeMouseLeave,\n            onContextMenu: props.onNodeContextMenu,\n            onDoubleClick: props.onNodeDoubleClick,\n            selected: !!node.selected,\n            isDraggable: isDraggable,\n            isSelectable: isSelectable,\n            isConnectable: isConnectable,\n            isFocusable: isFocusable,\n            resizeObserver: resizeObserver,\n            dragHandle: node.dragHandle,\n            zIndex: node[internalsSymbol]?.z ?? 0,\n            isParent: !!node[internalsSymbol]?.isParent,\n            noDragClassName: props.noDragClassName,\n            noPanClassName: props.noPanClassName,\n            initialized: !!node.width && !!node.height,\n            rfId: props.rfId,\n            disableKeyboardA11y: props.disableKeyboardA11y,\n            ariaLabel: node.ariaLabel\n        });\n    }));\n};\nNodeRenderer.displayName = \"NodeRenderer\";\nvar NodeRenderer$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(NodeRenderer);\nconst shiftX = (x, shift, position)=>{\n    if (position === Position.Left) return x - shift;\n    if (position === Position.Right) return x + shift;\n    return x;\n};\nconst shiftY = (y, shift, position)=>{\n    if (position === Position.Top) return y - shift;\n    if (position === Position.Bottom) return y + shift;\n    return y;\n};\nconst EdgeUpdaterClassName = \"react-flow__edgeupdater\";\nconst EdgeAnchor = ({ position, centerX, centerY, radius = 10, onMouseDown, onMouseEnter, onMouseOut, type })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n        onMouseDown: onMouseDown,\n        onMouseEnter: onMouseEnter,\n        onMouseOut: onMouseOut,\n        className: (0,classcat__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n            EdgeUpdaterClassName,\n            `${EdgeUpdaterClassName}-${type}`\n        ]),\n        cx: shiftX(centerX, radius, position),\n        cy: shiftY(centerY, radius, position),\n        r: radius,\n        stroke: \"transparent\",\n        fill: \"transparent\"\n    });\nconst alwaysValidConnection = ()=>true;\nvar wrapEdge = (EdgeComponent)=>{\n    const EdgeWrapper = ({ id, className, type, data, onClick, onEdgeDoubleClick, selected, animated, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style, source, target, sourceX, sourceY, targetX, targetY, sourcePosition, targetPosition, elementsSelectable, hidden, sourceHandleId, targetHandleId, onContextMenu, onMouseEnter, onMouseMove, onMouseLeave, edgeUpdaterRadius, onEdgeUpdate, onEdgeUpdateStart, onEdgeUpdateEnd, markerEnd, markerStart, rfId, ariaLabel, isFocusable, isUpdatable, pathOptions, interactionWidth })=>{\n        const edgeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n        const [updateHover, setUpdateHover] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n        const [updating, setUpdating] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n        const store = useStoreApi();\n        const markerStartUrl = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>`url(#${getMarkerId(markerStart, rfId)})`, [\n            markerStart,\n            rfId\n        ]);\n        const markerEndUrl = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>`url(#${getMarkerId(markerEnd, rfId)})`, [\n            markerEnd,\n            rfId\n        ]);\n        if (hidden) {\n            return null;\n        }\n        const onEdgeClick = (event)=>{\n            const { edges, addSelectedEdges, unselectNodesAndEdges, multiSelectionActive } = store.getState();\n            const edge = edges.find((e)=>e.id === id);\n            if (!edge) {\n                return;\n            }\n            if (elementsSelectable) {\n                store.setState({\n                    nodesSelectionActive: false\n                });\n                if (edge.selected && multiSelectionActive) {\n                    unselectNodesAndEdges({\n                        nodes: [],\n                        edges: [\n                            edge\n                        ]\n                    });\n                    edgeRef.current?.blur();\n                } else {\n                    addSelectedEdges([\n                        id\n                    ]);\n                }\n            }\n            if (onClick) {\n                onClick(event, edge);\n            }\n        };\n        const onEdgeDoubleClickHandler = getMouseHandler$1(id, store.getState, onEdgeDoubleClick);\n        const onEdgeContextMenu = getMouseHandler$1(id, store.getState, onContextMenu);\n        const onEdgeMouseEnter = getMouseHandler$1(id, store.getState, onMouseEnter);\n        const onEdgeMouseMove = getMouseHandler$1(id, store.getState, onMouseMove);\n        const onEdgeMouseLeave = getMouseHandler$1(id, store.getState, onMouseLeave);\n        const handleEdgeUpdater = (event, isSourceHandle)=>{\n            // avoid triggering edge updater if mouse btn is not left\n            if (event.button !== 0) {\n                return;\n            }\n            const { edges, isValidConnection: isValidConnectionStore } = store.getState();\n            const nodeId = isSourceHandle ? target : source;\n            const handleId = (isSourceHandle ? targetHandleId : sourceHandleId) || null;\n            const handleType = isSourceHandle ? \"target\" : \"source\";\n            const isValidConnection = isValidConnectionStore || alwaysValidConnection;\n            const isTarget = isSourceHandle;\n            const edge = edges.find((e)=>e.id === id);\n            setUpdating(true);\n            onEdgeUpdateStart?.(event, edge, handleType);\n            const _onEdgeUpdateEnd = (evt)=>{\n                setUpdating(false);\n                onEdgeUpdateEnd?.(evt, edge, handleType);\n            };\n            const onConnectEdge = (connection)=>onEdgeUpdate?.(edge, connection);\n            handlePointerDown({\n                event,\n                handleId,\n                nodeId,\n                onConnect: onConnectEdge,\n                isTarget,\n                getState: store.getState,\n                setState: store.setState,\n                isValidConnection,\n                edgeUpdaterType: handleType,\n                onEdgeUpdateEnd: _onEdgeUpdateEnd\n            });\n        };\n        const onEdgeUpdaterSourceMouseDown = (event)=>handleEdgeUpdater(event, true);\n        const onEdgeUpdaterTargetMouseDown = (event)=>handleEdgeUpdater(event, false);\n        const onEdgeUpdaterMouseEnter = ()=>setUpdateHover(true);\n        const onEdgeUpdaterMouseOut = ()=>setUpdateHover(false);\n        const inactive = !elementsSelectable && !onClick;\n        const onKeyDown = (event)=>{\n            if (elementSelectionKeys.includes(event.key) && elementsSelectable) {\n                const { unselectNodesAndEdges, addSelectedEdges, edges } = store.getState();\n                const unselect = event.key === \"Escape\";\n                if (unselect) {\n                    edgeRef.current?.blur();\n                    unselectNodesAndEdges({\n                        edges: [\n                            edges.find((e)=>e.id === id)\n                        ]\n                    });\n                } else {\n                    addSelectedEdges([\n                        id\n                    ]);\n                }\n            }\n        };\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", {\n            className: (0,classcat__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n                \"react-flow__edge\",\n                `react-flow__edge-${type}`,\n                className,\n                {\n                    selected,\n                    animated,\n                    inactive,\n                    updating: updateHover\n                }\n            ]),\n            onClick: onEdgeClick,\n            onDoubleClick: onEdgeDoubleClickHandler,\n            onContextMenu: onEdgeContextMenu,\n            onMouseEnter: onEdgeMouseEnter,\n            onMouseMove: onEdgeMouseMove,\n            onMouseLeave: onEdgeMouseLeave,\n            onKeyDown: isFocusable ? onKeyDown : undefined,\n            tabIndex: isFocusable ? 0 : undefined,\n            role: isFocusable ? \"button\" : \"img\",\n            \"data-testid\": `rf__edge-${id}`,\n            \"aria-label\": ariaLabel === null ? undefined : ariaLabel ? ariaLabel : `Edge from ${source} to ${target}`,\n            \"aria-describedby\": isFocusable ? `${ARIA_EDGE_DESC_KEY}-${rfId}` : undefined,\n            ref: edgeRef\n        }, !updating && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(EdgeComponent, {\n            id: id,\n            source: source,\n            target: target,\n            selected: selected,\n            animated: animated,\n            label: label,\n            labelStyle: labelStyle,\n            labelShowBg: labelShowBg,\n            labelBgStyle: labelBgStyle,\n            labelBgPadding: labelBgPadding,\n            labelBgBorderRadius: labelBgBorderRadius,\n            data: data,\n            style: style,\n            sourceX: sourceX,\n            sourceY: sourceY,\n            targetX: targetX,\n            targetY: targetY,\n            sourcePosition: sourcePosition,\n            targetPosition: targetPosition,\n            sourceHandleId: sourceHandleId,\n            targetHandleId: targetHandleId,\n            markerStart: markerStartUrl,\n            markerEnd: markerEndUrl,\n            pathOptions: pathOptions,\n            interactionWidth: interactionWidth\n        }), isUpdatable && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (isUpdatable === \"source\" || isUpdatable === true) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(EdgeAnchor, {\n            position: sourcePosition,\n            centerX: sourceX,\n            centerY: sourceY,\n            radius: edgeUpdaterRadius,\n            onMouseDown: onEdgeUpdaterSourceMouseDown,\n            onMouseEnter: onEdgeUpdaterMouseEnter,\n            onMouseOut: onEdgeUpdaterMouseOut,\n            type: \"source\"\n        }), (isUpdatable === \"target\" || isUpdatable === true) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(EdgeAnchor, {\n            position: targetPosition,\n            centerX: targetX,\n            centerY: targetY,\n            radius: edgeUpdaterRadius,\n            onMouseDown: onEdgeUpdaterTargetMouseDown,\n            onMouseEnter: onEdgeUpdaterMouseEnter,\n            onMouseOut: onEdgeUpdaterMouseOut,\n            type: \"target\"\n        })));\n    };\n    EdgeWrapper.displayName = \"EdgeWrapper\";\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(EdgeWrapper);\n};\nfunction createEdgeTypes(edgeTypes) {\n    const standardTypes = {\n        default: wrapEdge(edgeTypes.default || BezierEdge),\n        straight: wrapEdge(edgeTypes.bezier || StraightEdge),\n        step: wrapEdge(edgeTypes.step || StepEdge),\n        smoothstep: wrapEdge(edgeTypes.step || SmoothStepEdge),\n        simplebezier: wrapEdge(edgeTypes.simplebezier || SimpleBezierEdge)\n    };\n    const wrappedTypes = {};\n    const specialTypes = Object.keys(edgeTypes).filter((k)=>![\n            \"default\",\n            \"bezier\"\n        ].includes(k)).reduce((res, key)=>{\n        res[key] = wrapEdge(edgeTypes[key] || BezierEdge);\n        return res;\n    }, wrappedTypes);\n    return {\n        ...standardTypes,\n        ...specialTypes\n    };\n}\nfunction getHandlePosition(position, nodeRect, handle = null) {\n    const x = (handle?.x || 0) + nodeRect.x;\n    const y = (handle?.y || 0) + nodeRect.y;\n    const width = handle?.width || nodeRect.width;\n    const height = handle?.height || nodeRect.height;\n    switch(position){\n        case Position.Top:\n            return {\n                x: x + width / 2,\n                y\n            };\n        case Position.Right:\n            return {\n                x: x + width,\n                y: y + height / 2\n            };\n        case Position.Bottom:\n            return {\n                x: x + width / 2,\n                y: y + height\n            };\n        case Position.Left:\n            return {\n                x,\n                y: y + height / 2\n            };\n    }\n}\nfunction getHandle(bounds, handleId) {\n    if (!bounds) {\n        return null;\n    }\n    if (bounds.length === 1 || !handleId) {\n        return bounds[0];\n    } else if (handleId) {\n        return bounds.find((d)=>d.id === handleId) || null;\n    }\n    return null;\n}\nconst getEdgePositions = (sourceNodeRect, sourceHandle, sourcePosition, targetNodeRect, targetHandle, targetPosition)=>{\n    const sourceHandlePos = getHandlePosition(sourcePosition, sourceNodeRect, sourceHandle);\n    const targetHandlePos = getHandlePosition(targetPosition, targetNodeRect, targetHandle);\n    return {\n        sourceX: sourceHandlePos.x,\n        sourceY: sourceHandlePos.y,\n        targetX: targetHandlePos.x,\n        targetY: targetHandlePos.y\n    };\n};\nfunction isEdgeVisible({ sourcePos, targetPos, sourceWidth, sourceHeight, targetWidth, targetHeight, width, height, transform }) {\n    const edgeBox = {\n        x: Math.min(sourcePos.x, targetPos.x),\n        y: Math.min(sourcePos.y, targetPos.y),\n        x2: Math.max(sourcePos.x + sourceWidth, targetPos.x + targetWidth),\n        y2: Math.max(sourcePos.y + sourceHeight, targetPos.y + targetHeight)\n    };\n    if (edgeBox.x === edgeBox.x2) {\n        edgeBox.x2 += 1;\n    }\n    if (edgeBox.y === edgeBox.y2) {\n        edgeBox.y2 += 1;\n    }\n    const viewBox = rectToBox({\n        x: (0 - transform[0]) / transform[2],\n        y: (0 - transform[1]) / transform[2],\n        width: width / transform[2],\n        height: height / transform[2]\n    });\n    const xOverlap = Math.max(0, Math.min(viewBox.x2, edgeBox.x2) - Math.max(viewBox.x, edgeBox.x));\n    const yOverlap = Math.max(0, Math.min(viewBox.y2, edgeBox.y2) - Math.max(viewBox.y, edgeBox.y));\n    const overlappingArea = Math.ceil(xOverlap * yOverlap);\n    return overlappingArea > 0;\n}\nfunction getNodeData(node) {\n    const handleBounds = node?.[internalsSymbol]?.handleBounds || null;\n    const isValid = handleBounds && node?.width && node?.height && typeof node?.positionAbsolute?.x !== \"undefined\" && typeof node?.positionAbsolute?.y !== \"undefined\";\n    return [\n        {\n            x: node?.positionAbsolute?.x || 0,\n            y: node?.positionAbsolute?.y || 0,\n            width: node?.width || 0,\n            height: node?.height || 0\n        },\n        handleBounds,\n        !!isValid\n    ];\n}\nconst defaultEdgeTree = [\n    {\n        level: 0,\n        isMaxLevel: true,\n        edges: []\n    }\n];\nfunction groupEdgesByZLevel(edges, nodeInternals, elevateEdgesOnSelect = false) {\n    let maxLevel = -1;\n    const levelLookup = edges.reduce((tree, edge)=>{\n        const hasZIndex = isNumeric(edge.zIndex);\n        let z = hasZIndex ? edge.zIndex : 0;\n        if (elevateEdgesOnSelect) {\n            const targetNode = nodeInternals.get(edge.target);\n            const sourceNode = nodeInternals.get(edge.source);\n            const edgeOrConnectedNodeSelected = edge.selected || targetNode?.selected || sourceNode?.selected;\n            const selectedZIndex = Math.max(sourceNode?.[internalsSymbol]?.z || 0, targetNode?.[internalsSymbol]?.z || 0, 1000);\n            z = (hasZIndex ? edge.zIndex : 0) + (edgeOrConnectedNodeSelected ? selectedZIndex : 0);\n        }\n        if (tree[z]) {\n            tree[z].push(edge);\n        } else {\n            tree[z] = [\n                edge\n            ];\n        }\n        maxLevel = z > maxLevel ? z : maxLevel;\n        return tree;\n    }, {});\n    const edgeTree = Object.entries(levelLookup).map(([key, edges])=>{\n        const level = +key;\n        return {\n            edges,\n            level,\n            isMaxLevel: level === maxLevel\n        };\n    });\n    if (edgeTree.length === 0) {\n        return defaultEdgeTree;\n    }\n    return edgeTree;\n}\nfunction useVisibleEdges(onlyRenderVisible, nodeInternals, elevateEdgesOnSelect) {\n    const edges = useStore((0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((s)=>{\n        if (!onlyRenderVisible) {\n            return s.edges;\n        }\n        return s.edges.filter((e)=>{\n            const sourceNode = nodeInternals.get(e.source);\n            const targetNode = nodeInternals.get(e.target);\n            return sourceNode?.width && sourceNode?.height && targetNode?.width && targetNode?.height && isEdgeVisible({\n                sourcePos: sourceNode.positionAbsolute || {\n                    x: 0,\n                    y: 0\n                },\n                targetPos: targetNode.positionAbsolute || {\n                    x: 0,\n                    y: 0\n                },\n                sourceWidth: sourceNode.width,\n                sourceHeight: sourceNode.height,\n                targetWidth: targetNode.width,\n                targetHeight: targetNode.height,\n                width: s.width,\n                height: s.height,\n                transform: s.transform\n            });\n        });\n    }, [\n        onlyRenderVisible,\n        nodeInternals\n    ]));\n    return groupEdgesByZLevel(edges, nodeInternals, elevateEdgesOnSelect);\n}\nconst ArrowSymbol = ({ color = \"none\", strokeWidth = 1 })=>{\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"polyline\", {\n        style: {\n            stroke: color,\n            strokeWidth\n        },\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        fill: \"none\",\n        points: \"-5,-4 0,0 -5,4\"\n    });\n};\nconst ArrowClosedSymbol = ({ color = \"none\", strokeWidth = 1 })=>{\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"polyline\", {\n        style: {\n            stroke: color,\n            fill: color,\n            strokeWidth\n        },\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        points: \"-5,-4 0,0 -5,4 -5,-4\"\n    });\n};\nconst MarkerSymbols = {\n    [MarkerType.Arrow]: ArrowSymbol,\n    [MarkerType.ArrowClosed]: ArrowClosedSymbol\n};\nfunction useMarkerSymbol(type) {\n    const store = useStoreApi();\n    const symbol = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const symbolExists = Object.prototype.hasOwnProperty.call(MarkerSymbols, type);\n        if (!symbolExists) {\n            store.getState().onError?.(\"009\", errorMessages[\"error009\"](type));\n            return null;\n        }\n        return MarkerSymbols[type];\n    }, [\n        type\n    ]);\n    return symbol;\n}\nconst Marker = ({ id, type, color, width = 12.5, height = 12.5, markerUnits = \"strokeWidth\", strokeWidth, orient = \"auto-start-reverse\" })=>{\n    const Symbol1 = useMarkerSymbol(type);\n    if (!Symbol1) {\n        return null;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"marker\", {\n        className: \"react-flow__arrowhead\",\n        id: id,\n        markerWidth: `${width}`,\n        markerHeight: `${height}`,\n        viewBox: \"-10 -10 20 20\",\n        markerUnits: markerUnits,\n        orient: orient,\n        refX: \"0\",\n        refY: \"0\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Symbol1, {\n        color: color,\n        strokeWidth: strokeWidth\n    }));\n};\nconst markerSelector = ({ defaultColor, rfId })=>(s)=>{\n        const ids = [];\n        return s.edges.reduce((markers, edge)=>{\n            [\n                edge.markerStart,\n                edge.markerEnd\n            ].forEach((marker)=>{\n                if (marker && typeof marker === \"object\") {\n                    const markerId = getMarkerId(marker, rfId);\n                    if (!ids.includes(markerId)) {\n                        markers.push({\n                            id: markerId,\n                            color: marker.color || defaultColor,\n                            ...marker\n                        });\n                        ids.push(markerId);\n                    }\n                }\n            });\n            return markers;\n        }, []).sort((a, b)=>a.id.localeCompare(b.id));\n    };\n// when you have multiple flows on a page and you hide the first one, the other ones have no markers anymore\n// when they do have markers with the same ids. To prevent this the user can pass a unique id to the react flow wrapper\n// that we can then use for creating our unique marker ids\nconst MarkerDefinitions = ({ defaultColor, rfId })=>{\n    const markers = useStore((0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(markerSelector({\n        defaultColor,\n        rfId\n    }), [\n        defaultColor,\n        rfId\n    ]), // the id includes all marker options, so we just need to look at that part of the marker\n    (a, b)=>!(a.length !== b.length || a.some((m, i)=>m.id !== b[i].id)));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"defs\", null, markers.map((marker)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Marker, {\n            id: marker.id,\n            key: marker.id,\n            type: marker.type,\n            color: marker.color,\n            width: marker.width,\n            height: marker.height,\n            markerUnits: marker.markerUnits,\n            strokeWidth: marker.strokeWidth,\n            orient: marker.orient\n        })));\n};\nMarkerDefinitions.displayName = \"MarkerDefinitions\";\nvar MarkerDefinitions$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(MarkerDefinitions);\nconst selector$4 = (s)=>({\n        nodesConnectable: s.nodesConnectable,\n        edgesFocusable: s.edgesFocusable,\n        edgesUpdatable: s.edgesUpdatable,\n        elementsSelectable: s.elementsSelectable,\n        width: s.width,\n        height: s.height,\n        connectionMode: s.connectionMode,\n        nodeInternals: s.nodeInternals,\n        onError: s.onError\n    });\nconst EdgeRenderer = ({ defaultMarkerColor, onlyRenderVisibleElements, elevateEdgesOnSelect, rfId, edgeTypes, noPanClassName, onEdgeUpdate, onEdgeContextMenu, onEdgeMouseEnter, onEdgeMouseMove, onEdgeMouseLeave, onEdgeClick, edgeUpdaterRadius, onEdgeDoubleClick, onEdgeUpdateStart, onEdgeUpdateEnd, children })=>{\n    const { edgesFocusable, edgesUpdatable, elementsSelectable, width, height, connectionMode, nodeInternals, onError } = useStore(selector$4, zustand_shallow__WEBPACK_IMPORTED_MODULE_5__.shallow);\n    const edgeTree = useVisibleEdges(onlyRenderVisibleElements, nodeInternals, elevateEdgesOnSelect);\n    if (!width) {\n        return null;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, edgeTree.map(({ level, edges, isMaxLevel })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n            key: level,\n            style: {\n                zIndex: level\n            },\n            width: width,\n            height: height,\n            className: \"react-flow__edges react-flow__container\"\n        }, isMaxLevel && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MarkerDefinitions$1, {\n            defaultColor: defaultMarkerColor,\n            rfId: rfId\n        }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", null, edges.map((edge)=>{\n            const [sourceNodeRect, sourceHandleBounds, sourceIsValid] = getNodeData(nodeInternals.get(edge.source));\n            const [targetNodeRect, targetHandleBounds, targetIsValid] = getNodeData(nodeInternals.get(edge.target));\n            if (!sourceIsValid || !targetIsValid) {\n                return null;\n            }\n            let edgeType = edge.type || \"default\";\n            if (!edgeTypes[edgeType]) {\n                onError?.(\"011\", errorMessages[\"error011\"](edgeType));\n                edgeType = \"default\";\n            }\n            const EdgeComponent = edgeTypes[edgeType] || edgeTypes.default;\n            // when connection type is loose we can define all handles as sources and connect source -> source\n            const targetNodeHandles = connectionMode === ConnectionMode.Strict ? targetHandleBounds.target : (targetHandleBounds.target ?? []).concat(targetHandleBounds.source ?? []);\n            const sourceHandle = getHandle(sourceHandleBounds.source, edge.sourceHandle);\n            const targetHandle = getHandle(targetNodeHandles, edge.targetHandle);\n            const sourcePosition = sourceHandle?.position || Position.Bottom;\n            const targetPosition = targetHandle?.position || Position.Top;\n            const isFocusable = !!(edge.focusable || edgesFocusable && typeof edge.focusable === \"undefined\");\n            const isUpdatable = typeof onEdgeUpdate !== \"undefined\" && (edge.updatable || edgesUpdatable && typeof edge.updatable === \"undefined\");\n            if (!sourceHandle || !targetHandle) {\n                onError?.(\"008\", errorMessages[\"error008\"](sourceHandle, edge));\n                return null;\n            }\n            const { sourceX, sourceY, targetX, targetY } = getEdgePositions(sourceNodeRect, sourceHandle, sourcePosition, targetNodeRect, targetHandle, targetPosition);\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(EdgeComponent, {\n                key: edge.id,\n                id: edge.id,\n                className: (0,classcat__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n                    edge.className,\n                    noPanClassName\n                ]),\n                type: edgeType,\n                data: edge.data,\n                selected: !!edge.selected,\n                animated: !!edge.animated,\n                hidden: !!edge.hidden,\n                label: edge.label,\n                labelStyle: edge.labelStyle,\n                labelShowBg: edge.labelShowBg,\n                labelBgStyle: edge.labelBgStyle,\n                labelBgPadding: edge.labelBgPadding,\n                labelBgBorderRadius: edge.labelBgBorderRadius,\n                style: edge.style,\n                source: edge.source,\n                target: edge.target,\n                sourceHandleId: edge.sourceHandle,\n                targetHandleId: edge.targetHandle,\n                markerEnd: edge.markerEnd,\n                markerStart: edge.markerStart,\n                sourceX: sourceX,\n                sourceY: sourceY,\n                targetX: targetX,\n                targetY: targetY,\n                sourcePosition: sourcePosition,\n                targetPosition: targetPosition,\n                elementsSelectable: elementsSelectable,\n                onEdgeUpdate: onEdgeUpdate,\n                onContextMenu: onEdgeContextMenu,\n                onMouseEnter: onEdgeMouseEnter,\n                onMouseMove: onEdgeMouseMove,\n                onMouseLeave: onEdgeMouseLeave,\n                onClick: onEdgeClick,\n                edgeUpdaterRadius: edgeUpdaterRadius,\n                onEdgeDoubleClick: onEdgeDoubleClick,\n                onEdgeUpdateStart: onEdgeUpdateStart,\n                onEdgeUpdateEnd: onEdgeUpdateEnd,\n                rfId: rfId,\n                ariaLabel: edge.ariaLabel,\n                isFocusable: isFocusable,\n                isUpdatable: isUpdatable,\n                pathOptions: \"pathOptions\" in edge ? edge.pathOptions : undefined,\n                interactionWidth: edge.interactionWidth\n            });\n        })))), children);\n};\nEdgeRenderer.displayName = \"EdgeRenderer\";\nvar EdgeRenderer$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(EdgeRenderer);\nconst selector$3 = (s)=>`translate(${s.transform[0]}px,${s.transform[1]}px) scale(${s.transform[2]})`;\nfunction Viewport({ children }) {\n    const transform = useStore(selector$3);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"react-flow__viewport react-flow__container\",\n        style: {\n            transform\n        }\n    }, children);\n}\nfunction useOnInitHandler(onInit) {\n    const rfInstance = useReactFlow();\n    const isInitialized = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!isInitialized.current && rfInstance.viewportInitialized && onInit) {\n            setTimeout(()=>onInit(rfInstance), 1);\n            isInitialized.current = true;\n        }\n    }, [\n        onInit,\n        rfInstance.viewportInitialized\n    ]);\n}\nconst oppositePosition = {\n    [Position.Left]: Position.Right,\n    [Position.Right]: Position.Left,\n    [Position.Top]: Position.Bottom,\n    [Position.Bottom]: Position.Top\n};\nconst ConnectionLine = ({ nodeId, handleType, style, type = ConnectionLineType.Bezier, CustomComponent, connectionStatus })=>{\n    const { fromNode, handleId, toX, toY, connectionMode } = useStore((0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((s)=>({\n            fromNode: s.nodeInternals.get(nodeId),\n            handleId: s.connectionHandleId,\n            toX: (s.connectionPosition.x - s.transform[0]) / s.transform[2],\n            toY: (s.connectionPosition.y - s.transform[1]) / s.transform[2],\n            connectionMode: s.connectionMode\n        }), [\n        nodeId\n    ]), zustand_shallow__WEBPACK_IMPORTED_MODULE_5__.shallow);\n    const fromHandleBounds = fromNode?.[internalsSymbol]?.handleBounds;\n    let handleBounds = fromHandleBounds?.[handleType];\n    if (connectionMode === ConnectionMode.Loose) {\n        handleBounds = handleBounds ? handleBounds : fromHandleBounds?.[handleType === \"source\" ? \"target\" : \"source\"];\n    }\n    if (!fromNode || !handleBounds) {\n        return null;\n    }\n    const fromHandle = handleId ? handleBounds.find((d)=>d.id === handleId) : handleBounds[0];\n    const fromHandleX = fromHandle ? fromHandle.x + fromHandle.width / 2 : (fromNode.width ?? 0) / 2;\n    const fromHandleY = fromHandle ? fromHandle.y + fromHandle.height / 2 : fromNode.height ?? 0;\n    const fromX = (fromNode.positionAbsolute?.x ?? 0) + fromHandleX;\n    const fromY = (fromNode.positionAbsolute?.y ?? 0) + fromHandleY;\n    const fromPosition = fromHandle?.position;\n    const toPosition = fromPosition ? oppositePosition[fromPosition] : null;\n    if (!fromPosition || !toPosition) {\n        return null;\n    }\n    if (CustomComponent) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CustomComponent, {\n            connectionLineType: type,\n            connectionLineStyle: style,\n            fromNode: fromNode,\n            fromHandle: fromHandle,\n            fromX: fromX,\n            fromY: fromY,\n            toX: toX,\n            toY: toY,\n            fromPosition: fromPosition,\n            toPosition: toPosition,\n            connectionStatus: connectionStatus\n        });\n    }\n    let dAttr = \"\";\n    const pathParams = {\n        sourceX: fromX,\n        sourceY: fromY,\n        sourcePosition: fromPosition,\n        targetX: toX,\n        targetY: toY,\n        targetPosition: toPosition\n    };\n    if (type === ConnectionLineType.Bezier) {\n        // we assume the destination position is opposite to the source position\n        [dAttr] = getBezierPath(pathParams);\n    } else if (type === ConnectionLineType.Step) {\n        [dAttr] = getSmoothStepPath({\n            ...pathParams,\n            borderRadius: 0\n        });\n    } else if (type === ConnectionLineType.SmoothStep) {\n        [dAttr] = getSmoothStepPath(pathParams);\n    } else if (type === ConnectionLineType.SimpleBezier) {\n        [dAttr] = getSimpleBezierPath(pathParams);\n    } else {\n        dAttr = `M${fromX},${fromY} ${toX},${toY}`;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: dAttr,\n        fill: \"none\",\n        className: \"react-flow__connection-path\",\n        style: style\n    });\n};\nConnectionLine.displayName = \"ConnectionLine\";\nconst selector$2 = (s)=>({\n        nodeId: s.connectionNodeId,\n        handleType: s.connectionHandleType,\n        nodesConnectable: s.nodesConnectable,\n        connectionStatus: s.connectionStatus,\n        width: s.width,\n        height: s.height\n    });\nfunction ConnectionLineWrapper({ containerStyle, style, type, component }) {\n    const { nodeId, handleType, nodesConnectable, width, height, connectionStatus } = useStore(selector$2, zustand_shallow__WEBPACK_IMPORTED_MODULE_5__.shallow);\n    const isValid = !!(nodeId && handleType && width && nodesConnectable);\n    if (!isValid) {\n        return null;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        style: containerStyle,\n        width: width,\n        height: height,\n        className: \"react-flow__edges react-flow__connectionline react-flow__container\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", {\n        className: (0,classcat__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n            \"react-flow__connection\",\n            connectionStatus\n        ])\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConnectionLine, {\n        nodeId: nodeId,\n        handleType: handleType,\n        style: style,\n        type: type,\n        CustomComponent: component,\n        connectionStatus: connectionStatus\n    })));\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction useNodeOrEdgeTypes(nodeOrEdgeTypes, createTypes) {\n    const typesKeysRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const store = useStoreApi();\n    const typesParsed = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (true) {\n            const typeKeys = Object.keys(nodeOrEdgeTypes);\n            if ((0,zustand_shallow__WEBPACK_IMPORTED_MODULE_5__.shallow)(typesKeysRef.current, typeKeys)) {\n                store.getState().onError?.(\"002\", errorMessages[\"error002\"]());\n            }\n            typesKeysRef.current = typeKeys;\n        }\n        return createTypes(nodeOrEdgeTypes);\n    }, [\n        nodeOrEdgeTypes\n    ]);\n    return typesParsed;\n}\nconst GraphView = ({ nodeTypes, edgeTypes, onMove, onMoveStart, onMoveEnd, onInit, onNodeClick, onEdgeClick, onNodeDoubleClick, onEdgeDoubleClick, onNodeMouseEnter, onNodeMouseMove, onNodeMouseLeave, onNodeContextMenu, onSelectionContextMenu, onSelectionStart, onSelectionEnd, connectionLineType, connectionLineStyle, connectionLineComponent, connectionLineContainerStyle, selectionKeyCode, selectionOnDrag, selectionMode, multiSelectionKeyCode, panActivationKeyCode, zoomActivationKeyCode, deleteKeyCode, onlyRenderVisibleElements, elementsSelectable, selectNodesOnDrag, defaultViewport, translateExtent, minZoom, maxZoom, preventScrolling, defaultMarkerColor, zoomOnScroll, zoomOnPinch, panOnScroll, panOnScrollSpeed, panOnScrollMode, zoomOnDoubleClick, panOnDrag, onPaneClick, onPaneMouseEnter, onPaneMouseMove, onPaneMouseLeave, onPaneScroll, onPaneContextMenu, onEdgeUpdate, onEdgeContextMenu, onEdgeMouseEnter, onEdgeMouseMove, onEdgeMouseLeave, edgeUpdaterRadius, onEdgeUpdateStart, onEdgeUpdateEnd, noDragClassName, noWheelClassName, noPanClassName, elevateEdgesOnSelect, disableKeyboardA11y, nodeOrigin, nodeExtent, rfId })=>{\n    const nodeTypesWrapped = useNodeOrEdgeTypes(nodeTypes, createNodeTypes);\n    const edgeTypesWrapped = useNodeOrEdgeTypes(edgeTypes, createEdgeTypes);\n    useOnInitHandler(onInit);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(FlowRenderer$1, {\n        onPaneClick: onPaneClick,\n        onPaneMouseEnter: onPaneMouseEnter,\n        onPaneMouseMove: onPaneMouseMove,\n        onPaneMouseLeave: onPaneMouseLeave,\n        onPaneContextMenu: onPaneContextMenu,\n        onPaneScroll: onPaneScroll,\n        deleteKeyCode: deleteKeyCode,\n        selectionKeyCode: selectionKeyCode,\n        selectionOnDrag: selectionOnDrag,\n        selectionMode: selectionMode,\n        onSelectionStart: onSelectionStart,\n        onSelectionEnd: onSelectionEnd,\n        multiSelectionKeyCode: multiSelectionKeyCode,\n        panActivationKeyCode: panActivationKeyCode,\n        zoomActivationKeyCode: zoomActivationKeyCode,\n        elementsSelectable: elementsSelectable,\n        onMove: onMove,\n        onMoveStart: onMoveStart,\n        onMoveEnd: onMoveEnd,\n        zoomOnScroll: zoomOnScroll,\n        zoomOnPinch: zoomOnPinch,\n        zoomOnDoubleClick: zoomOnDoubleClick,\n        panOnScroll: panOnScroll,\n        panOnScrollSpeed: panOnScrollSpeed,\n        panOnScrollMode: panOnScrollMode,\n        panOnDrag: panOnDrag,\n        defaultViewport: defaultViewport,\n        translateExtent: translateExtent,\n        minZoom: minZoom,\n        maxZoom: maxZoom,\n        onSelectionContextMenu: onSelectionContextMenu,\n        preventScrolling: preventScrolling,\n        noDragClassName: noDragClassName,\n        noWheelClassName: noWheelClassName,\n        noPanClassName: noPanClassName,\n        disableKeyboardA11y: disableKeyboardA11y\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Viewport, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(EdgeRenderer$1, {\n        edgeTypes: edgeTypesWrapped,\n        onEdgeClick: onEdgeClick,\n        onEdgeDoubleClick: onEdgeDoubleClick,\n        onEdgeUpdate: onEdgeUpdate,\n        onlyRenderVisibleElements: onlyRenderVisibleElements,\n        onEdgeContextMenu: onEdgeContextMenu,\n        onEdgeMouseEnter: onEdgeMouseEnter,\n        onEdgeMouseMove: onEdgeMouseMove,\n        onEdgeMouseLeave: onEdgeMouseLeave,\n        onEdgeUpdateStart: onEdgeUpdateStart,\n        onEdgeUpdateEnd: onEdgeUpdateEnd,\n        edgeUpdaterRadius: edgeUpdaterRadius,\n        defaultMarkerColor: defaultMarkerColor,\n        noPanClassName: noPanClassName,\n        elevateEdgesOnSelect: !!elevateEdgesOnSelect,\n        disableKeyboardA11y: disableKeyboardA11y,\n        rfId: rfId\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConnectionLineWrapper, {\n        style: connectionLineStyle,\n        type: connectionLineType,\n        component: connectionLineComponent,\n        containerStyle: connectionLineContainerStyle\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"react-flow__edgelabel-renderer\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(NodeRenderer$1, {\n        nodeTypes: nodeTypesWrapped,\n        onNodeClick: onNodeClick,\n        onNodeDoubleClick: onNodeDoubleClick,\n        onNodeMouseEnter: onNodeMouseEnter,\n        onNodeMouseMove: onNodeMouseMove,\n        onNodeMouseLeave: onNodeMouseLeave,\n        onNodeContextMenu: onNodeContextMenu,\n        selectNodesOnDrag: selectNodesOnDrag,\n        onlyRenderVisibleElements: onlyRenderVisibleElements,\n        noPanClassName: noPanClassName,\n        noDragClassName: noDragClassName,\n        disableKeyboardA11y: disableKeyboardA11y,\n        nodeOrigin: nodeOrigin,\n        nodeExtent: nodeExtent,\n        rfId: rfId\n    })));\n};\nGraphView.displayName = \"GraphView\";\nvar GraphView$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(GraphView);\nconst infiniteExtent = [\n    [\n        Number.NEGATIVE_INFINITY,\n        Number.NEGATIVE_INFINITY\n    ],\n    [\n        Number.POSITIVE_INFINITY,\n        Number.POSITIVE_INFINITY\n    ]\n];\nconst initialState = {\n    rfId: \"1\",\n    width: 0,\n    height: 0,\n    transform: [\n        0,\n        0,\n        1\n    ],\n    nodeInternals: new Map(),\n    edges: [],\n    onNodesChange: null,\n    onEdgesChange: null,\n    hasDefaultNodes: false,\n    hasDefaultEdges: false,\n    d3Zoom: null,\n    d3Selection: null,\n    d3ZoomHandler: undefined,\n    minZoom: 0.5,\n    maxZoom: 2,\n    translateExtent: infiniteExtent,\n    nodeExtent: infiniteExtent,\n    nodesSelectionActive: false,\n    userSelectionActive: false,\n    userSelectionRect: null,\n    connectionNodeId: null,\n    connectionHandleId: null,\n    connectionHandleType: \"source\",\n    connectionPosition: {\n        x: 0,\n        y: 0\n    },\n    connectionStatus: null,\n    connectionMode: ConnectionMode.Strict,\n    domNode: null,\n    paneDragging: false,\n    noPanClassName: \"nopan\",\n    nodeOrigin: [\n        0,\n        0\n    ],\n    nodeDragThreshold: 0,\n    snapGrid: [\n        15,\n        15\n    ],\n    snapToGrid: false,\n    nodesDraggable: true,\n    nodesConnectable: true,\n    nodesFocusable: true,\n    edgesFocusable: true,\n    edgesUpdatable: true,\n    elementsSelectable: true,\n    elevateNodesOnSelect: true,\n    fitViewOnInit: false,\n    fitViewOnInitDone: false,\n    fitViewOnInitOptions: undefined,\n    onSelectionChange: [],\n    multiSelectionActive: false,\n    connectionStartHandle: null,\n    connectionEndHandle: null,\n    connectionClickStartHandle: null,\n    connectOnClick: true,\n    ariaLiveMessage: \"\",\n    autoPanOnConnect: true,\n    autoPanOnNodeDrag: true,\n    connectionRadius: 20,\n    onError: devWarn,\n    isValidConnection: undefined\n};\nconst createRFStore = ()=>(0,zustand_traditional__WEBPACK_IMPORTED_MODULE_4__.createWithEqualityFn)((set, get)=>({\n            ...initialState,\n            setNodes: (nodes)=>{\n                const { nodeInternals, nodeOrigin, elevateNodesOnSelect } = get();\n                set({\n                    nodeInternals: createNodeInternals(nodes, nodeInternals, nodeOrigin, elevateNodesOnSelect)\n                });\n            },\n            getNodes: ()=>{\n                return Array.from(get().nodeInternals.values());\n            },\n            setEdges: (edges)=>{\n                const { defaultEdgeOptions = {} } = get();\n                set({\n                    edges: edges.map((e)=>({\n                            ...defaultEdgeOptions,\n                            ...e\n                        }))\n                });\n            },\n            setDefaultNodesAndEdges: (nodes, edges)=>{\n                const hasDefaultNodes = typeof nodes !== \"undefined\";\n                const hasDefaultEdges = typeof edges !== \"undefined\";\n                const nodeInternals = hasDefaultNodes ? createNodeInternals(nodes, new Map(), get().nodeOrigin, get().elevateNodesOnSelect) : new Map();\n                const nextEdges = hasDefaultEdges ? edges : [];\n                set({\n                    nodeInternals,\n                    edges: nextEdges,\n                    hasDefaultNodes,\n                    hasDefaultEdges\n                });\n            },\n            updateNodeDimensions: (updates)=>{\n                const { onNodesChange, nodeInternals, fitViewOnInit, fitViewOnInitDone, fitViewOnInitOptions, domNode, nodeOrigin } = get();\n                const viewportNode = domNode?.querySelector(\".react-flow__viewport\");\n                if (!viewportNode) {\n                    return;\n                }\n                const style = window.getComputedStyle(viewportNode);\n                const { m22: zoom } = new window.DOMMatrixReadOnly(style.transform);\n                const changes = updates.reduce((res, update)=>{\n                    const node = nodeInternals.get(update.id);\n                    if (node) {\n                        const dimensions = getDimensions(update.nodeElement);\n                        const doUpdate = !!(dimensions.width && dimensions.height && (node.width !== dimensions.width || node.height !== dimensions.height || update.forceUpdate));\n                        if (doUpdate) {\n                            nodeInternals.set(node.id, {\n                                ...node,\n                                [internalsSymbol]: {\n                                    ...node[internalsSymbol],\n                                    handleBounds: {\n                                        source: getHandleBounds(\".source\", update.nodeElement, zoom, nodeOrigin),\n                                        target: getHandleBounds(\".target\", update.nodeElement, zoom, nodeOrigin)\n                                    }\n                                },\n                                ...dimensions\n                            });\n                            res.push({\n                                id: node.id,\n                                type: \"dimensions\",\n                                dimensions\n                            });\n                        }\n                    }\n                    return res;\n                }, []);\n                updateAbsoluteNodePositions(nodeInternals, nodeOrigin);\n                const nextFitViewOnInitDone = fitViewOnInitDone || fitViewOnInit && !fitViewOnInitDone && fitView(get, {\n                    initial: true,\n                    ...fitViewOnInitOptions\n                });\n                set({\n                    nodeInternals: new Map(nodeInternals),\n                    fitViewOnInitDone: nextFitViewOnInitDone\n                });\n                if (changes?.length > 0) {\n                    onNodesChange?.(changes);\n                }\n            },\n            updateNodePositions: (nodeDragItems, positionChanged = true, dragging = false)=>{\n                const { triggerNodeChanges } = get();\n                const changes = nodeDragItems.map((node)=>{\n                    const change = {\n                        id: node.id,\n                        type: \"position\",\n                        dragging\n                    };\n                    if (positionChanged) {\n                        change.positionAbsolute = node.positionAbsolute;\n                        change.position = node.position;\n                    }\n                    return change;\n                });\n                triggerNodeChanges(changes);\n            },\n            triggerNodeChanges: (changes)=>{\n                const { onNodesChange, nodeInternals, hasDefaultNodes, nodeOrigin, getNodes, elevateNodesOnSelect } = get();\n                if (changes?.length) {\n                    if (hasDefaultNodes) {\n                        const nodes = applyNodeChanges(changes, getNodes());\n                        const nextNodeInternals = createNodeInternals(nodes, nodeInternals, nodeOrigin, elevateNodesOnSelect);\n                        set({\n                            nodeInternals: nextNodeInternals\n                        });\n                    }\n                    onNodesChange?.(changes);\n                }\n            },\n            addSelectedNodes: (selectedNodeIds)=>{\n                const { multiSelectionActive, edges, getNodes } = get();\n                let changedNodes;\n                let changedEdges = null;\n                if (multiSelectionActive) {\n                    changedNodes = selectedNodeIds.map((nodeId)=>createSelectionChange(nodeId, true));\n                } else {\n                    changedNodes = getSelectionChanges(getNodes(), selectedNodeIds);\n                    changedEdges = getSelectionChanges(edges, []);\n                }\n                updateNodesAndEdgesSelections({\n                    changedNodes,\n                    changedEdges,\n                    get,\n                    set\n                });\n            },\n            addSelectedEdges: (selectedEdgeIds)=>{\n                const { multiSelectionActive, edges, getNodes } = get();\n                let changedEdges;\n                let changedNodes = null;\n                if (multiSelectionActive) {\n                    changedEdges = selectedEdgeIds.map((edgeId)=>createSelectionChange(edgeId, true));\n                } else {\n                    changedEdges = getSelectionChanges(edges, selectedEdgeIds);\n                    changedNodes = getSelectionChanges(getNodes(), []);\n                }\n                updateNodesAndEdgesSelections({\n                    changedNodes,\n                    changedEdges,\n                    get,\n                    set\n                });\n            },\n            unselectNodesAndEdges: ({ nodes, edges } = {})=>{\n                const { edges: storeEdges, getNodes } = get();\n                const nodesToUnselect = nodes ? nodes : getNodes();\n                const edgesToUnselect = edges ? edges : storeEdges;\n                const changedNodes = nodesToUnselect.map((n)=>{\n                    n.selected = false;\n                    return createSelectionChange(n.id, false);\n                });\n                const changedEdges = edgesToUnselect.map((edge)=>createSelectionChange(edge.id, false));\n                updateNodesAndEdgesSelections({\n                    changedNodes,\n                    changedEdges,\n                    get,\n                    set\n                });\n            },\n            setMinZoom: (minZoom)=>{\n                const { d3Zoom, maxZoom } = get();\n                d3Zoom?.scaleExtent([\n                    minZoom,\n                    maxZoom\n                ]);\n                set({\n                    minZoom\n                });\n            },\n            setMaxZoom: (maxZoom)=>{\n                const { d3Zoom, minZoom } = get();\n                d3Zoom?.scaleExtent([\n                    minZoom,\n                    maxZoom\n                ]);\n                set({\n                    maxZoom\n                });\n            },\n            setTranslateExtent: (translateExtent)=>{\n                get().d3Zoom?.translateExtent(translateExtent);\n                set({\n                    translateExtent\n                });\n            },\n            resetSelectedElements: ()=>{\n                const { edges, getNodes } = get();\n                const nodes = getNodes();\n                const nodesToUnselect = nodes.filter((e)=>e.selected).map((n)=>createSelectionChange(n.id, false));\n                const edgesToUnselect = edges.filter((e)=>e.selected).map((e)=>createSelectionChange(e.id, false));\n                updateNodesAndEdgesSelections({\n                    changedNodes: nodesToUnselect,\n                    changedEdges: edgesToUnselect,\n                    get,\n                    set\n                });\n            },\n            setNodeExtent: (nodeExtent)=>{\n                const { nodeInternals } = get();\n                nodeInternals.forEach((node)=>{\n                    node.positionAbsolute = clampPosition(node.position, nodeExtent);\n                });\n                set({\n                    nodeExtent,\n                    nodeInternals: new Map(nodeInternals)\n                });\n            },\n            panBy: (delta)=>{\n                const { transform, width, height, d3Zoom, d3Selection, translateExtent } = get();\n                if (!d3Zoom || !d3Selection || !delta.x && !delta.y) {\n                    return false;\n                }\n                const nextTransform = d3_zoom__WEBPACK_IMPORTED_MODULE_2__.zoomIdentity.translate(transform[0] + delta.x, transform[1] + delta.y).scale(transform[2]);\n                const extent = [\n                    [\n                        0,\n                        0\n                    ],\n                    [\n                        width,\n                        height\n                    ]\n                ];\n                const constrainedTransform = d3Zoom?.constrain()(nextTransform, extent, translateExtent);\n                d3Zoom.transform(d3Selection, constrainedTransform);\n                const transformChanged = transform[0] !== constrainedTransform.x || transform[1] !== constrainedTransform.y || transform[2] !== constrainedTransform.k;\n                return transformChanged;\n            },\n            cancelConnection: ()=>set({\n                    connectionNodeId: initialState.connectionNodeId,\n                    connectionHandleId: initialState.connectionHandleId,\n                    connectionHandleType: initialState.connectionHandleType,\n                    connectionStatus: initialState.connectionStatus,\n                    connectionStartHandle: initialState.connectionStartHandle,\n                    connectionEndHandle: initialState.connectionEndHandle\n                }),\n            reset: ()=>set({\n                    ...initialState\n                })\n        }), Object.is);\nconst ReactFlowProvider = ({ children })=>{\n    const storeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    if (!storeRef.current) {\n        storeRef.current = createRFStore();\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Provider$1, {\n        value: storeRef.current\n    }, children);\n};\nReactFlowProvider.displayName = \"ReactFlowProvider\";\nconst Wrapper = ({ children })=>{\n    const isWrapped = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(StoreContext);\n    if (isWrapped) {\n        // we need to wrap it with a fragment because it's not allowed for children to be a ReactNode\n        // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18051\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children);\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ReactFlowProvider, null, children);\n};\nWrapper.displayName = \"ReactFlowWrapper\";\nconst defaultNodeTypes = {\n    input: InputNode$1,\n    default: DefaultNode$1,\n    output: OutputNode$1,\n    group: GroupNode\n};\nconst defaultEdgeTypes = {\n    default: BezierEdge,\n    straight: StraightEdge,\n    step: StepEdge,\n    smoothstep: SmoothStepEdge,\n    simplebezier: SimpleBezierEdge\n};\nconst initNodeOrigin = [\n    0,\n    0\n];\nconst initSnapGrid = [\n    15,\n    15\n];\nconst initDefaultViewport = {\n    x: 0,\n    y: 0,\n    zoom: 1\n};\nconst wrapperStyle = {\n    width: \"100%\",\n    height: \"100%\",\n    overflow: \"hidden\",\n    position: \"relative\",\n    zIndex: 0\n};\nconst ReactFlow = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ nodes, edges, defaultNodes, defaultEdges, className, nodeTypes = defaultNodeTypes, edgeTypes = defaultEdgeTypes, onNodeClick, onEdgeClick, onInit, onMove, onMoveStart, onMoveEnd, onConnect, onConnectStart, onConnectEnd, onClickConnectStart, onClickConnectEnd, onNodeMouseEnter, onNodeMouseMove, onNodeMouseLeave, onNodeContextMenu, onNodeDoubleClick, onNodeDragStart, onNodeDrag, onNodeDragStop, onNodesDelete, onEdgesDelete, onSelectionChange, onSelectionDragStart, onSelectionDrag, onSelectionDragStop, onSelectionContextMenu, onSelectionStart, onSelectionEnd, connectionMode = ConnectionMode.Strict, connectionLineType = ConnectionLineType.Bezier, connectionLineStyle, connectionLineComponent, connectionLineContainerStyle, deleteKeyCode = \"Backspace\", selectionKeyCode = \"Shift\", selectionOnDrag = false, selectionMode = SelectionMode.Full, panActivationKeyCode = \"Space\", multiSelectionKeyCode = isMacOs() ? \"Meta\" : \"Control\", zoomActivationKeyCode = isMacOs() ? \"Meta\" : \"Control\", snapToGrid = false, snapGrid = initSnapGrid, onlyRenderVisibleElements = false, selectNodesOnDrag = true, nodesDraggable, nodesConnectable, nodesFocusable, nodeOrigin = initNodeOrigin, edgesFocusable, edgesUpdatable, elementsSelectable, defaultViewport = initDefaultViewport, minZoom = 0.5, maxZoom = 2, translateExtent = infiniteExtent, preventScrolling = true, nodeExtent, defaultMarkerColor = \"#b1b1b7\", zoomOnScroll = true, zoomOnPinch = true, panOnScroll = false, panOnScrollSpeed = 0.5, panOnScrollMode = PanOnScrollMode.Free, zoomOnDoubleClick = true, panOnDrag = true, onPaneClick, onPaneMouseEnter, onPaneMouseMove, onPaneMouseLeave, onPaneScroll, onPaneContextMenu, children, onEdgeUpdate, onEdgeContextMenu, onEdgeDoubleClick, onEdgeMouseEnter, onEdgeMouseMove, onEdgeMouseLeave, onEdgeUpdateStart, onEdgeUpdateEnd, edgeUpdaterRadius = 10, onNodesChange, onEdgesChange, noDragClassName = \"nodrag\", noWheelClassName = \"nowheel\", noPanClassName = \"nopan\", fitView = false, fitViewOptions, connectOnClick = true, attributionPosition, proOptions, defaultEdgeOptions, elevateNodesOnSelect = true, elevateEdgesOnSelect = false, disableKeyboardA11y = false, autoPanOnConnect = true, autoPanOnNodeDrag = true, connectionRadius = 20, isValidConnection, onError, style, id, nodeDragThreshold, ...rest }, ref)=>{\n    const rfId = id || \"1\";\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...rest,\n        style: {\n            ...style,\n            ...wrapperStyle\n        },\n        ref: ref,\n        className: (0,classcat__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n            \"react-flow\",\n            className\n        ]),\n        \"data-testid\": \"rf__wrapper\",\n        id: id\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Wrapper, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(GraphView$1, {\n        onInit: onInit,\n        onMove: onMove,\n        onMoveStart: onMoveStart,\n        onMoveEnd: onMoveEnd,\n        onNodeClick: onNodeClick,\n        onEdgeClick: onEdgeClick,\n        onNodeMouseEnter: onNodeMouseEnter,\n        onNodeMouseMove: onNodeMouseMove,\n        onNodeMouseLeave: onNodeMouseLeave,\n        onNodeContextMenu: onNodeContextMenu,\n        onNodeDoubleClick: onNodeDoubleClick,\n        nodeTypes: nodeTypes,\n        edgeTypes: edgeTypes,\n        connectionLineType: connectionLineType,\n        connectionLineStyle: connectionLineStyle,\n        connectionLineComponent: connectionLineComponent,\n        connectionLineContainerStyle: connectionLineContainerStyle,\n        selectionKeyCode: selectionKeyCode,\n        selectionOnDrag: selectionOnDrag,\n        selectionMode: selectionMode,\n        deleteKeyCode: deleteKeyCode,\n        multiSelectionKeyCode: multiSelectionKeyCode,\n        panActivationKeyCode: panActivationKeyCode,\n        zoomActivationKeyCode: zoomActivationKeyCode,\n        onlyRenderVisibleElements: onlyRenderVisibleElements,\n        selectNodesOnDrag: selectNodesOnDrag,\n        defaultViewport: defaultViewport,\n        translateExtent: translateExtent,\n        minZoom: minZoom,\n        maxZoom: maxZoom,\n        preventScrolling: preventScrolling,\n        zoomOnScroll: zoomOnScroll,\n        zoomOnPinch: zoomOnPinch,\n        zoomOnDoubleClick: zoomOnDoubleClick,\n        panOnScroll: panOnScroll,\n        panOnScrollSpeed: panOnScrollSpeed,\n        panOnScrollMode: panOnScrollMode,\n        panOnDrag: panOnDrag,\n        onPaneClick: onPaneClick,\n        onPaneMouseEnter: onPaneMouseEnter,\n        onPaneMouseMove: onPaneMouseMove,\n        onPaneMouseLeave: onPaneMouseLeave,\n        onPaneScroll: onPaneScroll,\n        onPaneContextMenu: onPaneContextMenu,\n        onSelectionContextMenu: onSelectionContextMenu,\n        onSelectionStart: onSelectionStart,\n        onSelectionEnd: onSelectionEnd,\n        onEdgeUpdate: onEdgeUpdate,\n        onEdgeContextMenu: onEdgeContextMenu,\n        onEdgeDoubleClick: onEdgeDoubleClick,\n        onEdgeMouseEnter: onEdgeMouseEnter,\n        onEdgeMouseMove: onEdgeMouseMove,\n        onEdgeMouseLeave: onEdgeMouseLeave,\n        onEdgeUpdateStart: onEdgeUpdateStart,\n        onEdgeUpdateEnd: onEdgeUpdateEnd,\n        edgeUpdaterRadius: edgeUpdaterRadius,\n        defaultMarkerColor: defaultMarkerColor,\n        noDragClassName: noDragClassName,\n        noWheelClassName: noWheelClassName,\n        noPanClassName: noPanClassName,\n        elevateEdgesOnSelect: elevateEdgesOnSelect,\n        rfId: rfId,\n        disableKeyboardA11y: disableKeyboardA11y,\n        nodeOrigin: nodeOrigin,\n        nodeExtent: nodeExtent\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(StoreUpdater, {\n        nodes: nodes,\n        edges: edges,\n        defaultNodes: defaultNodes,\n        defaultEdges: defaultEdges,\n        onConnect: onConnect,\n        onConnectStart: onConnectStart,\n        onConnectEnd: onConnectEnd,\n        onClickConnectStart: onClickConnectStart,\n        onClickConnectEnd: onClickConnectEnd,\n        nodesDraggable: nodesDraggable,\n        nodesConnectable: nodesConnectable,\n        nodesFocusable: nodesFocusable,\n        edgesFocusable: edgesFocusable,\n        edgesUpdatable: edgesUpdatable,\n        elementsSelectable: elementsSelectable,\n        elevateNodesOnSelect: elevateNodesOnSelect,\n        minZoom: minZoom,\n        maxZoom: maxZoom,\n        nodeExtent: nodeExtent,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        snapToGrid: snapToGrid,\n        snapGrid: snapGrid,\n        connectionMode: connectionMode,\n        translateExtent: translateExtent,\n        connectOnClick: connectOnClick,\n        defaultEdgeOptions: defaultEdgeOptions,\n        fitView: fitView,\n        fitViewOptions: fitViewOptions,\n        onNodesDelete: onNodesDelete,\n        onEdgesDelete: onEdgesDelete,\n        onNodeDragStart: onNodeDragStart,\n        onNodeDrag: onNodeDrag,\n        onNodeDragStop: onNodeDragStop,\n        onSelectionDrag: onSelectionDrag,\n        onSelectionDragStart: onSelectionDragStart,\n        onSelectionDragStop: onSelectionDragStop,\n        noPanClassName: noPanClassName,\n        nodeOrigin: nodeOrigin,\n        rfId: rfId,\n        autoPanOnConnect: autoPanOnConnect,\n        autoPanOnNodeDrag: autoPanOnNodeDrag,\n        onError: onError,\n        connectionRadius: connectionRadius,\n        isValidConnection: isValidConnection,\n        nodeDragThreshold: nodeDragThreshold\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Wrapper$1, {\n        onSelectionChange: onSelectionChange\n    }), children, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Attribution, {\n        proOptions: proOptions,\n        position: attributionPosition\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(A11yDescriptions, {\n        rfId: rfId,\n        disableKeyboardA11y: disableKeyboardA11y\n    })));\n});\nReactFlow.displayName = \"ReactFlow\";\nconst selector$1 = (s)=>s.domNode?.querySelector(\".react-flow__edgelabel-renderer\");\nfunction EdgeLabelRenderer({ children }) {\n    const edgeLabelRenderer = useStore(selector$1);\n    if (!edgeLabelRenderer) {\n        return null;\n    }\n    return /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_3__.createPortal)(children, edgeLabelRenderer);\n}\nfunction useUpdateNodeInternals() {\n    const store = useStoreApi();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((id)=>{\n        const { domNode, updateNodeDimensions } = store.getState();\n        const updateIds = Array.isArray(id) ? id : [\n            id\n        ];\n        const updates = updateIds.reduce((res, updateId)=>{\n            const nodeElement = domNode?.querySelector(`.react-flow__node[data-id=\"${updateId}\"]`);\n            if (nodeElement) {\n                res.push({\n                    id: updateId,\n                    nodeElement,\n                    forceUpdate: true\n                });\n            }\n            return res;\n        }, []);\n        requestAnimationFrame(()=>updateNodeDimensions(updates));\n    }, []);\n}\nconst nodesSelector = (state)=>state.getNodes();\nfunction useNodes() {\n    const nodes = useStore(nodesSelector, zustand_shallow__WEBPACK_IMPORTED_MODULE_5__.shallow);\n    return nodes;\n}\nconst edgesSelector = (state)=>state.edges;\nfunction useEdges() {\n    const edges = useStore(edgesSelector, zustand_shallow__WEBPACK_IMPORTED_MODULE_5__.shallow);\n    return edges;\n}\nconst viewportSelector = (state)=>({\n        x: state.transform[0],\n        y: state.transform[1],\n        zoom: state.transform[2]\n    });\nfunction useViewport() {\n    const viewport = useStore(viewportSelector, zustand_shallow__WEBPACK_IMPORTED_MODULE_5__.shallow);\n    return viewport;\n}\n/* eslint-disable @typescript-eslint/no-explicit-any */ function createUseItemsState(applyChanges) {\n    return (initialItems)=>{\n        const [items, setItems] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialItems);\n        const onItemsChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((changes)=>setItems((items)=>applyChanges(changes, items)), []);\n        return [\n            items,\n            setItems,\n            onItemsChange\n        ];\n    };\n}\nconst useNodesState = createUseItemsState(applyNodeChanges);\nconst useEdgesState = createUseItemsState(applyEdgeChanges);\nfunction useOnViewportChange({ onStart, onChange, onEnd }) {\n    const store = useStoreApi();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        store.setState({\n            onViewportChangeStart: onStart\n        });\n    }, [\n        onStart\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        store.setState({\n            onViewportChange: onChange\n        });\n    }, [\n        onChange\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        store.setState({\n            onViewportChangeEnd: onEnd\n        });\n    }, [\n        onEnd\n    ]);\n}\nfunction useOnSelectionChange({ onChange }) {\n    const store = useStoreApi();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const nextSelectionChangeHandlers = [\n            ...store.getState().onSelectionChange,\n            onChange\n        ];\n        store.setState({\n            onSelectionChange: nextSelectionChangeHandlers\n        });\n        return ()=>{\n            const nextHandlers = store.getState().onSelectionChange.filter((fn)=>fn !== onChange);\n            store.setState({\n                onSelectionChange: nextHandlers\n            });\n        };\n    }, [\n        onChange\n    ]);\n}\nconst selector = (options)=>(s)=>{\n        if (s.nodeInternals.size === 0) {\n            return false;\n        }\n        return s.getNodes().filter((n)=>options.includeHiddenNodes ? true : !n.hidden).every((n)=>n[internalsSymbol]?.handleBounds !== undefined);\n    };\nconst defaultOptions = {\n    includeHiddenNodes: false\n};\nfunction useNodesInitialized(options = defaultOptions) {\n    const initialized = useStore(selector(options));\n    return initialized;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@reactflow/core/dist/esm/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@reactflow/node-resizer/dist/esm/index.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@reactflow/node-resizer/dist/esm/index.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NodeResizeControl: () => (/* binding */ ResizeControl$1),\n/* harmony export */   NodeResizer: () => (/* binding */ NodeResizer),\n/* harmony export */   ResizeControlVariant: () => (/* binding */ ResizeControlVariant)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var classcat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! classcat */ \"(ssr)/./node_modules/classcat/index.js\");\n/* harmony import */ var d3_drag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! d3-drag */ \"(ssr)/./node_modules/d3-drag/src/drag.js\");\n/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! d3-selection */ \"(ssr)/./node_modules/d3-selection/src/select.js\");\n/* harmony import */ var _reactflow_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @reactflow/core */ \"(ssr)/./node_modules/@reactflow/core/dist/esm/index.mjs\");\n\n\n\n\n\nvar ResizeControlVariant;\n(function(ResizeControlVariant) {\n    ResizeControlVariant[\"Line\"] = \"line\";\n    ResizeControlVariant[\"Handle\"] = \"handle\";\n})(ResizeControlVariant || (ResizeControlVariant = {}));\n// returns an array of two numbers (0, 1 or -1) representing the direction of the resize\n// 0 = no change, 1 = increase, -1 = decrease\nfunction getDirection({ width, prevWidth, height, prevHeight, invertX, invertY }) {\n    const deltaWidth = width - prevWidth;\n    const deltaHeight = height - prevHeight;\n    const direction = [\n        deltaWidth > 0 ? 1 : deltaWidth < 0 ? -1 : 0,\n        deltaHeight > 0 ? 1 : deltaHeight < 0 ? -1 : 0\n    ];\n    if (deltaWidth && invertX) {\n        direction[0] = direction[0] * -1;\n    }\n    if (deltaHeight && invertY) {\n        direction[1] = direction[1] * -1;\n    }\n    return direction;\n}\nconst initPrevValues = {\n    width: 0,\n    height: 0,\n    x: 0,\n    y: 0\n};\nconst initStartValues = {\n    ...initPrevValues,\n    pointerX: 0,\n    pointerY: 0,\n    aspectRatio: 1\n};\nfunction ResizeControl({ nodeId, position, variant = ResizeControlVariant.Handle, className, style = {}, children, color, minWidth = 10, minHeight = 10, maxWidth = Number.MAX_VALUE, maxHeight = Number.MAX_VALUE, keepAspectRatio = false, shouldResize, onResizeStart, onResize, onResizeEnd }) {\n    const contextNodeId = (0,_reactflow_core__WEBPACK_IMPORTED_MODULE_2__.useNodeId)();\n    const id = typeof nodeId === \"string\" ? nodeId : contextNodeId;\n    const store = (0,_reactflow_core__WEBPACK_IMPORTED_MODULE_2__.useStoreApi)();\n    const resizeControlRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const startValues = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(initStartValues);\n    const prevValues = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(initPrevValues);\n    const getPointerPosition = (0,_reactflow_core__WEBPACK_IMPORTED_MODULE_2__.useGetPointerPosition)();\n    const defaultPosition = variant === ResizeControlVariant.Line ? \"right\" : \"bottom-right\";\n    const controlPosition = position ?? defaultPosition;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!resizeControlRef.current || !id) {\n            return;\n        }\n        const selection = (0,d3_selection__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(resizeControlRef.current);\n        const enableX = controlPosition.includes(\"right\") || controlPosition.includes(\"left\");\n        const enableY = controlPosition.includes(\"bottom\") || controlPosition.includes(\"top\");\n        const invertX = controlPosition.includes(\"left\");\n        const invertY = controlPosition.includes(\"top\");\n        const dragHandler = (0,d3_drag__WEBPACK_IMPORTED_MODULE_4__[\"default\"])().on(\"start\", (event)=>{\n            const node = store.getState().nodeInternals.get(id);\n            const { xSnapped, ySnapped } = getPointerPosition(event);\n            prevValues.current = {\n                width: node?.width ?? 0,\n                height: node?.height ?? 0,\n                x: node?.position.x ?? 0,\n                y: node?.position.y ?? 0\n            };\n            startValues.current = {\n                ...prevValues.current,\n                pointerX: xSnapped,\n                pointerY: ySnapped,\n                aspectRatio: prevValues.current.width / prevValues.current.height\n            };\n            onResizeStart?.(event, {\n                ...prevValues.current\n            });\n        }).on(\"drag\", (event)=>{\n            const { nodeInternals, triggerNodeChanges } = store.getState();\n            const { xSnapped, ySnapped } = getPointerPosition(event);\n            const node = nodeInternals.get(id);\n            if (node) {\n                const changes = [];\n                const { pointerX: startX, pointerY: startY, width: startWidth, height: startHeight, x: startNodeX, y: startNodeY, aspectRatio } = startValues.current;\n                const { x: prevX, y: prevY, width: prevWidth, height: prevHeight } = prevValues.current;\n                const distX = Math.floor(enableX ? xSnapped - startX : 0);\n                const distY = Math.floor(enableY ? ySnapped - startY : 0);\n                let width = (0,_reactflow_core__WEBPACK_IMPORTED_MODULE_2__.clamp)(startWidth + (invertX ? -distX : distX), minWidth, maxWidth);\n                let height = (0,_reactflow_core__WEBPACK_IMPORTED_MODULE_2__.clamp)(startHeight + (invertY ? -distY : distY), minHeight, maxHeight);\n                if (keepAspectRatio) {\n                    const nextAspectRatio = width / height;\n                    const isDiagonal = enableX && enableY;\n                    const isHorizontal = enableX && !enableY;\n                    const isVertical = enableY && !enableX;\n                    width = nextAspectRatio <= aspectRatio && isDiagonal || isVertical ? height * aspectRatio : width;\n                    height = nextAspectRatio > aspectRatio && isDiagonal || isHorizontal ? width / aspectRatio : height;\n                    if (width >= maxWidth) {\n                        width = maxWidth;\n                        height = maxWidth / aspectRatio;\n                    } else if (width <= minWidth) {\n                        width = minWidth;\n                        height = minWidth / aspectRatio;\n                    }\n                    if (height >= maxHeight) {\n                        height = maxHeight;\n                        width = maxHeight * aspectRatio;\n                    } else if (height <= minHeight) {\n                        height = minHeight;\n                        width = minHeight * aspectRatio;\n                    }\n                }\n                const isWidthChange = width !== prevWidth;\n                const isHeightChange = height !== prevHeight;\n                if (invertX || invertY) {\n                    const x = invertX ? startNodeX - (width - startWidth) : startNodeX;\n                    const y = invertY ? startNodeY - (height - startHeight) : startNodeY;\n                    // only transform the node if the width or height changes\n                    const isXPosChange = x !== prevX && isWidthChange;\n                    const isYPosChange = y !== prevY && isHeightChange;\n                    if (isXPosChange || isYPosChange) {\n                        const positionChange = {\n                            id: node.id,\n                            type: \"position\",\n                            position: {\n                                x: isXPosChange ? x : prevX,\n                                y: isYPosChange ? y : prevY\n                            }\n                        };\n                        changes.push(positionChange);\n                        prevValues.current.x = positionChange.position.x;\n                        prevValues.current.y = positionChange.position.y;\n                    }\n                }\n                if (isWidthChange || isHeightChange) {\n                    const dimensionChange = {\n                        id: id,\n                        type: \"dimensions\",\n                        updateStyle: true,\n                        resizing: true,\n                        dimensions: {\n                            width: width,\n                            height: height\n                        }\n                    };\n                    changes.push(dimensionChange);\n                    prevValues.current.width = width;\n                    prevValues.current.height = height;\n                }\n                if (changes.length === 0) {\n                    return;\n                }\n                const direction = getDirection({\n                    width: prevValues.current.width,\n                    prevWidth,\n                    height: prevValues.current.height,\n                    prevHeight,\n                    invertX,\n                    invertY\n                });\n                const nextValues = {\n                    ...prevValues.current,\n                    direction\n                };\n                const callResize = shouldResize?.(event, nextValues);\n                if (callResize === false) {\n                    return;\n                }\n                onResize?.(event, nextValues);\n                triggerNodeChanges(changes);\n            }\n        }).on(\"end\", (event)=>{\n            const dimensionChange = {\n                id: id,\n                type: \"dimensions\",\n                resizing: false\n            };\n            onResizeEnd?.(event, {\n                ...prevValues.current\n            });\n            store.getState().triggerNodeChanges([\n                dimensionChange\n            ]);\n        });\n        selection.call(dragHandler);\n        return ()=>{\n            selection.on(\".drag\", null);\n        };\n    }, [\n        id,\n        controlPosition,\n        minWidth,\n        minHeight,\n        maxWidth,\n        maxHeight,\n        keepAspectRatio,\n        getPointerPosition,\n        onResizeStart,\n        onResize,\n        onResizeEnd\n    ]);\n    const positionClassNames = controlPosition.split(\"-\");\n    const colorStyleProp = variant === ResizeControlVariant.Line ? \"borderColor\" : \"backgroundColor\";\n    const controlStyle = color ? {\n        ...style,\n        [colorStyleProp]: color\n    } : style;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: (0,classcat__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n            \"react-flow__resize-control\",\n            \"nodrag\",\n            ...positionClassNames,\n            variant,\n            className\n        ]),\n        ref: resizeControlRef,\n        style: controlStyle\n    }, children);\n}\nvar ResizeControl$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(ResizeControl);\nconst handleControls = [\n    \"top-left\",\n    \"top-right\",\n    \"bottom-left\",\n    \"bottom-right\"\n];\nconst lineControls = [\n    \"top\",\n    \"right\",\n    \"bottom\",\n    \"left\"\n];\nfunction NodeResizer({ nodeId, isVisible = true, handleClassName, handleStyle, lineClassName, lineStyle, color, minWidth = 10, minHeight = 10, maxWidth = Number.MAX_VALUE, maxHeight = Number.MAX_VALUE, keepAspectRatio = false, shouldResize, onResizeStart, onResize, onResizeEnd }) {\n    if (!isVisible) {\n        return null;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, lineControls.map((c)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ResizeControl$1, {\n            key: c,\n            className: lineClassName,\n            style: lineStyle,\n            nodeId: nodeId,\n            position: c,\n            variant: ResizeControlVariant.Line,\n            color: color,\n            minWidth: minWidth,\n            minHeight: minHeight,\n            maxWidth: maxWidth,\n            maxHeight: maxHeight,\n            onResizeStart: onResizeStart,\n            keepAspectRatio: keepAspectRatio,\n            shouldResize: shouldResize,\n            onResize: onResize,\n            onResizeEnd: onResizeEnd\n        })), handleControls.map((c)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ResizeControl$1, {\n            key: c,\n            className: handleClassName,\n            style: handleStyle,\n            nodeId: nodeId,\n            position: c,\n            color: color,\n            minWidth: minWidth,\n            minHeight: minHeight,\n            maxWidth: maxWidth,\n            maxHeight: maxHeight,\n            onResizeStart: onResizeStart,\n            keepAspectRatio: keepAspectRatio,\n            shouldResize: shouldResize,\n            onResize: onResize,\n            onResizeEnd: onResizeEnd\n        })));\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0Zmxvdy9ub2RlLXJlc2l6ZXIvZGlzdC9lc20vaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXVEO0FBQzdCO0FBQ0s7QUFDTztBQUNpRDtBQUV2RixJQUFJVztBQUNILFVBQVVBLG9CQUFvQjtJQUMzQkEsb0JBQW9CLENBQUMsT0FBTyxHQUFHO0lBQy9CQSxvQkFBb0IsQ0FBQyxTQUFTLEdBQUc7QUFDckMsR0FBR0Esd0JBQXlCQSxDQUFBQSx1QkFBdUIsQ0FBQztBQUVwRCx3RkFBd0Y7QUFDeEYsNkNBQTZDO0FBQzdDLFNBQVNDLGFBQWEsRUFBRUMsS0FBSyxFQUFFQyxTQUFTLEVBQUVDLE1BQU0sRUFBRUMsVUFBVSxFQUFFQyxPQUFPLEVBQUVDLE9BQU8sRUFBRTtJQUM1RSxNQUFNQyxhQUFhTixRQUFRQztJQUMzQixNQUFNTSxjQUFjTCxTQUFTQztJQUM3QixNQUFNSyxZQUFZO1FBQUNGLGFBQWEsSUFBSSxJQUFJQSxhQUFhLElBQUksQ0FBQyxJQUFJO1FBQUdDLGNBQWMsSUFBSSxJQUFJQSxjQUFjLElBQUksQ0FBQyxJQUFJO0tBQUU7SUFDaEgsSUFBSUQsY0FBY0YsU0FBUztRQUN2QkksU0FBUyxDQUFDLEVBQUUsR0FBR0EsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUFDO0lBQ25DO0lBQ0EsSUFBSUQsZUFBZUYsU0FBUztRQUN4QkcsU0FBUyxDQUFDLEVBQUUsR0FBR0EsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUFDO0lBQ25DO0lBQ0EsT0FBT0E7QUFDWDtBQUVBLE1BQU1DLGlCQUFpQjtJQUFFVCxPQUFPO0lBQUdFLFFBQVE7SUFBR1EsR0FBRztJQUFHQyxHQUFHO0FBQUU7QUFDekQsTUFBTUMsa0JBQWtCO0lBQ3BCLEdBQUdILGNBQWM7SUFDakJJLFVBQVU7SUFDVkMsVUFBVTtJQUNWQyxhQUFhO0FBQ2pCO0FBQ0EsU0FBU0MsY0FBYyxFQUFFQyxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsVUFBVXJCLHFCQUFxQnNCLE1BQU0sRUFBRUMsU0FBUyxFQUFFQyxRQUFRLENBQUMsQ0FBQyxFQUFFQyxRQUFRLEVBQUVDLEtBQUssRUFBRUMsV0FBVyxFQUFFLEVBQUVDLFlBQVksRUFBRSxFQUFFQyxXQUFXQyxPQUFPQyxTQUFTLEVBQUVDLFlBQVlGLE9BQU9DLFNBQVMsRUFBRUUsa0JBQWtCLEtBQUssRUFBRUMsWUFBWSxFQUFFQyxhQUFhLEVBQUVDLFFBQVEsRUFBRUMsV0FBVyxFQUFHO0lBQzlSLE1BQU1DLGdCQUFnQjFDLDBEQUFTQTtJQUMvQixNQUFNMkMsS0FBSyxPQUFPcEIsV0FBVyxXQUFXQSxTQUFTbUI7SUFDakQsTUFBTUUsUUFBUTNDLDREQUFXQTtJQUN6QixNQUFNNEMsbUJBQW1CbEQsNkNBQU1BLENBQUM7SUFDaEMsTUFBTW1ELGNBQWNuRCw2Q0FBTUEsQ0FBQ3VCO0lBQzNCLE1BQU02QixhQUFhcEQsNkNBQU1BLENBQUNvQjtJQUMxQixNQUFNaUMscUJBQXFCOUMsc0VBQXFCQTtJQUNoRCxNQUFNK0Msa0JBQWtCeEIsWUFBWXJCLHFCQUFxQjhDLElBQUksR0FBRyxVQUFVO0lBQzFFLE1BQU1DLGtCQUFrQjNCLFlBQVl5QjtJQUNwQ3JELGdEQUFTQSxDQUFDO1FBQ04sSUFBSSxDQUFDaUQsaUJBQWlCTyxPQUFPLElBQUksQ0FBQ1QsSUFBSTtZQUNsQztRQUNKO1FBQ0EsTUFBTVUsWUFBWXRELHdEQUFNQSxDQUFDOEMsaUJBQWlCTyxPQUFPO1FBQ2pELE1BQU1FLFVBQVVILGdCQUFnQkksUUFBUSxDQUFDLFlBQVlKLGdCQUFnQkksUUFBUSxDQUFDO1FBQzlFLE1BQU1DLFVBQVVMLGdCQUFnQkksUUFBUSxDQUFDLGFBQWFKLGdCQUFnQkksUUFBUSxDQUFDO1FBQy9FLE1BQU03QyxVQUFVeUMsZ0JBQWdCSSxRQUFRLENBQUM7UUFDekMsTUFBTTVDLFVBQVV3QyxnQkFBZ0JJLFFBQVEsQ0FBQztRQUN6QyxNQUFNRSxjQUFjM0QsbURBQUlBLEdBQ25CNEQsRUFBRSxDQUFDLFNBQVMsQ0FBQ0M7WUFDZCxNQUFNQyxPQUFPaEIsTUFBTWlCLFFBQVEsR0FBR0MsYUFBYSxDQUFDQyxHQUFHLENBQUNwQjtZQUNoRCxNQUFNLEVBQUVxQixRQUFRLEVBQUVDLFFBQVEsRUFBRSxHQUFHakIsbUJBQW1CVztZQUNsRFosV0FBV0ssT0FBTyxHQUFHO2dCQUNqQjlDLE9BQU9zRCxNQUFNdEQsU0FBUztnQkFDdEJFLFFBQVFvRCxNQUFNcEQsVUFBVTtnQkFDeEJRLEdBQUc0QyxNQUFNcEMsU0FBU1IsS0FBSztnQkFDdkJDLEdBQUcyQyxNQUFNcEMsU0FBU1AsS0FBSztZQUMzQjtZQUNBNkIsWUFBWU0sT0FBTyxHQUFHO2dCQUNsQixHQUFHTCxXQUFXSyxPQUFPO2dCQUNyQmpDLFVBQVU2QztnQkFDVjVDLFVBQVU2QztnQkFDVjVDLGFBQWEwQixXQUFXSyxPQUFPLENBQUM5QyxLQUFLLEdBQUd5QyxXQUFXSyxPQUFPLENBQUM1QyxNQUFNO1lBQ3JFO1lBQ0ErQixnQkFBZ0JvQixPQUFPO2dCQUFFLEdBQUdaLFdBQVdLLE9BQU87WUFBQztRQUNuRCxHQUNLTSxFQUFFLENBQUMsUUFBUSxDQUFDQztZQUNiLE1BQU0sRUFBRUcsYUFBYSxFQUFFSSxrQkFBa0IsRUFBRSxHQUFHdEIsTUFBTWlCLFFBQVE7WUFDNUQsTUFBTSxFQUFFRyxRQUFRLEVBQUVDLFFBQVEsRUFBRSxHQUFHakIsbUJBQW1CVztZQUNsRCxNQUFNQyxPQUFPRSxjQUFjQyxHQUFHLENBQUNwQjtZQUMvQixJQUFJaUIsTUFBTTtnQkFDTixNQUFNTyxVQUFVLEVBQUU7Z0JBQ2xCLE1BQU0sRUFBRWhELFVBQVVpRCxNQUFNLEVBQUVoRCxVQUFVaUQsTUFBTSxFQUFFL0QsT0FBT2dFLFVBQVUsRUFBRTlELFFBQVErRCxXQUFXLEVBQUV2RCxHQUFHd0QsVUFBVSxFQUFFdkQsR0FBR3dELFVBQVUsRUFBRXBELFdBQVcsRUFBRyxHQUFHeUIsWUFBWU0sT0FBTztnQkFDdEosTUFBTSxFQUFFcEMsR0FBRzBELEtBQUssRUFBRXpELEdBQUcwRCxLQUFLLEVBQUVyRSxPQUFPQyxTQUFTLEVBQUVDLFFBQVFDLFVBQVUsRUFBRSxHQUFHc0MsV0FBV0ssT0FBTztnQkFDdkYsTUFBTXdCLFFBQVFDLEtBQUtDLEtBQUssQ0FBQ3hCLFVBQVVVLFdBQVdJLFNBQVM7Z0JBQ3ZELE1BQU1XLFFBQVFGLEtBQUtDLEtBQUssQ0FBQ3RCLFVBQVVTLFdBQVdJLFNBQVM7Z0JBQ3ZELElBQUkvRCxRQUFRSCxzREFBS0EsQ0FBQ21FLGFBQWM1RCxDQUFBQSxVQUFVLENBQUNrRSxRQUFRQSxLQUFJLEdBQUk3QyxVQUFVRTtnQkFDckUsSUFBSXpCLFNBQVNMLHNEQUFLQSxDQUFDb0UsY0FBZTVELENBQUFBLFVBQVUsQ0FBQ29FLFFBQVFBLEtBQUksR0FBSS9DLFdBQVdJO2dCQUN4RSxJQUFJQyxpQkFBaUI7b0JBQ2pCLE1BQU0yQyxrQkFBa0IxRSxRQUFRRTtvQkFDaEMsTUFBTXlFLGFBQWEzQixXQUFXRTtvQkFDOUIsTUFBTTBCLGVBQWU1QixXQUFXLENBQUNFO29CQUNqQyxNQUFNMkIsYUFBYTNCLFdBQVcsQ0FBQ0Y7b0JBQy9CaEQsUUFBUSxtQkFBb0JlLGVBQWU0RCxjQUFlRSxhQUFhM0UsU0FBU2EsY0FBY2Y7b0JBQzlGRSxTQUFTLGtCQUFtQmEsZUFBZTRELGNBQWVDLGVBQWU1RSxRQUFRZSxjQUFjYjtvQkFDL0YsSUFBSUYsU0FBUzJCLFVBQVU7d0JBQ25CM0IsUUFBUTJCO3dCQUNSekIsU0FBU3lCLFdBQVdaO29CQUN4QixPQUNLLElBQUlmLFNBQVN5QixVQUFVO3dCQUN4QnpCLFFBQVF5Qjt3QkFDUnZCLFNBQVN1QixXQUFXVjtvQkFDeEI7b0JBQ0EsSUFBSWIsVUFBVTRCLFdBQVc7d0JBQ3JCNUIsU0FBUzRCO3dCQUNUOUIsUUFBUThCLFlBQVlmO29CQUN4QixPQUNLLElBQUliLFVBQVV3QixXQUFXO3dCQUMxQnhCLFNBQVN3Qjt3QkFDVDFCLFFBQVEwQixZQUFZWDtvQkFDeEI7Z0JBQ0o7Z0JBQ0EsTUFBTStELGdCQUFnQjlFLFVBQVVDO2dCQUNoQyxNQUFNOEUsaUJBQWlCN0UsV0FBV0M7Z0JBQ2xDLElBQUlDLFdBQVdDLFNBQVM7b0JBQ3BCLE1BQU1LLElBQUlOLFVBQVU4RCxhQUFjbEUsQ0FBQUEsUUFBUWdFLFVBQVMsSUFBS0U7b0JBQ3hELE1BQU12RCxJQUFJTixVQUFVOEQsYUFBY2pFLENBQUFBLFNBQVMrRCxXQUFVLElBQUtFO29CQUMxRCx5REFBeUQ7b0JBQ3pELE1BQU1hLGVBQWV0RSxNQUFNMEQsU0FBU1U7b0JBQ3BDLE1BQU1HLGVBQWV0RSxNQUFNMEQsU0FBU1U7b0JBQ3BDLElBQUlDLGdCQUFnQkMsY0FBYzt3QkFDOUIsTUFBTUMsaUJBQWlCOzRCQUNuQjdDLElBQUlpQixLQUFLakIsRUFBRTs0QkFDWDhDLE1BQU07NEJBQ05qRSxVQUFVO2dDQUNOUixHQUFHc0UsZUFBZXRFLElBQUkwRDtnQ0FDdEJ6RCxHQUFHc0UsZUFBZXRFLElBQUkwRDs0QkFDMUI7d0JBQ0o7d0JBQ0FSLFFBQVF1QixJQUFJLENBQUNGO3dCQUNiekMsV0FBV0ssT0FBTyxDQUFDcEMsQ0FBQyxHQUFHd0UsZUFBZWhFLFFBQVEsQ0FBQ1IsQ0FBQzt3QkFDaEQrQixXQUFXSyxPQUFPLENBQUNuQyxDQUFDLEdBQUd1RSxlQUFlaEUsUUFBUSxDQUFDUCxDQUFDO29CQUNwRDtnQkFDSjtnQkFDQSxJQUFJbUUsaUJBQWlCQyxnQkFBZ0I7b0JBQ2pDLE1BQU1NLGtCQUFrQjt3QkFDcEJoRCxJQUFJQTt3QkFDSjhDLE1BQU07d0JBQ05HLGFBQWE7d0JBQ2JDLFVBQVU7d0JBQ1ZDLFlBQVk7NEJBQ1J4RixPQUFPQTs0QkFDUEUsUUFBUUE7d0JBQ1o7b0JBQ0o7b0JBQ0EyRCxRQUFRdUIsSUFBSSxDQUFDQztvQkFDYjVDLFdBQVdLLE9BQU8sQ0FBQzlDLEtBQUssR0FBR0E7b0JBQzNCeUMsV0FBV0ssT0FBTyxDQUFDNUMsTUFBTSxHQUFHQTtnQkFDaEM7Z0JBQ0EsSUFBSTJELFFBQVE0QixNQUFNLEtBQUssR0FBRztvQkFDdEI7Z0JBQ0o7Z0JBQ0EsTUFBTWpGLFlBQVlULGFBQWE7b0JBQzNCQyxPQUFPeUMsV0FBV0ssT0FBTyxDQUFDOUMsS0FBSztvQkFDL0JDO29CQUNBQyxRQUFRdUMsV0FBV0ssT0FBTyxDQUFDNUMsTUFBTTtvQkFDakNDO29CQUNBQztvQkFDQUM7Z0JBQ0o7Z0JBQ0EsTUFBTXFGLGFBQWE7b0JBQUUsR0FBR2pELFdBQVdLLE9BQU87b0JBQUV0QztnQkFBVTtnQkFDdEQsTUFBTW1GLGFBQWEzRCxlQUFlcUIsT0FBT3FDO2dCQUN6QyxJQUFJQyxlQUFlLE9BQU87b0JBQ3RCO2dCQUNKO2dCQUNBekQsV0FBV21CLE9BQU9xQztnQkFDbEI5QixtQkFBbUJDO1lBQ3ZCO1FBQ0osR0FDS1QsRUFBRSxDQUFDLE9BQU8sQ0FBQ0M7WUFDWixNQUFNZ0Msa0JBQWtCO2dCQUNwQmhELElBQUlBO2dCQUNKOEMsTUFBTTtnQkFDTkksVUFBVTtZQUNkO1lBQ0FwRCxjQUFja0IsT0FBTztnQkFBRSxHQUFHWixXQUFXSyxPQUFPO1lBQUM7WUFDN0NSLE1BQU1pQixRQUFRLEdBQUdLLGtCQUFrQixDQUFDO2dCQUFDeUI7YUFBZ0I7UUFDekQ7UUFDQXRDLFVBQVU2QyxJQUFJLENBQUN6QztRQUNmLE9BQU87WUFDSEosVUFBVUssRUFBRSxDQUFDLFNBQVM7UUFDMUI7SUFDSixHQUFHO1FBQ0NmO1FBQ0FRO1FBQ0FwQjtRQUNBQztRQUNBQztRQUNBRztRQUNBQztRQUNBVztRQUNBVDtRQUNBQztRQUNBQztLQUNIO0lBQ0QsTUFBTTBELHFCQUFxQmhELGdCQUFnQmlELEtBQUssQ0FBQztJQUNqRCxNQUFNQyxpQkFBaUI1RSxZQUFZckIscUJBQXFCOEMsSUFBSSxHQUFHLGdCQUFnQjtJQUMvRSxNQUFNb0QsZUFBZXhFLFFBQVE7UUFBRSxHQUFHRixLQUFLO1FBQUUsQ0FBQ3lFLGVBQWUsRUFBRXZFO0lBQU0sSUFBSUY7SUFDckUscUJBQVFuQyxnREFBbUIsQ0FBQyxPQUFPO1FBQUVrQyxXQUFXOUIsb0RBQUVBLENBQUM7WUFBQztZQUE4QjtlQUFhc0c7WUFBb0IxRTtZQUFTRTtTQUFVO1FBQUc2RSxLQUFLM0Q7UUFBa0JqQixPQUFPMEU7SUFBYSxHQUFHekU7QUFDM0w7QUFDQSxJQUFJNEUsZ0NBQWtCL0csMkNBQUlBLENBQUM0QjtBQUUzQixNQUFNb0YsaUJBQWlCO0lBQUM7SUFBWTtJQUFhO0lBQWU7Q0FBZTtBQUMvRSxNQUFNQyxlQUFlO0lBQUM7SUFBTztJQUFTO0lBQVU7Q0FBTztBQUN2RCxTQUFTQyxZQUFZLEVBQUVyRixNQUFNLEVBQUVzRixZQUFZLElBQUksRUFBRUMsZUFBZSxFQUFFQyxXQUFXLEVBQUVDLGFBQWEsRUFBRUMsU0FBUyxFQUFFbkYsS0FBSyxFQUFFQyxXQUFXLEVBQUUsRUFBRUMsWUFBWSxFQUFFLEVBQUVDLFdBQVdDLE9BQU9DLFNBQVMsRUFBRUMsWUFBWUYsT0FBT0MsU0FBUyxFQUFFRSxrQkFBa0IsS0FBSyxFQUFFQyxZQUFZLEVBQUVDLGFBQWEsRUFBRUMsUUFBUSxFQUFFQyxXQUFXLEVBQUc7SUFDcFIsSUFBSSxDQUFDb0UsV0FBVztRQUNaLE9BQU87SUFDWDtJQUNBLHFCQUFRcEgsZ0RBQW1CLENBQUNBLDJDQUFjLEVBQUUsTUFDeENrSCxhQUFhUSxHQUFHLENBQUMsQ0FBQ0Msa0JBQU8zSCxnREFBbUIsQ0FBQ2dILGlCQUFpQjtZQUFFWSxLQUFLRDtZQUFHekYsV0FBV3FGO1lBQWVwRixPQUFPcUY7WUFBVzFGLFFBQVFBO1lBQVFDLFVBQVU0RjtZQUFHM0YsU0FBU3JCLHFCQUFxQjhDLElBQUk7WUFBRXBCLE9BQU9BO1lBQU9DLFVBQVVBO1lBQVVDLFdBQVdBO1lBQVdDLFVBQVVBO1lBQVVHLFdBQVdBO1lBQVdHLGVBQWVBO1lBQWVGLGlCQUFpQkE7WUFBaUJDLGNBQWNBO1lBQWNFLFVBQVVBO1lBQVVDLGFBQWFBO1FBQVksS0FDaGFpRSxlQUFlUyxHQUFHLENBQUMsQ0FBQ0Msa0JBQU8zSCxnREFBbUIsQ0FBQ2dILGlCQUFpQjtZQUFFWSxLQUFLRDtZQUFHekYsV0FBV21GO1lBQWlCbEYsT0FBT21GO1lBQWF4RixRQUFRQTtZQUFRQyxVQUFVNEY7WUFBR3RGLE9BQU9BO1lBQU9DLFVBQVVBO1lBQVVDLFdBQVdBO1lBQVdDLFVBQVVBO1lBQVVHLFdBQVdBO1lBQVdHLGVBQWVBO1lBQWVGLGlCQUFpQkE7WUFBaUJDLGNBQWNBO1lBQWNFLFVBQVVBO1lBQVVDLGFBQWFBO1FBQVk7QUFDMVk7QUFFbUYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ob3ZlcmxpbmstZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHJlYWN0Zmxvdy9ub2RlLXJlc2l6ZXIvZGlzdC9lc20vaW5kZXgubWpzP2JmYzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IG1lbW8sIHVzZVJlZiwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNjIGZyb20gJ2NsYXNzY2F0JztcbmltcG9ydCB7IGRyYWcgfSBmcm9tICdkMy1kcmFnJztcbmltcG9ydCB7IHNlbGVjdCB9IGZyb20gJ2QzLXNlbGVjdGlvbic7XG5pbXBvcnQgeyB1c2VOb2RlSWQsIHVzZVN0b3JlQXBpLCB1c2VHZXRQb2ludGVyUG9zaXRpb24sIGNsYW1wIH0gZnJvbSAnQHJlYWN0Zmxvdy9jb3JlJztcblxudmFyIFJlc2l6ZUNvbnRyb2xWYXJpYW50O1xuKGZ1bmN0aW9uIChSZXNpemVDb250cm9sVmFyaWFudCkge1xuICAgIFJlc2l6ZUNvbnRyb2xWYXJpYW50W1wiTGluZVwiXSA9IFwibGluZVwiO1xuICAgIFJlc2l6ZUNvbnRyb2xWYXJpYW50W1wiSGFuZGxlXCJdID0gXCJoYW5kbGVcIjtcbn0pKFJlc2l6ZUNvbnRyb2xWYXJpYW50IHx8IChSZXNpemVDb250cm9sVmFyaWFudCA9IHt9KSk7XG5cbi8vIHJldHVybnMgYW4gYXJyYXkgb2YgdHdvIG51bWJlcnMgKDAsIDEgb3IgLTEpIHJlcHJlc2VudGluZyB0aGUgZGlyZWN0aW9uIG9mIHRoZSByZXNpemVcbi8vIDAgPSBubyBjaGFuZ2UsIDEgPSBpbmNyZWFzZSwgLTEgPSBkZWNyZWFzZVxuZnVuY3Rpb24gZ2V0RGlyZWN0aW9uKHsgd2lkdGgsIHByZXZXaWR0aCwgaGVpZ2h0LCBwcmV2SGVpZ2h0LCBpbnZlcnRYLCBpbnZlcnRZIH0pIHtcbiAgICBjb25zdCBkZWx0YVdpZHRoID0gd2lkdGggLSBwcmV2V2lkdGg7XG4gICAgY29uc3QgZGVsdGFIZWlnaHQgPSBoZWlnaHQgLSBwcmV2SGVpZ2h0O1xuICAgIGNvbnN0IGRpcmVjdGlvbiA9IFtkZWx0YVdpZHRoID4gMCA/IDEgOiBkZWx0YVdpZHRoIDwgMCA/IC0xIDogMCwgZGVsdGFIZWlnaHQgPiAwID8gMSA6IGRlbHRhSGVpZ2h0IDwgMCA/IC0xIDogMF07XG4gICAgaWYgKGRlbHRhV2lkdGggJiYgaW52ZXJ0WCkge1xuICAgICAgICBkaXJlY3Rpb25bMF0gPSBkaXJlY3Rpb25bMF0gKiAtMTtcbiAgICB9XG4gICAgaWYgKGRlbHRhSGVpZ2h0ICYmIGludmVydFkpIHtcbiAgICAgICAgZGlyZWN0aW9uWzFdID0gZGlyZWN0aW9uWzFdICogLTE7XG4gICAgfVxuICAgIHJldHVybiBkaXJlY3Rpb247XG59XG5cbmNvbnN0IGluaXRQcmV2VmFsdWVzID0geyB3aWR0aDogMCwgaGVpZ2h0OiAwLCB4OiAwLCB5OiAwIH07XG5jb25zdCBpbml0U3RhcnRWYWx1ZXMgPSB7XG4gICAgLi4uaW5pdFByZXZWYWx1ZXMsXG4gICAgcG9pbnRlclg6IDAsXG4gICAgcG9pbnRlclk6IDAsXG4gICAgYXNwZWN0UmF0aW86IDEsXG59O1xuZnVuY3Rpb24gUmVzaXplQ29udHJvbCh7IG5vZGVJZCwgcG9zaXRpb24sIHZhcmlhbnQgPSBSZXNpemVDb250cm9sVmFyaWFudC5IYW5kbGUsIGNsYXNzTmFtZSwgc3R5bGUgPSB7fSwgY2hpbGRyZW4sIGNvbG9yLCBtaW5XaWR0aCA9IDEwLCBtaW5IZWlnaHQgPSAxMCwgbWF4V2lkdGggPSBOdW1iZXIuTUFYX1ZBTFVFLCBtYXhIZWlnaHQgPSBOdW1iZXIuTUFYX1ZBTFVFLCBrZWVwQXNwZWN0UmF0aW8gPSBmYWxzZSwgc2hvdWxkUmVzaXplLCBvblJlc2l6ZVN0YXJ0LCBvblJlc2l6ZSwgb25SZXNpemVFbmQsIH0pIHtcbiAgICBjb25zdCBjb250ZXh0Tm9kZUlkID0gdXNlTm9kZUlkKCk7XG4gICAgY29uc3QgaWQgPSB0eXBlb2Ygbm9kZUlkID09PSAnc3RyaW5nJyA/IG5vZGVJZCA6IGNvbnRleHROb2RlSWQ7XG4gICAgY29uc3Qgc3RvcmUgPSB1c2VTdG9yZUFwaSgpO1xuICAgIGNvbnN0IHJlc2l6ZUNvbnRyb2xSZWYgPSB1c2VSZWYobnVsbCk7XG4gICAgY29uc3Qgc3RhcnRWYWx1ZXMgPSB1c2VSZWYoaW5pdFN0YXJ0VmFsdWVzKTtcbiAgICBjb25zdCBwcmV2VmFsdWVzID0gdXNlUmVmKGluaXRQcmV2VmFsdWVzKTtcbiAgICBjb25zdCBnZXRQb2ludGVyUG9zaXRpb24gPSB1c2VHZXRQb2ludGVyUG9zaXRpb24oKTtcbiAgICBjb25zdCBkZWZhdWx0UG9zaXRpb24gPSB2YXJpYW50ID09PSBSZXNpemVDb250cm9sVmFyaWFudC5MaW5lID8gJ3JpZ2h0JyA6ICdib3R0b20tcmlnaHQnO1xuICAgIGNvbnN0IGNvbnRyb2xQb3NpdGlvbiA9IHBvc2l0aW9uID8/IGRlZmF1bHRQb3NpdGlvbjtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIXJlc2l6ZUNvbnRyb2xSZWYuY3VycmVudCB8fCAhaWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSBzZWxlY3QocmVzaXplQ29udHJvbFJlZi5jdXJyZW50KTtcbiAgICAgICAgY29uc3QgZW5hYmxlWCA9IGNvbnRyb2xQb3NpdGlvbi5pbmNsdWRlcygncmlnaHQnKSB8fCBjb250cm9sUG9zaXRpb24uaW5jbHVkZXMoJ2xlZnQnKTtcbiAgICAgICAgY29uc3QgZW5hYmxlWSA9IGNvbnRyb2xQb3NpdGlvbi5pbmNsdWRlcygnYm90dG9tJykgfHwgY29udHJvbFBvc2l0aW9uLmluY2x1ZGVzKCd0b3AnKTtcbiAgICAgICAgY29uc3QgaW52ZXJ0WCA9IGNvbnRyb2xQb3NpdGlvbi5pbmNsdWRlcygnbGVmdCcpO1xuICAgICAgICBjb25zdCBpbnZlcnRZID0gY29udHJvbFBvc2l0aW9uLmluY2x1ZGVzKCd0b3AnKTtcbiAgICAgICAgY29uc3QgZHJhZ0hhbmRsZXIgPSBkcmFnKClcbiAgICAgICAgICAgIC5vbignc3RhcnQnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBzdG9yZS5nZXRTdGF0ZSgpLm5vZGVJbnRlcm5hbHMuZ2V0KGlkKTtcbiAgICAgICAgICAgIGNvbnN0IHsgeFNuYXBwZWQsIHlTbmFwcGVkIH0gPSBnZXRQb2ludGVyUG9zaXRpb24oZXZlbnQpO1xuICAgICAgICAgICAgcHJldlZhbHVlcy5jdXJyZW50ID0ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBub2RlPy53aWR0aCA/PyAwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogbm9kZT8uaGVpZ2h0ID8/IDAsXG4gICAgICAgICAgICAgICAgeDogbm9kZT8ucG9zaXRpb24ueCA/PyAwLFxuICAgICAgICAgICAgICAgIHk6IG5vZGU/LnBvc2l0aW9uLnkgPz8gMCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzdGFydFZhbHVlcy5jdXJyZW50ID0ge1xuICAgICAgICAgICAgICAgIC4uLnByZXZWYWx1ZXMuY3VycmVudCxcbiAgICAgICAgICAgICAgICBwb2ludGVyWDogeFNuYXBwZWQsXG4gICAgICAgICAgICAgICAgcG9pbnRlclk6IHlTbmFwcGVkLFxuICAgICAgICAgICAgICAgIGFzcGVjdFJhdGlvOiBwcmV2VmFsdWVzLmN1cnJlbnQud2lkdGggLyBwcmV2VmFsdWVzLmN1cnJlbnQuaGVpZ2h0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG9uUmVzaXplU3RhcnQ/LihldmVudCwgeyAuLi5wcmV2VmFsdWVzLmN1cnJlbnQgfSk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ2RyYWcnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgbm9kZUludGVybmFscywgdHJpZ2dlck5vZGVDaGFuZ2VzIH0gPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgICAgICAgY29uc3QgeyB4U25hcHBlZCwgeVNuYXBwZWQgfSA9IGdldFBvaW50ZXJQb3NpdGlvbihldmVudCk7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gbm9kZUludGVybmFscy5nZXQoaWQpO1xuICAgICAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFuZ2VzID0gW107XG4gICAgICAgICAgICAgICAgY29uc3QgeyBwb2ludGVyWDogc3RhcnRYLCBwb2ludGVyWTogc3RhcnRZLCB3aWR0aDogc3RhcnRXaWR0aCwgaGVpZ2h0OiBzdGFydEhlaWdodCwgeDogc3RhcnROb2RlWCwgeTogc3RhcnROb2RlWSwgYXNwZWN0UmF0aW8sIH0gPSBzdGFydFZhbHVlcy5jdXJyZW50O1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgeDogcHJldlgsIHk6IHByZXZZLCB3aWR0aDogcHJldldpZHRoLCBoZWlnaHQ6IHByZXZIZWlnaHQgfSA9IHByZXZWYWx1ZXMuY3VycmVudDtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXN0WCA9IE1hdGguZmxvb3IoZW5hYmxlWCA/IHhTbmFwcGVkIC0gc3RhcnRYIDogMCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGlzdFkgPSBNYXRoLmZsb29yKGVuYWJsZVkgPyB5U25hcHBlZCAtIHN0YXJ0WSA6IDApO1xuICAgICAgICAgICAgICAgIGxldCB3aWR0aCA9IGNsYW1wKHN0YXJ0V2lkdGggKyAoaW52ZXJ0WCA/IC1kaXN0WCA6IGRpc3RYKSwgbWluV2lkdGgsIG1heFdpZHRoKTtcbiAgICAgICAgICAgICAgICBsZXQgaGVpZ2h0ID0gY2xhbXAoc3RhcnRIZWlnaHQgKyAoaW52ZXJ0WSA/IC1kaXN0WSA6IGRpc3RZKSwgbWluSGVpZ2h0LCBtYXhIZWlnaHQpO1xuICAgICAgICAgICAgICAgIGlmIChrZWVwQXNwZWN0UmF0aW8pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dEFzcGVjdFJhdGlvID0gd2lkdGggLyBoZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzRGlhZ29uYWwgPSBlbmFibGVYICYmIGVuYWJsZVk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IGVuYWJsZVggJiYgIWVuYWJsZVk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzVmVydGljYWwgPSBlbmFibGVZICYmICFlbmFibGVYO1xuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IChuZXh0QXNwZWN0UmF0aW8gPD0gYXNwZWN0UmF0aW8gJiYgaXNEaWFnb25hbCkgfHwgaXNWZXJ0aWNhbCA/IGhlaWdodCAqIGFzcGVjdFJhdGlvIDogd2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IChuZXh0QXNwZWN0UmF0aW8gPiBhc3BlY3RSYXRpbyAmJiBpc0RpYWdvbmFsKSB8fCBpc0hvcml6b250YWwgPyB3aWR0aCAvIGFzcGVjdFJhdGlvIDogaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBpZiAod2lkdGggPj0gbWF4V2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gbWF4V2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBtYXhXaWR0aCAvIGFzcGVjdFJhdGlvO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHdpZHRoIDw9IG1pbldpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IG1pbldpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gbWluV2lkdGggLyBhc3BlY3RSYXRpbztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoaGVpZ2h0ID49IG1heEhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gbWF4SGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBtYXhIZWlnaHQgKiBhc3BlY3RSYXRpbztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChoZWlnaHQgPD0gbWluSGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBtaW5IZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IG1pbkhlaWdodCAqIGFzcGVjdFJhdGlvO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGlzV2lkdGhDaGFuZ2UgPSB3aWR0aCAhPT0gcHJldldpZHRoO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzSGVpZ2h0Q2hhbmdlID0gaGVpZ2h0ICE9PSBwcmV2SGVpZ2h0O1xuICAgICAgICAgICAgICAgIGlmIChpbnZlcnRYIHx8IGludmVydFkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeCA9IGludmVydFggPyBzdGFydE5vZGVYIC0gKHdpZHRoIC0gc3RhcnRXaWR0aCkgOiBzdGFydE5vZGVYO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB5ID0gaW52ZXJ0WSA/IHN0YXJ0Tm9kZVkgLSAoaGVpZ2h0IC0gc3RhcnRIZWlnaHQpIDogc3RhcnROb2RlWTtcbiAgICAgICAgICAgICAgICAgICAgLy8gb25seSB0cmFuc2Zvcm0gdGhlIG5vZGUgaWYgdGhlIHdpZHRoIG9yIGhlaWdodCBjaGFuZ2VzXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzWFBvc0NoYW5nZSA9IHggIT09IHByZXZYICYmIGlzV2lkdGhDaGFuZ2U7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzWVBvc0NoYW5nZSA9IHkgIT09IHByZXZZICYmIGlzSGVpZ2h0Q2hhbmdlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNYUG9zQ2hhbmdlIHx8IGlzWVBvc0NoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9zaXRpb25DaGFuZ2UgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IG5vZGUuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3Bvc2l0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiBpc1hQb3NDaGFuZ2UgPyB4IDogcHJldlgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IGlzWVBvc0NoYW5nZSA/IHkgOiBwcmV2WSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZXMucHVzaChwb3NpdGlvbkNoYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2VmFsdWVzLmN1cnJlbnQueCA9IHBvc2l0aW9uQ2hhbmdlLnBvc2l0aW9uLng7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2VmFsdWVzLmN1cnJlbnQueSA9IHBvc2l0aW9uQ2hhbmdlLnBvc2l0aW9uLnk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzV2lkdGhDaGFuZ2UgfHwgaXNIZWlnaHRDaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGltZW5zaW9uQ2hhbmdlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RpbWVuc2lvbnMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlU3R5bGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNpemluZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpbWVuc2lvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzLnB1c2goZGltZW5zaW9uQ2hhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgcHJldlZhbHVlcy5jdXJyZW50LndpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIHByZXZWYWx1ZXMuY3VycmVudC5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjaGFuZ2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IGdldERpcmVjdGlvbih7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBwcmV2VmFsdWVzLmN1cnJlbnQud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIHByZXZXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBwcmV2VmFsdWVzLmN1cnJlbnQuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICBwcmV2SGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICBpbnZlcnRYLFxuICAgICAgICAgICAgICAgICAgICBpbnZlcnRZLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRWYWx1ZXMgPSB7IC4uLnByZXZWYWx1ZXMuY3VycmVudCwgZGlyZWN0aW9uIH07XG4gICAgICAgICAgICAgICAgY29uc3QgY2FsbFJlc2l6ZSA9IHNob3VsZFJlc2l6ZT8uKGV2ZW50LCBuZXh0VmFsdWVzKTtcbiAgICAgICAgICAgICAgICBpZiAoY2FsbFJlc2l6ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvblJlc2l6ZT8uKGV2ZW50LCBuZXh0VmFsdWVzKTtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyTm9kZUNoYW5nZXMoY2hhbmdlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ2VuZCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGltZW5zaW9uQ2hhbmdlID0ge1xuICAgICAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgICAgICB0eXBlOiAnZGltZW5zaW9ucycsXG4gICAgICAgICAgICAgICAgcmVzaXppbmc6IGZhbHNlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG9uUmVzaXplRW5kPy4oZXZlbnQsIHsgLi4ucHJldlZhbHVlcy5jdXJyZW50IH0pO1xuICAgICAgICAgICAgc3RvcmUuZ2V0U3RhdGUoKS50cmlnZ2VyTm9kZUNoYW5nZXMoW2RpbWVuc2lvbkNoYW5nZV0pO1xuICAgICAgICB9KTtcbiAgICAgICAgc2VsZWN0aW9uLmNhbGwoZHJhZ0hhbmRsZXIpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgc2VsZWN0aW9uLm9uKCcuZHJhZycsIG51bGwpO1xuICAgICAgICB9O1xuICAgIH0sIFtcbiAgICAgICAgaWQsXG4gICAgICAgIGNvbnRyb2xQb3NpdGlvbixcbiAgICAgICAgbWluV2lkdGgsXG4gICAgICAgIG1pbkhlaWdodCxcbiAgICAgICAgbWF4V2lkdGgsXG4gICAgICAgIG1heEhlaWdodCxcbiAgICAgICAga2VlcEFzcGVjdFJhdGlvLFxuICAgICAgICBnZXRQb2ludGVyUG9zaXRpb24sXG4gICAgICAgIG9uUmVzaXplU3RhcnQsXG4gICAgICAgIG9uUmVzaXplLFxuICAgICAgICBvblJlc2l6ZUVuZCxcbiAgICBdKTtcbiAgICBjb25zdCBwb3NpdGlvbkNsYXNzTmFtZXMgPSBjb250cm9sUG9zaXRpb24uc3BsaXQoJy0nKTtcbiAgICBjb25zdCBjb2xvclN0eWxlUHJvcCA9IHZhcmlhbnQgPT09IFJlc2l6ZUNvbnRyb2xWYXJpYW50LkxpbmUgPyAnYm9yZGVyQ29sb3InIDogJ2JhY2tncm91bmRDb2xvcic7XG4gICAgY29uc3QgY29udHJvbFN0eWxlID0gY29sb3IgPyB7IC4uLnN0eWxlLCBbY29sb3JTdHlsZVByb3BdOiBjb2xvciB9IDogc3R5bGU7XG4gICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBjYyhbJ3JlYWN0LWZsb3dfX3Jlc2l6ZS1jb250cm9sJywgJ25vZHJhZycsIC4uLnBvc2l0aW9uQ2xhc3NOYW1lcywgdmFyaWFudCwgY2xhc3NOYW1lXSksIHJlZjogcmVzaXplQ29udHJvbFJlZiwgc3R5bGU6IGNvbnRyb2xTdHlsZSB9LCBjaGlsZHJlbikpO1xufVxudmFyIFJlc2l6ZUNvbnRyb2wkMSA9IG1lbW8oUmVzaXplQ29udHJvbCk7XG5cbmNvbnN0IGhhbmRsZUNvbnRyb2xzID0gWyd0b3AtbGVmdCcsICd0b3AtcmlnaHQnLCAnYm90dG9tLWxlZnQnLCAnYm90dG9tLXJpZ2h0J107XG5jb25zdCBsaW5lQ29udHJvbHMgPSBbJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddO1xuZnVuY3Rpb24gTm9kZVJlc2l6ZXIoeyBub2RlSWQsIGlzVmlzaWJsZSA9IHRydWUsIGhhbmRsZUNsYXNzTmFtZSwgaGFuZGxlU3R5bGUsIGxpbmVDbGFzc05hbWUsIGxpbmVTdHlsZSwgY29sb3IsIG1pbldpZHRoID0gMTAsIG1pbkhlaWdodCA9IDEwLCBtYXhXaWR0aCA9IE51bWJlci5NQVhfVkFMVUUsIG1heEhlaWdodCA9IE51bWJlci5NQVhfVkFMVUUsIGtlZXBBc3BlY3RSYXRpbyA9IGZhbHNlLCBzaG91bGRSZXNpemUsIG9uUmVzaXplU3RhcnQsIG9uUmVzaXplLCBvblJlc2l6ZUVuZCwgfSkge1xuICAgIGlmICghaXNWaXNpYmxlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsXG4gICAgICAgIGxpbmVDb250cm9scy5tYXAoKGMpID0+IChSZWFjdC5jcmVhdGVFbGVtZW50KFJlc2l6ZUNvbnRyb2wkMSwgeyBrZXk6IGMsIGNsYXNzTmFtZTogbGluZUNsYXNzTmFtZSwgc3R5bGU6IGxpbmVTdHlsZSwgbm9kZUlkOiBub2RlSWQsIHBvc2l0aW9uOiBjLCB2YXJpYW50OiBSZXNpemVDb250cm9sVmFyaWFudC5MaW5lLCBjb2xvcjogY29sb3IsIG1pbldpZHRoOiBtaW5XaWR0aCwgbWluSGVpZ2h0OiBtaW5IZWlnaHQsIG1heFdpZHRoOiBtYXhXaWR0aCwgbWF4SGVpZ2h0OiBtYXhIZWlnaHQsIG9uUmVzaXplU3RhcnQ6IG9uUmVzaXplU3RhcnQsIGtlZXBBc3BlY3RSYXRpbzoga2VlcEFzcGVjdFJhdGlvLCBzaG91bGRSZXNpemU6IHNob3VsZFJlc2l6ZSwgb25SZXNpemU6IG9uUmVzaXplLCBvblJlc2l6ZUVuZDogb25SZXNpemVFbmQgfSkpKSxcbiAgICAgICAgaGFuZGxlQ29udHJvbHMubWFwKChjKSA9PiAoUmVhY3QuY3JlYXRlRWxlbWVudChSZXNpemVDb250cm9sJDEsIHsga2V5OiBjLCBjbGFzc05hbWU6IGhhbmRsZUNsYXNzTmFtZSwgc3R5bGU6IGhhbmRsZVN0eWxlLCBub2RlSWQ6IG5vZGVJZCwgcG9zaXRpb246IGMsIGNvbG9yOiBjb2xvciwgbWluV2lkdGg6IG1pbldpZHRoLCBtaW5IZWlnaHQ6IG1pbkhlaWdodCwgbWF4V2lkdGg6IG1heFdpZHRoLCBtYXhIZWlnaHQ6IG1heEhlaWdodCwgb25SZXNpemVTdGFydDogb25SZXNpemVTdGFydCwga2VlcEFzcGVjdFJhdGlvOiBrZWVwQXNwZWN0UmF0aW8sIHNob3VsZFJlc2l6ZTogc2hvdWxkUmVzaXplLCBvblJlc2l6ZTogb25SZXNpemUsIG9uUmVzaXplRW5kOiBvblJlc2l6ZUVuZCB9KSkpKSk7XG59XG5cbmV4cG9ydCB7IFJlc2l6ZUNvbnRyb2wkMSBhcyBOb2RlUmVzaXplQ29udHJvbCwgTm9kZVJlc2l6ZXIsIFJlc2l6ZUNvbnRyb2xWYXJpYW50IH07XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJtZW1vIiwidXNlUmVmIiwidXNlRWZmZWN0IiwiY2MiLCJkcmFnIiwic2VsZWN0IiwidXNlTm9kZUlkIiwidXNlU3RvcmVBcGkiLCJ1c2VHZXRQb2ludGVyUG9zaXRpb24iLCJjbGFtcCIsIlJlc2l6ZUNvbnRyb2xWYXJpYW50IiwiZ2V0RGlyZWN0aW9uIiwid2lkdGgiLCJwcmV2V2lkdGgiLCJoZWlnaHQiLCJwcmV2SGVpZ2h0IiwiaW52ZXJ0WCIsImludmVydFkiLCJkZWx0YVdpZHRoIiwiZGVsdGFIZWlnaHQiLCJkaXJlY3Rpb24iLCJpbml0UHJldlZhbHVlcyIsIngiLCJ5IiwiaW5pdFN0YXJ0VmFsdWVzIiwicG9pbnRlclgiLCJwb2ludGVyWSIsImFzcGVjdFJhdGlvIiwiUmVzaXplQ29udHJvbCIsIm5vZGVJZCIsInBvc2l0aW9uIiwidmFyaWFudCIsIkhhbmRsZSIsImNsYXNzTmFtZSIsInN0eWxlIiwiY2hpbGRyZW4iLCJjb2xvciIsIm1pbldpZHRoIiwibWluSGVpZ2h0IiwibWF4V2lkdGgiLCJOdW1iZXIiLCJNQVhfVkFMVUUiLCJtYXhIZWlnaHQiLCJrZWVwQXNwZWN0UmF0aW8iLCJzaG91bGRSZXNpemUiLCJvblJlc2l6ZVN0YXJ0Iiwib25SZXNpemUiLCJvblJlc2l6ZUVuZCIsImNvbnRleHROb2RlSWQiLCJpZCIsInN0b3JlIiwicmVzaXplQ29udHJvbFJlZiIsInN0YXJ0VmFsdWVzIiwicHJldlZhbHVlcyIsImdldFBvaW50ZXJQb3NpdGlvbiIsImRlZmF1bHRQb3NpdGlvbiIsIkxpbmUiLCJjb250cm9sUG9zaXRpb24iLCJjdXJyZW50Iiwic2VsZWN0aW9uIiwiZW5hYmxlWCIsImluY2x1ZGVzIiwiZW5hYmxlWSIsImRyYWdIYW5kbGVyIiwib24iLCJldmVudCIsIm5vZGUiLCJnZXRTdGF0ZSIsIm5vZGVJbnRlcm5hbHMiLCJnZXQiLCJ4U25hcHBlZCIsInlTbmFwcGVkIiwidHJpZ2dlck5vZGVDaGFuZ2VzIiwiY2hhbmdlcyIsInN0YXJ0WCIsInN0YXJ0WSIsInN0YXJ0V2lkdGgiLCJzdGFydEhlaWdodCIsInN0YXJ0Tm9kZVgiLCJzdGFydE5vZGVZIiwicHJldlgiLCJwcmV2WSIsImRpc3RYIiwiTWF0aCIsImZsb29yIiwiZGlzdFkiLCJuZXh0QXNwZWN0UmF0aW8iLCJpc0RpYWdvbmFsIiwiaXNIb3Jpem9udGFsIiwiaXNWZXJ0aWNhbCIsImlzV2lkdGhDaGFuZ2UiLCJpc0hlaWdodENoYW5nZSIsImlzWFBvc0NoYW5nZSIsImlzWVBvc0NoYW5nZSIsInBvc2l0aW9uQ2hhbmdlIiwidHlwZSIsInB1c2giLCJkaW1lbnNpb25DaGFuZ2UiLCJ1cGRhdGVTdHlsZSIsInJlc2l6aW5nIiwiZGltZW5zaW9ucyIsImxlbmd0aCIsIm5leHRWYWx1ZXMiLCJjYWxsUmVzaXplIiwiY2FsbCIsInBvc2l0aW9uQ2xhc3NOYW1lcyIsInNwbGl0IiwiY29sb3JTdHlsZVByb3AiLCJjb250cm9sU3R5bGUiLCJjcmVhdGVFbGVtZW50IiwicmVmIiwiUmVzaXplQ29udHJvbCQxIiwiaGFuZGxlQ29udHJvbHMiLCJsaW5lQ29udHJvbHMiLCJOb2RlUmVzaXplciIsImlzVmlzaWJsZSIsImhhbmRsZUNsYXNzTmFtZSIsImhhbmRsZVN0eWxlIiwibGluZUNsYXNzTmFtZSIsImxpbmVTdHlsZSIsIkZyYWdtZW50IiwibWFwIiwiYyIsImtleSIsIk5vZGVSZXNpemVDb250cm9sIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@reactflow/node-resizer/dist/esm/index.mjs\n");

/***/ })

};
;